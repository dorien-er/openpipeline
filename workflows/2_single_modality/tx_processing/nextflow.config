manifest {
  nextflowVersion = '!>=20.12.1-edge'
}

// ADAPT rootDir ACCORDING TO RELATIVE PATH WITHIN PROJECT
params {
  rootDir = "$projectDir/../../../"
}

def viash_temp = System.getenv("VIASH_TEMP") ?: "/tmp/"
def rootDir = java.nio.file.Paths.get(params.rootDir).toAbsolutePath().normalize().toString()
targetDir = "$rootDir/target/nextflow"

// INSERT CUSTOM IMPORTS HERE
includeConfig "$targetDir/filter/filter_with_counts/nextflow.config"
includeConfig "$targetDir/filter/filter_with_scrublet/nextflow.config"
includeConfig "$targetDir/filter/do_filter/nextflow.config"
includeConfig "$targetDir/normalize/lognorm/nextflow.config"
includeConfig "$targetDir/hvg/hvg_scanpy/nextflow.config"
includeConfig "$targetDir/dimred/pca/nextflow.config"
includeConfig "$targetDir/neighbors/find_neighbors/nextflow.config"
includeConfig "$targetDir/dimred/umap/nextflow.config"
includeConfig "$targetDir/cluster/leiden/nextflow.config"

includeConfig "$targetDir/transfer/publish/nextflow.config"
// END INSERT

docker {
  runOptions = "-v $rootDir:$rootDir -v $viash_temp:$viash_temp"
}

process {
  errorStrategy = 'ignore'
  container = 'nextflow/bash:latest'
}









def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
def publishDir = java.nio.file.Paths.get(params.publishDir).toAbsolutePath().normalize().toString()
params.logDir = "${publishDir}/_transcript/${trace_timestamp}"

timeline {
    enabled = true
    file    = "${params.logDir}/execution_timeline.html"
}
report {
    enabled = true
    file    = "${params.logDir}/execution_report.html"
}
trace {
    enabled = true
    file    = "${params.logDir}/execution_trace.txt"
}
dag {
    enabled = true
    file    = "${params.logDir}/pipeline_dag.svg"
}

process.afterScript = {
    logMainDir = params.logDir

    // Build log directory path based on task name
    logSubDir = task.name.replace(" (null)", "").replace(" ", "/").replaceAll(" ", "_").replaceAll("[()]", "")
    logDir = logMainDir + "/" + logSubDir

    // Define command to copy log files
    cpLogCmd = workflow.profile == "aws" ?
        "nxf_s3_upload '*.txt' ${logDir}; " :
        "mkdir -p ${logDir}; cp -a *.txt ${logDir}; "

    // Assemble final command
    cmd = "ls -alR --full-time > .command.ls; "
    cmd += "mkdir nxf_log; "
    cmd += "for file in .command.*; do cp -a \${file} nxf_log/\${file#.}.txt; done; "
    cmd += "cd nxf_log; "
    cmd += cpLogCmd
    cmd += "cd ..;"
    cmd
}