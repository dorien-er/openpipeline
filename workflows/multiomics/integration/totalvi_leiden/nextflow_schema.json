{
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "totalvi_leiden",
    "description": "Run totalVI integration followed by neighbour calculations, leiden clustering and run umap on the result.",
    "type": "object",
    "definitions": {
      "inputs" : {
        "title": "Inputs",
        "type": "object",
        "description": "No description",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the sample.",
            "default": ""
          },
          "input": {
            "type": "string",
            "description": "Path to the sample.",
            "default": ""
          },
          "layer": {
            "type": "string",
            "description": "use specified layer for expression values instead of the .X object from the modality.",
            "default": "log_normalized"
          },
          "modality": {
            "type": "string",
            "description": "Which modality to process.",
            "default": "rna"
          },
          "prot_modality": {
            "type": "string",
            "description": "Which modality to process.",
            "default": "prot"
          },
          "reference": {
            "type": "string",
            "description": "Input h5mu file with reference data to train the TOTALVI model.",
            "default": ""
          }
          
        }
      },
      "outputs" : {
        "title": "Outputs",
        "type": "object",
        "description": "No description",
        "properties": {
          "output": {
            "type": "string",
            "description": "Destination path to the output.",
            "default": "$id.$key.output.h5mu"
          },
          "reference_model_path": {
            "type": "string",
            "description": "Directory with the reference model. If not exists, trained model will be saved there",
            "default": "$id.$key.reference_model_path.reference_model_path"
          },
          "query_model_path": {
            "type": "string",
            "description": "Directory, where the query model will be saved",
            "default": "$id.$key.query_model_path.query_model_path"
          }
          
        }
      },
      "general totalvi options" : {
        "title": "General TotalVI Options",
        "type": "object",
        "description": "No description",
        "properties": {
          "obs_batch": {
            "type": "string",
            "description": ".Obs column name discriminating between your batches.",
            "default": "sample_id"
          },
          "max_epochs": {
            "type": "integer",
            "description": "Number of passes through the dataset",
            "default": "400"
          },
          "max_query_epochs": {
            "type": "integer",
            "description": "Number of passes through the dataset, when fine-tuning model for query",
            "default": "200"
          },
          "weight_decay": {
            "type": "number",
            "description": "Weight decay, when fine-tuning model for query",
            "default": "0.0"
          },
          "force_retrain": {
            "type": "boolean",
            "description": "If true, retrain the model and save it to reference_model_path",
            "default": "False"
          },
          "var_input": {
            "type": "string",
            "description": "Boolean .var column to subset data with (e.g. containing highly variable genes). By default, do not subset genes.",
            "default": ""
          }
          
        }
      },
      "totalvi integration options rna" : {
        "title": "TotalVI integration options RNA",
        "type": "object",
        "description": "No description",
        "properties": {
          "rna_reference_modality": {
            "type": "string",
            "description": "No description",
            "default": "rna"
          },
          "rna_obsm_output": {
            "type": "string",
            "description": "In which .obsm slot to store the normalized RNA from TOTALVI.",
            "default": "X_totalvi"
          }
          
        }
      },
      "totalvi integration options adt" : {
        "title": "TotalVI integration options ADT",
        "type": "object",
        "description": "No description",
        "properties": {
          "prot_reference_modality": {
            "type": "string",
            "description": "Name of the modality containing proteins in the reference",
            "default": "prot"
          },
          "prot_obsm_output": {
            "type": "string",
            "description": "In which .obsm slot to store the normalized protein data from TOTALVI.",
            "default": "X_totalvi"
          }
          
        }
      },
      "neighbour calculation rna" : {
        "title": "Neighbour calculation RNA",
        "type": "object",
        "description": "No description",
        "properties": {
          "rna_uns_neighbors": {
            "type": "string",
            "description": "In which .uns slot to store various neighbor output objects.",
            "default": "totalvi_integration_neighbors"
          },
          "rna_obsp_neighbor_distances": {
            "type": "string",
            "description": "In which .obsp slot to store the distance matrix between the resulting neighbors.",
            "default": "totalvi_integration_distances"
          },
          "rna_obsp_neighbor_connectivities": {
            "type": "string",
            "description": "In which .obsp slot to store the connectivities matrix between the resulting neighbors.",
            "default": "totalvi_integration_connectivities"
          }
          
        }
      },
      "neighbour calculation adt" : {
        "title": "Neighbour calculation ADT",
        "type": "object",
        "description": "No description",
        "properties": {
          "prot_uns_neighbors": {
            "type": "string",
            "description": "In which .uns slot to store various neighbor output objects.",
            "default": "totalvi_integration_neighbors"
          },
          "prot_obsp_neighbor_distances": {
            "type": "string",
            "description": "In which .obsp slot to store the distance matrix between the resulting neighbors.",
            "default": "totalvi_integration_distances"
          },
          "prot_obsp_neighbor_connectivities": {
            "type": "string",
            "description": "In which .obsp slot to store the connectivities matrix between the resulting neighbors.",
            "default": "totalvi_integration_connectivities"
          }
          
        }
      },
      "clustering options rna" : {
        "title": "Clustering options RNA",
        "type": "object",
        "description": "No description",
        "properties": {
          "rna_obs_cluster": {
            "type": "string",
            "description": "Prefix for the .obs keys under which to add the cluster labels. Newly created columns in .obs will ","help_text": "Prefix for the .obs keys under which to add the cluster labels. Newly created columns in .obs will \nbe created from the specified value for \u0027--obs_cluster\u0027 suffixed with an underscore and one of the resolutions\nresolutions specified in \u0027--leiden_resolution\u0027.\n",
            "default": "totalvi_integration_leiden"
          },
          "rna_leiden_resolution": {
            "type": "number",
            "description": "Control the coarseness of the clustering. Higher values lead to more clusters.",
            "default": "[1]"
          }
          
        }
      },
      "clustering options adt" : {
        "title": "Clustering options ADT",
        "type": "object",
        "description": "No description",
        "properties": {
          "prot_obs_cluster": {
            "type": "string",
            "description": "Prefix for the .obs keys under which to add the cluster labels. Newly created columns in .obs will ","help_text": "Prefix for the .obs keys under which to add the cluster labels. Newly created columns in .obs will \nbe created from the specified value for \u0027--obs_cluster\u0027 suffixed with an underscore and one of the resolutions\nresolutions specified in \u0027--leiden_resolution\u0027.\n",
            "default": "totalvi_integration_leiden"
          },
          "prot_leiden_resolution": {
            "type": "number",
            "description": "Control the coarseness of the clustering. Higher values lead to more clusters.",
            "default": "[1]"
          }
          
        }
      },
      "umap options" : {
        "title": "Umap options",
        "type": "object",
        "description": "No description",
        "properties": {
          "obsm_umap": {
            "type": "string",
            "description": "In which .obsm slot to store the resulting UMAP embedding.",
            "default": "X_totalvi_umap"
          }
          
        }
      },
      "nextflow input-output arguments" : {
        "title": "Nextflow input-output arguments",
        "type": "object",
        "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
        "properties": {
          "publish_dir": {
            "type": "string",
            "description": "Path to an output directory.",
            "default": ""
          },
          "param_list": {
            "type": "string",
            "description": "Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.","help_text": "Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.","hidden": true,
            "default": ""
          }
          
        }
      }
    },
    "allOf": [
      {
        "$ref": "#/definitions/inputs"
      },
      {
        "$ref": "#/definitions/outputs"
      },
      {
        "$ref": "#/definitions/general totalvi options"
      },
      {
        "$ref": "#/definitions/totalvi integration options rna"
      },
      {
        "$ref": "#/definitions/totalvi integration options adt"
      },
      {
        "$ref": "#/definitions/neighbour calculation rna"
      },
      {
        "$ref": "#/definitions/neighbour calculation adt"
      },
      {
        "$ref": "#/definitions/clustering options rna"
      },
      {
        "$ref": "#/definitions/clustering options adt"
      },
      {
        "$ref": "#/definitions/umap options"
      },
      {
        "$ref": "#/definitions/nextflow input-output arguments"
      }
      ]
}
