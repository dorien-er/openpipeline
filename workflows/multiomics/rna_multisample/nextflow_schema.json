{
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "rna_multisample",
    "description": "Processing unimodal multi-sample RNA transcriptomics data.",
    "type": "object",
    "definitions": {
      "inputs" : {
        "title": "Inputs",
        "type": "object",
        "description": "No description",
        "default": "",
        "properties": {"id": {
            "type":"string",
            "description": "ID of the concatenated file",
            
            "default": ""
          },"sample_id": {
            "type":"string",
            "description": "IDs of the sample.",
            
            "default": ""
          },"input": {
            "type":"string",
            "description": "Path to the samples.",
            
            "default": ""
          }
        }
      },
      "filtering highly variable genes" : {
        "title": "Filtering highly variable genes",
        "type": "object",
        "description": "No description",
        "default": "",
        "properties": {"filter_with_hvg_var_output": {
            "type":"string",
            "description": "In which .var slot to store a boolean array corresponding to the highly variable genes.",
            
            "default": "filter_with_hvg"
          },"filter_with_hvg_obs_batch_key": {
            "type":"string",
            "description": "If specified, highly-variable genes are selected within each batch separately and merged. This simple ","help_text": "If specified, highly-variable genes are selected within each batch separately and merged. This simple \nprocess avoids the selection of batch-specific genes and acts as a lightweight batch correction method. \nFor all flavors, genes are first sorted by how many batches they are a HVG. For dispersion-based flavors \nties are broken by normalized dispersion. If flavor = \u0027seurat_v3\u0027, ties are broken by the median (across\nbatches) rank based on within-batch normalized variance.\n",
            
            "default": "sample_id"
          },"filter_with_hvg_flavor": {
            "type":"string",
            "description": "Choose the flavor for identifying highly variable genes. For the dispersion based methods","help_text": "Choose the flavor for identifying highly variable genes. For the dispersion based methods\nin their default workflows, Seurat passes the cutoffs whereas Cell Ranger passes n_top_genes.\n",
            "enum": ["seurat", "cell_ranger", "seurat_v3"],
            "default": "seurat"
          },"filter_with_hvg_n_top_genes": {
            "type":"integer",
            "description": "Number of highly-variable genes to keep. Mandatory if filter_with_hvg_flavor is set to \u0027seurat_v3\u0027.",
            
            "default": ""
          }
        }
      },
      "nextflow input-output arguments" : {
        "title": "Nextflow input-output arguments",
        "type": "object",
        "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
        "default": "",
        "properties": {"publish_dir": {
            "type":"string",
            "description": "Path to an output directory.",
            
            "default": ""
          },"param_list": {
            "type":"string",
            "description": "Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.","help_text": "Allows inputting multiple parameter sets to initialise a Nextflow channel. A `param_list` can either be a list of maps, a csv file, a json file, a yaml file, or simply a yaml blob.\n\n* A list of maps (as-is) where the keys of each map corresponds to the arguments of the pipeline. Example: in a `nextflow.config` file: `param_list: [ [\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027], [\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027] ]`.\n* A csv file should have column names which correspond to the different arguments of this pipeline. Example: `--param_list data.csv` with columns `id,input`.\n* A json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline. Example: `--param_list data.json` with contents `[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]`.\n* A yaml blob can also be passed directly as a string. Example: `--param_list \"[ {\u0027id\u0027: \u0027foo\u0027, \u0027input\u0027: \u0027foo.txt\u0027}, {\u0027id\u0027: \u0027bar\u0027, \u0027input\u0027: \u0027bar.txt\u0027} ]\"`.\n\nWhen passing a csv, json or yaml file, relative path names are relativized to the location of the parameter file. No relativation is performed when `param_list` is a list of maps (as-is) or a yaml blob.","hidden": true,
            
            "default": ""
          }
        }
      }
    },
    "allOf": [
      {
        "$ref": "#/definitions/inputs"
      },
      {
        "$ref": "#/definitions/filtering highly variable genes"
      },
      {
        "$ref": "#/definitions/nextflow input-output arguments"
      }
      
    ]
}
