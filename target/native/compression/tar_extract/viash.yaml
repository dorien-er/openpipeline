functionality:
  name: "tar_extract"
  namespace: "compression"
  version: "main_build"
  authors: []
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--input"
    alternatives:
    - "-i"
    description: "Input file"
    example:
    - "input.tar.gz"
    default: []
    must_exist: false
    required: true
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--output"
    alternatives:
    - "-o"
    description: "Folder to restore file(s) to."
    example:
    - "output_folder"
    default: []
    must_exist: false
    required: true
    direction: "output"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--strip_components"
    alternatives:
    - "-s"
    description: "Strip this amount of leading components from file names on extraction.\
      \ For example, to extract only 'myfile.txt' from an archive containing the structure\
      \ `this/goes/deep/myfile.txt', use 3 to strip 'this/goes/deep/'."
    example:
    - 1
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--exclude"
    alternatives:
    - "-e"
    description: "Prevents any file or member whose name matches the shell wildcard\
      \ (pattern) from being extracted."
    example:
    - "docs/figures"
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  argument_groups: []
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      # tar_extract main_build
      # 
      # This wrapper script is auto-generated by viash 0.6.0 and is thus a derivative
      # work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
      # Intuitive.
      # 
      # The component may contain files which fall under a different license. The
      # authors of this component should specify the license in the header of such
      # files, or include a separate license file detailing the licenses of all included
      # files.
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TEMP}
        VIASH_TEMP=${VIASH_TEMP:-/tmp}
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      VIASH_LOGCODE_EMERGENCY=0
      VIASH_LOGCODE_ALERT=1
      VIASH_LOGCODE_CRITICAL=2
      VIASH_LOGCODE_ERROR=3
      VIASH_LOGCODE_WARNING=4
      VIASH_LOGCODE_NOTICE=5
      VIASH_LOGCODE_INFO=6
      VIASH_LOGCODE_DEBUG=7
      VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '.
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '.
      function ViashEmergency {
        ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '.
      function ViashAlert {
        ViashLog $VIASH_LOGCODE_ALERT alert "$@"
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '.
      function ViashCritical {
        ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '.
      function ViashError {
        ViashLog $VIASH_LOGCODE_ERROR error "$@"
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '.
      function ViashWarning {
        ViashLog $VIASH_LOGCODE_WARNING warning "$@"
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '.
      function ViashNotice {
        ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '.
      function ViashInfo {
        ViashLog $VIASH_LOGCODE_INFO info "$@"
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '.
      function ViashDebug {
        ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
      }
      
      # find source folder of this component
      VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      # backwards compatibility
      VIASH_RESOURCES_DIR="$VIASH_META_RESOURCES_DIR"
      
      # define meta fields
      VIASH_META_FUNCTIONALITY_NAME="tar_extract"
      VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "tar_extract main_build"
        echo ""
        echo "Extract files from a tar archive"
        echo ""
        echo "Arguments:"
        echo "    -i, --input"
        echo "        type: file, required parameter"
        echo "        example: input.tar.gz"
        echo "        Input file"
        echo ""
        echo "    -o, --output"
        echo "        type: file, required parameter, output"
        echo "        example: output_folder"
        echo "        Folder to restore file(s) to."
        echo ""
        echo "    -s, --strip_components"
        echo "        type: integer"
        echo "        example: 1"
        echo "        Strip this amount of leading components from file names on extraction."
        echo "        For example, to extract only 'myfile.txt' from an archive containing the"
        echo "        structure \`this/goes/deep/myfile.txt', use 3 to strip 'this/goes/deep/'."
        echo ""
        echo "    -e, --exclude"
        echo "        type: string"
        echo "        example: docs/figures"
        echo "        Prevents any file or member whose name matches the shell wildcard"
        echo "        (pattern) from being extracted."
      }
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      VIASH_MODE='run'
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              ---v|---verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              ---verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              ---verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "tar_extract main_build"
                  exit
                  ;;
              --input)
                  [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_INPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --input=*)
                  [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input=*\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -i)
                  [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'-i\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_INPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to -i. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --output)
                  [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_OUTPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --output=*)
                  [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output=*\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -o)
                  [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'-o\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_OUTPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to -o. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --strip_components)
                  [ -n "$VIASH_PAR_STRIP_COMPONENTS" ] && ViashError Bad arguments for option \'--strip_components\': \'$VIASH_PAR_STRIP_COMPONENTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_STRIP_COMPONENTS="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --strip_components. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --strip_components=*)
                  [ -n "$VIASH_PAR_STRIP_COMPONENTS" ] && ViashError Bad arguments for option \'--strip_components=*\': \'$VIASH_PAR_STRIP_COMPONENTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_STRIP_COMPONENTS=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -s)
                  [ -n "$VIASH_PAR_STRIP_COMPONENTS" ] && ViashError Bad arguments for option \'-s\': \'$VIASH_PAR_STRIP_COMPONENTS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_STRIP_COMPONENTS="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to -s. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --exclude)
                  [ -n "$VIASH_PAR_EXCLUDE" ] && ViashError Bad arguments for option \'--exclude\': \'$VIASH_PAR_EXCLUDE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_EXCLUDE="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --exclude. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --exclude=*)
                  [ -n "$VIASH_PAR_EXCLUDE" ] && ViashError Bad arguments for option \'--exclude=*\': \'$VIASH_PAR_EXCLUDE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_EXCLUDE=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -e)
                  [ -n "$VIASH_PAR_EXCLUDE" ] && ViashError Bad arguments for option \'-e\': \'$VIASH_PAR_EXCLUDE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_EXCLUDE="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to -e. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              ---n_proc)
                  [ -n "$VIASH_META_N_PROC" ] && ViashError Bad arguments for option \'---n_proc\': \'$VIASH_META_N_PROC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_META_N_PROC="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to ---n_proc. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              ---n_proc=*)
                  [ -n "$VIASH_META_N_PROC" ] && ViashError Bad arguments for option \'---n_proc=*\': \'$VIASH_META_N_PROC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_META_N_PROC=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              ---memory)
                  [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_META_MEMORY="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              ---memory=*)
                  [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      
      # helper function for parsing memory strings
      function ViashMemoryAsBytes {
        local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
        local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
        if [[ $memory =~ $memory_regex ]]; then
          local number=${memory/[^0-9]*/}
          local symbol=${memory/*[0-9]/}
          
          case $symbol in
            b)      memory_b=$number ;;
            kb|k)   memory_b=$(( $number * 1024 )) ;;
            mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
            gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
            tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
            pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
          esac
          echo "$memory_b"
        fi
      }
      # compute memory in different units
      if [ ! -z ${VIASH_META_MEMORY+x} ]; then
        VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
        # do not define other variables if memory_b is an empty string
        if [ ! -z "$VIASH_META_MEMORY_B" ]; then
          VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
          VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
          VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
          VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
          VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
        else
          # unset memory if string is empty
          unset $VIASH_META_MEMORY_B
        fi
      fi
      # unset nproc if string is empty
      if [ -z "$VIASH_META_N_PROC" ]; then
        unset $VIASH_META_N_PROC
      fi
      
      
      
      
      # check whether required parameters exist
      if [ -z ${VIASH_PAR_INPUT+x} ]; then
        ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z ${VIASH_PAR_OUTPUT+x} ]; then
        ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      
      
      
      # check whether parameters values are of the right type
      if [[ -n "$VIASH_PAR_STRIP_COMPONENTS" ]]; then
        if ! [[ "$VIASH_PAR_STRIP_COMPONENTS" =~ ^[-+]?[0-9]+$ ]]; then
          ViashError '--strip_components' has to be an integer. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      
      # check whether parameters values are of the right type
      
      
      
      
      
      cat << VIASHEOF | bash
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-tar_extract-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      function interrupt {
        echo -e "\nCTRL-C Pressed..."
        exit 1
      }
      trap clean_up EXIT
      trap interrupt INT SIGINT
      cat > "\$tempscript" << 'VIASHMAIN'
      
      #!/usr/bin/env bash
      
      ## VIASH START
      # The following code has been auto-generated by Viash.
      $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "par_input='${VIASH_PAR_INPUT//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "par_output='${VIASH_PAR_OUTPUT//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_PAR_STRIP_COMPONENTS+x} ]; then echo "par_strip_components='${VIASH_PAR_STRIP_COMPONENTS//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_PAR_EXCLUDE+x} ]; then echo "par_exclude='${VIASH_PAR_EXCLUDE//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "meta_functionality_name='${VIASH_META_FUNCTIONALITY_NAME//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "meta_resources_dir='${VIASH_META_RESOURCES_DIR//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "meta_executable='${VIASH_META_EXECUTABLE//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_TEMP+x} ]; then echo "meta_temp_dir='${VIASH_TEMP//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_N_PROC+x} ]; then echo "meta_n_proc='${VIASH_META_N_PROC//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "meta_memory_b='${VIASH_META_MEMORY_B//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "meta_memory_kb='${VIASH_META_MEMORY_KB//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "meta_memory_mb='${VIASH_META_MEMORY_MB//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "meta_memory_gb='${VIASH_META_MEMORY_GB//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "meta_memory_tb='${VIASH_META_MEMORY_TB//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "meta_memory_pb='${VIASH_META_MEMORY_PB//\'/\'\"\'\"\'}'"; fi )
      resources_dir="$VIASH_META_RESOURCES_DIR"
      
      ## VIASH END
      
      extra_params=()
      mkdir -p \$par_output # Create output directory if it doesn't exist already
      
      if [ "\$par_strip_components" != "" ]; then
          extra_params+=("--strip-components=\$par_strip_components")
      fi
      
      if [ "\$par_exclude" != "" ]; then
          extra_params+=("--exclude=\$par_exclude")
      fi
      
      echo "Extracting \$par_input to \$par_output..."
      echo ""
      tar "\${extra_params[@]}" -xvf "\$par_input" -C "\$par_output"
      
      VIASHMAIN
      bash "\$tempscript" &
      wait "\$!"
      
      VIASHEOF
      

    dest: "tar_extract"
    is_executable: true
  description: "Extract files from a tar archive"
  test_resources:
  - type: "bash_script"
    path: "run_test.sh"
    is_executable: true
  - type: "file"
    path: "../../resources_test/LICENSE"
  info: {}
  status: "enabled"
  requirements:
    commands: []
  dummy_arguments: []
  set_wd_to_resources_dir: false
platform:
  type: "native"
  id: "native"
platforms: []
info:
  config: "src/compression/tar_extract/config.vsh.yaml"
  platform: "native"
  output: "target/native/compression/tar_extract"
  executable: "target/native/compression/tar_extract/tar_extract"
  viash_version: "0.6.0"
  git_commit: "d98433c997661b46b9560b8f20b4acafc1a29a6c"
  git_remote: "https://github.com/openpipelines-bio/openpipeline"
