functionality:
  name: "scvelo"
  namespace: "projection"
  version: "main_build"
  authors:
  - name: "Dries Schaumont"
    email: "dries.schaumont@data-intuitive.com"
    roles:
    - "maintainer"
    props:
      github: "DriesSchaumont"
      orcid: "0000-0002-4389-0440"
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--input"
    alternatives: []
    description: "Velocyto loom file."
    example: []
    default: []
    must_exist: false
    required: true
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "Output directory. If it does not exist, will be created."
    example: []
    default: []
    must_exist: false
    required: true
    direction: "output"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--min_counts"
    alternatives: []
    description: "Minimum number of counts required for a gene to pass filtering (spliced)."
    example: []
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--min_counts_u"
    alternatives: []
    description: "Minimum number of counts required for a gene to pass filtering (unspliced)."
    example: []
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--min_cells"
    alternatives: []
    description: "Minimum number of cells expressed required to pass filtering (spliced)."
    example: []
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--min_cells_u"
    alternatives: []
    description: "Minimum number of cells expressed required to pass filtering (unspliced)."
    example: []
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--min_shared_counts"
    alternatives: []
    description: "Minimum number of counts (both unspliced and spliced) required for\
      \ a gene."
    example: []
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--min_shared_cells"
    alternatives: []
    description: "Minimum number of cells required to be expressed (both unspliced\
      \ and spliced)."
    example: []
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--n_top_genes"
    alternatives: []
    description: "Number of genes to keep."
    example: []
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "boolean"
    name: "--log_transform"
    alternatives: []
    description: "Do not log transform counts."
    example: []
    default:
    - true
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--n_principal_components"
    alternatives: []
    description: "Number of principal components to use for calculating moments."
    example: []
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--n_neighbors"
    alternatives: []
    description: "Number of neighbors to use. First/second-order moments are computed\
      \ for each\ncell across its nearest neighbors, where the neighbor graph is obtained\
      \ from\neuclidean distances in PCA space.\n"
    example: []
    default:
    - 30
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  argument_groups:
  - name: "Filtering and normalization"
    description: "Arguments for filtering, normalization an log transform (see scvelo.pp.filter_and_normalize\
      \ function)"
    arguments:
    - "min_counts"
    - "min_counts_u"
    - "min_cells"
    - "min_cells_u"
    - "min_shared_counts"
    - "min_shared_cells"
    - "n_top_genes"
    - "log_transform"
  - name: "Fitting parameters"
    description: "Arguments for fitting the data"
    arguments:
    - "n_principal_components"
    - "n_neighbors"
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      # scvelo main_build
      # 
      # This wrapper script is auto-generated by viash 0.5.15 and is thus a derivative
      # work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
      # Intuitive.
      # 
      # The component may contain files which fall under a different license. The
      # authors of this component should specify the license in the header of such
      # files, or include a separate license file detailing the licenses of all included
      # files.
      # 
      # Component authors:
      #  * Dries Schaumont <dries.schaumont@data-intuitive.com> (maintainer) {github:
      # DriesSchaumont, orcid: 0000-0002-4389-0440}
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TEMP}
        VIASH_TEMP=${VIASH_TEMP:-/tmp}
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      VIASH_LOGCODE_EMERGENCY=0
      VIASH_LOGCODE_ALERT=1
      VIASH_LOGCODE_CRITICAL=2
      VIASH_LOGCODE_ERROR=3
      VIASH_LOGCODE_WARNING=4
      VIASH_LOGCODE_NOTICE=5
      VIASH_LOGCODE_INFO=6
      VIASH_LOGCODE_DEBUG=7
      VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '.
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '.
      function ViashEmergency {
        ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '.
      function ViashAlert {
        ViashLog $VIASH_LOGCODE_ALERT alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '.
      function ViashCritical {
        ViashLog $VIASH_LOGCODE_CRITICAL critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '.
      function ViashError {
        ViashLog $VIASH_LOGCODE_ERROR error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '.
      function ViashWarning {
        ViashLog $VIASH_LOGCODE_WARNING warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '.
      function ViashNotice {
        ViashLog $VIASH_LOGCODE_NOTICE notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '.
      function ViashInfo {
        ViashLog $VIASH_LOGCODE_INFO info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '.
      function ViashDebug {
        ViashLog $VIASH_LOGCODE_DEBUG debug $@
      }
      
      # find source folder of this component
      VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      # backwards compatibility
      VIASH_RESOURCES_DIR="$VIASH_META_RESOURCES_DIR"
      
      # define meta fields
      VIASH_META_FUNCTIONALITY_NAME="scvelo"
      VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "scvelo main_build"
        echo ""
        echo "Filtering and normalization:"
        echo "    Arguments for filtering, normalization an log transform (see"
        echo "    scvelo.pp.filter_and_normalize function)"
        echo ""
        echo "    --min_counts"
        echo "        type: integer"
        echo "        Minimum number of counts required for a gene to pass filtering"
        echo "        (spliced)."
        echo ""
        echo "    --min_counts_u"
        echo "        type: integer"
        echo "        Minimum number of counts required for a gene to pass filtering"
        echo "        (unspliced)."
        echo ""
        echo "    --min_cells"
        echo "        type: integer"
        echo "        Minimum number of cells expressed required to pass filtering (spliced)."
        echo ""
        echo "    --min_cells_u"
        echo "        type: integer"
        echo "        Minimum number of cells expressed required to pass filtering"
        echo "        (unspliced)."
        echo ""
        echo "    --min_shared_counts"
        echo "        type: integer"
        echo "        Minimum number of counts (both unspliced and spliced) required for a"
        echo "        gene."
        echo ""
        echo "    --min_shared_cells"
        echo "        type: integer"
        echo "        Minimum number of cells required to be expressed (both unspliced and"
        echo "        spliced)."
        echo ""
        echo "    --n_top_genes"
        echo "        type: integer"
        echo "        Number of genes to keep."
        echo ""
        echo "    --log_transform"
        echo "        type: boolean"
        echo "        default: true"
        echo "        Do not log transform counts."
        echo ""
        echo "Fitting parameters:"
        echo "    Arguments for fitting the data"
        echo ""
        echo "    --n_principal_components"
        echo "        type: integer"
        echo "        Number of principal components to use for calculating moments."
        echo ""
        echo "    --n_neighbors"
        echo "        type: integer"
        echo "        default: 30"
        echo "        Number of neighbors to use. First/second-order moments are computed for"
        echo "        each"
        echo "        cell across its nearest neighbors, where the neighbor graph is obtained"
        echo "        from"
        echo "        euclidean distances in PCA space."
        echo ""
        echo "Arguments:"
        echo "    --input"
        echo "        type: file, required parameter"
        echo "        Velocyto loom file."
        echo ""
        echo "    --output"
        echo "        type: file, required parameter, output"
        echo "        Output directory. If it does not exist, will be created."
      }
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      VIASH_MODE='run'
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              ---v|---verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              ---verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              ---verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "scvelo main_build"
                  exit
                  ;;
              --input)
                  VIASH_PAR_INPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --input=*)
                  VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --min_counts)
                  VIASH_PAR_MIN_COUNTS="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --min_counts. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --min_counts=*)
                  VIASH_PAR_MIN_COUNTS=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --min_counts_u)
                  VIASH_PAR_MIN_COUNTS_U="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --min_counts_u. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --min_counts_u=*)
                  VIASH_PAR_MIN_COUNTS_U=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --min_cells)
                  VIASH_PAR_MIN_CELLS="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --min_cells. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --min_cells=*)
                  VIASH_PAR_MIN_CELLS=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --min_cells_u)
                  VIASH_PAR_MIN_CELLS_U="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --min_cells_u. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --min_cells_u=*)
                  VIASH_PAR_MIN_CELLS_U=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --min_shared_counts)
                  VIASH_PAR_MIN_SHARED_COUNTS="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --min_shared_counts. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --min_shared_counts=*)
                  VIASH_PAR_MIN_SHARED_COUNTS=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --min_shared_cells)
                  VIASH_PAR_MIN_SHARED_CELLS="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --min_shared_cells. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --min_shared_cells=*)
                  VIASH_PAR_MIN_SHARED_CELLS=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --n_top_genes)
                  VIASH_PAR_N_TOP_GENES="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --n_top_genes. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --n_top_genes=*)
                  VIASH_PAR_N_TOP_GENES=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --log_transform)
                  VIASH_PAR_LOG_TRANSFORM="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --log_transform. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --log_transform=*)
                  VIASH_PAR_LOG_TRANSFORM=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --n_principal_components)
                  VIASH_PAR_N_PRINCIPAL_COMPONENTS="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --n_principal_components. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --n_principal_components=*)
                  VIASH_PAR_N_PRINCIPAL_COMPONENTS=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --n_neighbors)
                  VIASH_PAR_N_NEIGHBORS="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --n_neighbors. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --n_neighbors=*)
                  VIASH_PAR_N_NEIGHBORS=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_INPUT" ]; then
        ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT" ]; then
        ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_LOG_TRANSFORM" ]; then
        VIASH_PAR_LOG_TRANSFORM="true"
      fi
      if [ -z "$VIASH_PAR_N_NEIGHBORS" ]; then
        VIASH_PAR_N_NEIGHBORS="30"
      fi
      
      
      # check whether parameters values are of the right type
      
      
      if [[ -n "$VIASH_PAR_MIN_COUNTS" ]]; then
        if ! [[ "$VIASH_PAR_MIN_COUNTS" =~ ^[-+]?[0-9]+$ ]]; then
          ViashError '--min_counts' has to be an integer. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      if [[ -n "$VIASH_PAR_MIN_COUNTS_U" ]]; then
        if ! [[ "$VIASH_PAR_MIN_COUNTS_U" =~ ^[-+]?[0-9]+$ ]]; then
          ViashError '--min_counts_u' has to be an integer. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      if [[ -n "$VIASH_PAR_MIN_CELLS" ]]; then
        if ! [[ "$VIASH_PAR_MIN_CELLS" =~ ^[-+]?[0-9]+$ ]]; then
          ViashError '--min_cells' has to be an integer. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      if [[ -n "$VIASH_PAR_MIN_CELLS_U" ]]; then
        if ! [[ "$VIASH_PAR_MIN_CELLS_U" =~ ^[-+]?[0-9]+$ ]]; then
          ViashError '--min_cells_u' has to be an integer. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      if [[ -n "$VIASH_PAR_MIN_SHARED_COUNTS" ]]; then
        if ! [[ "$VIASH_PAR_MIN_SHARED_COUNTS" =~ ^[-+]?[0-9]+$ ]]; then
          ViashError '--min_shared_counts' has to be an integer. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      if [[ -n "$VIASH_PAR_MIN_SHARED_CELLS" ]]; then
        if ! [[ "$VIASH_PAR_MIN_SHARED_CELLS" =~ ^[-+]?[0-9]+$ ]]; then
          ViashError '--min_shared_cells' has to be an integer. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      if [[ -n "$VIASH_PAR_N_TOP_GENES" ]]; then
        if ! [[ "$VIASH_PAR_N_TOP_GENES" =~ ^[-+]?[0-9]+$ ]]; then
          ViashError '--n_top_genes' has to be an integer. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      if [[ -n "$VIASH_PAR_LOG_TRANSFORM" ]]; then
        if ! [[ "$VIASH_PAR_LOG_TRANSFORM" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
          ViashError '--log_transform' has to be a boolean. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      if [[ -n "$VIASH_PAR_N_PRINCIPAL_COMPONENTS" ]]; then
        if ! [[ "$VIASH_PAR_N_PRINCIPAL_COMPONENTS" =~ ^[-+]?[0-9]+$ ]]; then
          ViashError '--n_principal_components' has to be an integer. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      if [[ -n "$VIASH_PAR_N_NEIGHBORS" ]]; then
        if ! [[ "$VIASH_PAR_N_NEIGHBORS" =~ ^[-+]?[0-9]+$ ]]; then
          ViashError '--n_neighbors' has to be an integer. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      
      # check whether parameters values are of the right type
      
      
      
      
      
      
      
      
      
      
      
      
      
      cat << VIASHEOF | bash
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-scvelo-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      function interrupt {
        echo -e "\nCTRL-C Pressed..."
        exit 1
      }
      trap clean_up EXIT
      trap interrupt INT SIGINT
      cat > "\$tempscript" << 'VIASHMAIN'
      
      import scvelo
      import mudata
      import logging
      from contextlib import redirect_stdout
      from pathlib import Path
      import matplotlib as mpl
      from collections import defaultdict
      from sys import stdout
      
      logger = logging.getLogger()
      logger.setLevel(logging.INFO)
      console_handler = logging.StreamHandler(stdout)
      logFormatter = logging.Formatter("%(asctime)s %(levelname)-8s %(message)s")
      console_handler.setFormatter(logFormatter)
      logger.addHandler(console_handler)
      
      ## VIASH START
      # The following code has been auto-generated by Viash.
      par = {
        'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "'${VIASH_PAR_INPUT//\'/\\\'}'"; else echo None; fi ),
        'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'${VIASH_PAR_OUTPUT//\'/\\\'}'"; else echo None; fi ),
        'min_counts': $( if [ ! -z ${VIASH_PAR_MIN_COUNTS+x} ]; then echo "int('${VIASH_PAR_MIN_COUNTS//\'/\\\'}')"; else echo None; fi ),
        'min_counts_u': $( if [ ! -z ${VIASH_PAR_MIN_COUNTS_U+x} ]; then echo "int('${VIASH_PAR_MIN_COUNTS_U//\'/\\\'}')"; else echo None; fi ),
        'min_cells': $( if [ ! -z ${VIASH_PAR_MIN_CELLS+x} ]; then echo "int('${VIASH_PAR_MIN_CELLS//\'/\\\'}')"; else echo None; fi ),
        'min_cells_u': $( if [ ! -z ${VIASH_PAR_MIN_CELLS_U+x} ]; then echo "int('${VIASH_PAR_MIN_CELLS_U//\'/\\\'}')"; else echo None; fi ),
        'min_shared_counts': $( if [ ! -z ${VIASH_PAR_MIN_SHARED_COUNTS+x} ]; then echo "int('${VIASH_PAR_MIN_SHARED_COUNTS//\'/\\\'}')"; else echo None; fi ),
        'min_shared_cells': $( if [ ! -z ${VIASH_PAR_MIN_SHARED_CELLS+x} ]; then echo "int('${VIASH_PAR_MIN_SHARED_CELLS//\'/\\\'}')"; else echo None; fi ),
        'n_top_genes': $( if [ ! -z ${VIASH_PAR_N_TOP_GENES+x} ]; then echo "int('${VIASH_PAR_N_TOP_GENES//\'/\\\'}')"; else echo None; fi ),
        'log_transform': $( if [ ! -z ${VIASH_PAR_LOG_TRANSFORM+x} ]; then echo "'${VIASH_PAR_LOG_TRANSFORM//\'/\\\'}'.lower() == 'true'"; else echo None; fi ),
        'n_principal_components': $( if [ ! -z ${VIASH_PAR_N_PRINCIPAL_COMPONENTS+x} ]; then echo "int('${VIASH_PAR_N_PRINCIPAL_COMPONENTS//\'/\\\'}')"; else echo None; fi ),
        'n_neighbors': $( if [ ! -z ${VIASH_PAR_N_NEIGHBORS+x} ]; then echo "int('${VIASH_PAR_N_NEIGHBORS//\'/\\\'}')"; else echo None; fi )
      }
      meta = {
        'functionality_name': '$VIASH_META_FUNCTIONALITY_NAME',
        'resources_dir': '$VIASH_META_RESOURCES_DIR',
        'executable': '$VIASH_META_EXECUTABLE',
        'temp_dir': '$VIASH_TEMP'
      }
      
      resources_dir = '$VIASH_META_RESOURCES_DIR'
      
      ## VIASH END
      mpl.rcParams['savefig.dpi']=150
      
      # Script must be wrapped into a main function because scvelo spawn subprocesses
      # and this fails when the functions are not wrapped.
      def main():
      
        # Create output directory
        output_dir = Path(par['output'])
        output_dir.mkdir(parents=True, exist_ok=True)
        scvelo.settings.figdir = str(output_dir)
      
      
        # Calculate the sample name
        sample_name = par["output"].removesuffix(".loom")
        sample_name = Path(sample_name).name
      
        # Read the input data
        adata = scvelo.read(par['input'])
      
        # Save spliced vs unspliced proportions to file
        with (output_dir / "proportions.txt").open('w') as target:
            with redirect_stdout(target):
                scvelo.utils.show_proportions(adata)
      
        # Plot piecharts of spliced vs unspliced proportions
        scvelo.pl.proportions(adata, save=True, show=False)
      
        # Perform preprocessing
        scvelo.pp.filter_and_normalize(adata,
                                      min_counts=par["min_counts"],
                                      min_counts_u=par["min_counts_u"],
                                      min_cells=par["min_cells"],
                                      min_cells_u=par["min_cells_u"],
                                      min_shared_counts=par["min_shared_counts"],
                                      min_shared_cells=par["min_shared_cells"],
                                      n_top_genes=par["n_top_genes"],
                                      log=par["log_transform"])
      
        # Fitting
        scvelo.pp.moments(adata,
                          n_pcs=par["n_principal_components"],
                          n_neighbors=par["n_neighbors"])
      
      
        # Second step in velocyto calculations
        # Velocity calculation and visualization
        # From the scvelo manual: 
        # The solution to the full dynamical model is obtained by setting mode='dynamical',
        # which requires to run scv.tl.recover_dynamics(adata) beforehand
        scvelo.tl.recover_dynamics(adata)
        scvelo.tl.velocity(adata, mode="dynamical")
        scvelo.tl.velocity_graph(adata)
        scvelo.pl.velocity_graph(adata, save=str(output_dir / "scvelo_graph.pdf"), show=False)
      
        # Plotting
        # TODO: add more here.
        scvelo.pl.velocity_embedding_stream(adata, save=str(output_dir / "scvelo_embedding.pdf"), show=False)
      
        # Create output
        mudata.MuData({'rna_velocity': adata}).write(output_dir / f"{sample_name}.h5mu")
      
      if __name__ == "__main__":
        main()
      
      VIASHMAIN
      python "\$tempscript" &
      wait "\$!"
      
      VIASHEOF
      

    dest: "scvelo"
    is_executable: true
  test_resources:
  - type: "python_script"
    path: "test.py"
    is_executable: true
  - type: "file"
    path: "../../../resources_test/rna_velocity/velocyto_processed/cellranger_tiny.loom"
  info: {}
  dummy_arguments: []
  set_wd_to_resources_dir: false
  enabled: true
platform:
  type: "native"
  id: "native"
platforms: []
info:
  config: "src/projection/scvelo/config.vsh.yaml"
  platform: "native"
  output: "target/native/projection/scvelo"
  executable: "target/native/projection/scvelo/scvelo"
  viash_version: "0.5.15"
  git_commit: "71584c5ca1e0e7bd43d5ddd74ca4926d735feeb9"
  git_remote: "https://github.com/openpipelines-bio/openpipeline"
