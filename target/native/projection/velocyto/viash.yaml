functionality:
  name: "velocyto"
  namespace: "projection"
  version: "main_build"
  authors: []
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--input"
    alternatives:
    - "-i"
    description: "Path to BAM file"
    example: []
    default: []
    must_exist: false
    required: true
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--transcriptome"
    alternatives:
    - "-t"
    description: "Path to GTF file"
    example: []
    default: []
    must_exist: false
    required: true
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--barcode"
    alternatives:
    - "-b"
    description: "Valid barcodes file, to filter the bam. If --bcfile is not specified\
      \ all the cell barcodes will be included.\nCell barcodes should be specified\
      \ in the bcfile as the 'CB' tag for each read\n"
    example: []
    default: []
    must_exist: false
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "boolean_true"
    name: "--without_umi"
    alternatives: []
    description: "foo"
    direction: "input"
  - type: "file"
    name: "--output"
    alternatives:
    - "-o"
    description: "Velocyto loom file"
    example: []
    default: []
    must_exist: false
    required: true
    direction: "output"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--logic"
    alternatives:
    - "-l"
    description: "The logic to use for the filtering."
    example: []
    default:
    - "Default"
    required: false
    choices:
    - "Default"
    - "Permissive10X"
    - "Intermediate10X"
    - "ValidatedIntrons10X"
    - "Stricter10X"
    - "ObservedSpanning10X"
    - "Discordant10X"
    - "SmartSeq2"
    direction: "input"
    multiple: false
    multiple_sep: ":"
  argument_groups: []
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      # velocyto main_build
      # 
      # This wrapper script is auto-generated by viash 0.5.15 and is thus a derivative
      # work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
      # Intuitive.
      # 
      # The component may contain files which fall under a different license. The
      # authors of this component should specify the license in the header of such
      # files, or include a separate license file detailing the licenses of all included
      # files.
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TEMP}
        VIASH_TEMP=${VIASH_TEMP:-/tmp}
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      VIASH_LOGCODE_EMERGENCY=0
      VIASH_LOGCODE_ALERT=1
      VIASH_LOGCODE_CRITICAL=2
      VIASH_LOGCODE_ERROR=3
      VIASH_LOGCODE_WARNING=4
      VIASH_LOGCODE_NOTICE=5
      VIASH_LOGCODE_INFO=6
      VIASH_LOGCODE_DEBUG=7
      VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '.
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '.
      function ViashEmergency {
        ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '.
      function ViashAlert {
        ViashLog $VIASH_LOGCODE_ALERT alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '.
      function ViashCritical {
        ViashLog $VIASH_LOGCODE_CRITICAL critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '.
      function ViashError {
        ViashLog $VIASH_LOGCODE_ERROR error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '.
      function ViashWarning {
        ViashLog $VIASH_LOGCODE_WARNING warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '.
      function ViashNotice {
        ViashLog $VIASH_LOGCODE_NOTICE notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '.
      function ViashInfo {
        ViashLog $VIASH_LOGCODE_INFO info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '.
      function ViashDebug {
        ViashLog $VIASH_LOGCODE_DEBUG debug $@
      }
      
      # find source folder of this component
      VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      # backwards compatibility
      VIASH_RESOURCES_DIR="$VIASH_META_RESOURCES_DIR"
      
      # define meta fields
      VIASH_META_FUNCTIONALITY_NAME="velocyto"
      VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "velocyto main_build"
        echo ""
        echo ""
        echo ""
        echo "Arguments:"
        echo "    -i, --input"
        echo "        type: file, required parameter"
        echo "        Path to BAM file"
        echo ""
        echo "    -t, --transcriptome"
        echo "        type: file, required parameter"
        echo "        Path to GTF file"
        echo ""
        echo "    -b, --barcode"
        echo "        type: file"
        echo "        Valid barcodes file, to filter the bam. If --bcfile is not specified all"
        echo "        the cell barcodes will be included."
        echo "        Cell barcodes should be specified in the bcfile as the 'CB' tag for each"
        echo "        read"
        echo ""
        echo "    --without_umi"
        echo "        type: boolean_true"
        echo "        foo"
        echo ""
        echo "    -o, --output"
        echo "        type: file, required parameter, output"
        echo "        Velocyto loom file"
        echo ""
        echo "    -l, --logic"
        echo "        type: string"
        echo "        default: Default"
        echo "        choices: [ Default, Permissive10X, Intermediate10X, ValidatedIntrons10X,"
        echo "Stricter10X, ObservedSpanning10X, Discordant10X, SmartSeq2 ]"
        echo "        The logic to use for the filtering."
      }
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      VIASH_MODE='run'
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              ---v|---verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              ---verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              ---verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "velocyto main_build"
                  exit
                  ;;
              --input)
                  VIASH_PAR_INPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --input=*)
                  VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -i)
                  VIASH_PAR_INPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to -i. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --transcriptome)
                  VIASH_PAR_TRANSCRIPTOME="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --transcriptome. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --transcriptome=*)
                  VIASH_PAR_TRANSCRIPTOME=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -t)
                  VIASH_PAR_TRANSCRIPTOME="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to -t. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --barcode)
                  VIASH_PAR_BARCODE="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --barcode. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --barcode=*)
                  VIASH_PAR_BARCODE=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -b)
                  VIASH_PAR_BARCODE="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to -b. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --without_umi)
                  VIASH_PAR_WITHOUT_UMI=true
                  shift 1
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -o)
                  VIASH_PAR_OUTPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to -o. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --logic)
                  VIASH_PAR_LOGIC="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --logic. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --logic=*)
                  VIASH_PAR_LOGIC=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -l)
                  VIASH_PAR_LOGIC="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to -l. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_INPUT" ]; then
        ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_TRANSCRIPTOME" ]; then
        ViashError '--transcriptome' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT" ]; then
        ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_WITHOUT_UMI" ]; then
        VIASH_PAR_WITHOUT_UMI="false"
      fi
      if [ -z "$VIASH_PAR_LOGIC" ]; then
        VIASH_PAR_LOGIC="Default"
      fi
      
      
      # check whether parameters values are of the right type
      
      
      
      if [[ -n "$VIASH_PAR_WITHOUT_UMI" ]]; then
        if ! [[ "$VIASH_PAR_WITHOUT_UMI" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
          ViashError '--without_umi' has to be a boolean_true. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      
      
      
      # check whether parameters values are of the right type
      
      
      
      
      
      if [ ! -z "$VIASH_PAR_LOGIC" ]; then
        VIASH_PAR_LOGIC_CHOICES=("Default:Permissive10X:Intermediate10X:ValidatedIntrons10X:Stricter10X:ObservedSpanning10X:Discordant10X:SmartSeq2")
        IFS=:
        set -f
        if ! [[ ":${VIASH_PAR_LOGIC_CHOICES[*]}:" =~ ":$VIASH_PAR_LOGIC:" ]]; then
          ViashError '--logic' specified value of \'$VIASH_PAR_LOGIC\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
          exit 1
        fi
        set +f
        unset IFS
      fi
      
      
      cat << VIASHEOF | bash
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-velocyto-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      function interrupt {
        echo -e "\nCTRL-C Pressed..."
        exit 1
      }
      trap clean_up EXIT
      trap interrupt INT SIGINT
      cat > "\$tempscript" << 'VIASHMAIN'
      
      #!/bin/bash
      
      ## VIASH START
      # The following code has been auto-generated by Viash.
      $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "par_input='${VIASH_PAR_INPUT//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_PAR_TRANSCRIPTOME+x} ]; then echo "par_transcriptome='${VIASH_PAR_TRANSCRIPTOME//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_PAR_BARCODE+x} ]; then echo "par_barcode='${VIASH_PAR_BARCODE//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_PAR_WITHOUT_UMI+x} ]; then echo "par_without_umi='${VIASH_PAR_WITHOUT_UMI//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "par_output='${VIASH_PAR_OUTPUT//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_PAR_LOGIC+x} ]; then echo "par_logic='${VIASH_PAR_LOGIC//\'/\'\"\'\"\'}'"; fi )
      meta_functionality_name='$VIASH_META_FUNCTIONALITY_NAME'
      meta_resources_dir='$VIASH_META_RESOURCES_DIR'
      meta_executable='$VIASH_META_EXECUTABLE'
      meta_temp_dir='$VIASH_TEMP'
      resources_dir="$VIASH_META_RESOURCES_DIR"
      
      ## VIASH END
      
      extra_params=( )
      
      if [ ! -z "\$par_barcode" ]; then 
        extra_params+=( "--bcfile=\$par_barcode" )
      fi
      
      if [ "\$par_without_umi" == "true" ]; then
        extra_params+=( "--without-umi" )
      fi
      
      output_dir=\`dirname "\$par_output"\`
      sample_id=\`basename "\$par_output" .loom\`
      
      echo "\$par_input"
      echo "\$par_output"
      echo "\$output_dir"
      velocyto run \\
        "\$par_input" \\
        "\$par_transcriptome" \\
        "\${extra_params[@]}" \\
        --outputfolder "\$output_dir" \\
        --sampleid "\$sample_id" \\
        --samtools-threads 4 \\
        --samtools-memory 3500
      
      VIASHMAIN
      bash "\$tempscript" &
      wait "\$!"
      
      VIASHEOF
      

    dest: "velocyto"
    is_executable: true
  description: ""
  test_resources:
  - type: "python_script"
    path: "test.py"
    is_executable: true
  - type: "file"
    path: "../../../resources_test/cellranger_tiny_fastq"
  - type: "file"
    path: "../../../resources_test/rna_velocity"
  - type: "file"
    path: "../../../resources_test/bdrhap_ref_gencodev40_chr1"
  info: {}
  dummy_arguments: []
  set_wd_to_resources_dir: false
  enabled: true
platform:
  type: "native"
  id: "native"
platforms: []
info:
  config: "src/projection/velocyto/config.vsh.yaml"
  platform: "native"
  output: "target/native/projection/velocyto"
  executable: "target/native/projection/velocyto/velocyto"
  viash_version: "0.5.15"
  git_commit: "c2e3d16e25ebac31d3b200615ec4816d17b6aac2"
  git_remote: "https://github.com/openpipelines-bio/openpipeline"
