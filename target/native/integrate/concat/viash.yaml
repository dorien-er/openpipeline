functionality:
  name: "concat"
  namespace: "integrate"
  version: "main_build"
  authors:
  - name: "Dries Schaumont"
    email: "Dschaumo@its.jnj.com"
    roles:
    - "maintainer"
    props: {}
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--input"
    alternatives:
    - "-i"
    description: "Paths to the different samples to be concatenated."
    example: []
    default:
    - "sample_paths"
    must_exist: false
    required: true
    direction: "input"
    multiple: true
    multiple_sep: ","
  - type: "file"
    name: "--output"
    alternatives:
    - "-o"
    example: []
    default:
    - "output.h5mu"
    must_exist: false
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--sample_names"
    alternatives: []
    description: "Names of the different samples that have to be concatenated."
    example: []
    default:
    - "sample_names"
    required: true
    choices: []
    direction: "input"
    multiple: true
    multiple_sep: ","
  - type: "string"
    name: "--compression"
    alternatives: []
    description: "The compression format to be used on the final h5mu object."
    example: []
    default:
    - "gzip"
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "other_axis_mode"
    alternatives: []
    description: "How to handle the merging of other axis (var, obs, ...).\n - None:\
      \ keep no data\n - same: only keep elements of the matrices which are the same\
      \ in each of the samples\n - unique: only keep elements for which there is only\
      \ 1 possible value (1 value that can occur in multiple samples)\n - first: keep\
      \ the annotation from the first sample\n - only: keep elements that show up\
      \ in only one of the objects (1 unique element in only 1 sample)\n - concat:\
      \ concatenate unique values together\n"
    example: []
    default:
    - "concat"
    required: false
    choices:
    - "same"
    - "unique"
    - "first"
    - "only"
    - "concat"
    direction: "input"
    multiple: false
    multiple_sep: ":"
  argument_groups: []
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      # concat main_build
      # 
      # This wrapper script is auto-generated by viash 0.5.14 and is thus a derivative
      # work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
      # Intuitive.
      # 
      # The component may contain files which fall under a different license. The
      # authors of this component should specify the license in the header of such
      # files, or include a separate license file detailing the licenses of all included
      # files.
      # 
      # Component authors:
      #  * Dries Schaumont <Dschaumo@its.jnj.com> (maintainer)
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TEMP}
        VIASH_TEMP=${VIASH_TEMP:-/tmp}
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      VIASH_LOGCODE_EMERGENCY=0
      VIASH_LOGCODE_ALERT=1
      VIASH_LOGCODE_CRITICAL=2
      VIASH_LOGCODE_ERROR=3
      VIASH_LOGCODE_WARNING=4
      VIASH_LOGCODE_NOTICE=5
      VIASH_LOGCODE_INFO=6
      VIASH_LOGCODE_DEBUG=7
      VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '.
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '.
      function ViashEmergency {
        ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '.
      function ViashAlert {
        ViashLog $VIASH_LOGCODE_ALERT alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '.
      function ViashCritical {
        ViashLog $VIASH_LOGCODE_CRITICAL critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '.
      function ViashError {
        ViashLog $VIASH_LOGCODE_ERROR error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '.
      function ViashWarning {
        ViashLog $VIASH_LOGCODE_WARNING warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '.
      function ViashNotice {
        ViashLog $VIASH_LOGCODE_NOTICE notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '.
      function ViashInfo {
        ViashLog $VIASH_LOGCODE_INFO info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '.
      function ViashDebug {
        ViashLog $VIASH_LOGCODE_DEBUG debug $@
      }
      
      # find source folder of this component
      VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      # backwards compatibility
      VIASH_RESOURCES_DIR="$VIASH_META_RESOURCES_DIR"
      
      # define meta fields
      VIASH_META_FUNCTIONALITY_NAME="concat"
      VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "concat main_build"
        echo ""
        echo "Concatenates several uni-modal samples in .h5mu files into a single file."
        echo ""
        echo "Options:"
        echo "    -i, --input"
        echo "        type: file, required parameter, multiple values allowed"
        echo "        default: sample_paths"
        echo "        Paths to the different samples to be concatenated."
        echo ""
        echo "    -o, --output"
        echo "        type: file, output"
        echo "        default: output.h5mu"
        echo ""
        echo "    --sample_names"
        echo "        type: string, required parameter, multiple values allowed"
        echo "        default: sample_names"
        echo "        Names of the different samples that have to be concatenated."
        echo ""
        echo "    --compression"
        echo "        type: string"
        echo "        default: gzip"
        echo "        The compression format to be used on the final h5mu object."
        echo ""
        echo "    other_axis_mode"
        echo "        type: string"
        echo "        default: concat"
        echo "        choices: [ same, unique, first, only, concat ]"
        echo "        How to handle the merging of other axis (var, obs, ...)."
        echo "         - None: keep no data"
        echo "         - same: only keep elements of the matrices which are the same in each"
        echo "of the samples"
        echo "         - unique: only keep elements for which there is only 1 possible value"
        echo "(1 value that can occur in multiple samples)"
        echo "         - first: keep the annotation from the first sample"
        echo "         - only: keep elements that show up in only one of the objects (1 unique"
        echo "element in only 1 sample)"
        echo "         - concat: concatenate unique values together"
      }
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      VIASH_MODE='run'
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              ---v|---verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              ---verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              ---verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "concat main_build"
                  exit
                  ;;
              --input)
                  if [ -z "$VIASH_PAR_INPUT" ]; then
                    VIASH_PAR_INPUT="$2"
                  else
                    VIASH_PAR_INPUT="$VIASH_PAR_INPUT,""$2"
                  fi
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --input=*)
                  if [ -z "$VIASH_PAR_INPUT" ]; then
                    VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
                  else
                    VIASH_PAR_INPUT="$VIASH_PAR_INPUT,"$(ViashRemoveFlags "$1")
                  fi
                  shift 1
                  ;;
              -i)
                  if [ -z "$VIASH_PAR_INPUT" ]; then
                    VIASH_PAR_INPUT="$2"
                  else
                    VIASH_PAR_INPUT="$VIASH_PAR_INPUT,""$2"
                  fi
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to -i. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -o)
                  VIASH_PAR_OUTPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to -o. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --sample_names)
                  if [ -z "$VIASH_PAR_SAMPLE_NAMES" ]; then
                    VIASH_PAR_SAMPLE_NAMES="$2"
                  else
                    VIASH_PAR_SAMPLE_NAMES="$VIASH_PAR_SAMPLE_NAMES,""$2"
                  fi
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --sample_names. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --sample_names=*)
                  if [ -z "$VIASH_PAR_SAMPLE_NAMES" ]; then
                    VIASH_PAR_SAMPLE_NAMES=$(ViashRemoveFlags "$1")
                  else
                    VIASH_PAR_SAMPLE_NAMES="$VIASH_PAR_SAMPLE_NAMES,"$(ViashRemoveFlags "$1")
                  fi
                  shift 1
                  ;;
              --compression)
                  VIASH_PAR_COMPRESSION="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --compression. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --compression=*)
                  VIASH_PAR_COMPRESSION=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      if [[ $# -gt 0 ]]; then
        VIASH_PAR_OTHER_AXIS_MODE="$1"
        shift 1
      fi
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_INPUT" ]; then
        ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_SAMPLE_NAMES" ]; then
        ViashError '--sample_names' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT" ]; then
        VIASH_PAR_OUTPUT="output.h5mu"
      fi
      if [ -z "$VIASH_PAR_COMPRESSION" ]; then
        VIASH_PAR_COMPRESSION="gzip"
      fi
      if [ -z "$VIASH_PAR_OTHER_AXIS_MODE" ]; then
        VIASH_PAR_OTHER_AXIS_MODE="concat"
      fi
      
      
      # check whether parameters values are of the right type
      
      
      
      
      
      
      # check whether parameters values are of the right type
      
      
      
      
      if [ ! -z "$VIASH_PAR_OTHER_AXIS_MODE" ]; then
        VIASH_PAR_OTHER_AXIS_MODE_CHOICES=("same:unique:first:only:concat")
        IFS=:
        set -f
        if ! [[ ":${VIASH_PAR_OTHER_AXIS_MODE_CHOICES[*]}:" =~ ":$VIASH_PAR_OTHER_AXIS_MODE:" ]]; then
          ViashError 'other_axis_mode' specified value of \'$VIASH_PAR_OTHER_AXIS_MODE\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
          exit 1
        fi
        set +f
        unset IFS
      fi
      
      
      cat << VIASHEOF | bash
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-concat-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      function interrupt {
        echo -e "\nCTRL-C Pressed..."
        exit 1
      }
      trap clean_up EXIT
      trap interrupt INT SIGINT
      cat > "\$tempscript" << 'VIASHMAIN'
      
      from __future__ import annotations
      import logging
      import anndata
      import muon as mu
      from sys import stdout
      import pandas as pd
      import numpy as np
      
      ### VIASH START
      # The following code has been auto-generated by Viash.
      par = {
        'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "'${VIASH_PAR_INPUT//\'/\\\'}'.split(',')"; else echo None; fi ),
        'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'${VIASH_PAR_OUTPUT//\'/\\\'}'"; else echo None; fi ),
        'sample_names': $( if [ ! -z ${VIASH_PAR_SAMPLE_NAMES+x} ]; then echo "'${VIASH_PAR_SAMPLE_NAMES//\'/\\\'}'.split(',')"; else echo None; fi ),
        'compression': $( if [ ! -z ${VIASH_PAR_COMPRESSION+x} ]; then echo "'${VIASH_PAR_COMPRESSION//\'/\\\'}'"; else echo None; fi ),
        'other_axis_mode': $( if [ ! -z ${VIASH_PAR_OTHER_AXIS_MODE+x} ]; then echo "'${VIASH_PAR_OTHER_AXIS_MODE//\'/\\\'}'"; else echo None; fi )
      }
      meta = {
        'functionality_name': '$VIASH_META_FUNCTIONALITY_NAME',
        'resources_dir': '$VIASH_META_RESOURCES_DIR',
        'executable': '$VIASH_META_EXECUTABLE',
        'temp_dir': '$VIASH_TEMP'
      }
      
      resources_dir = '$VIASH_META_RESOURCES_DIR'
      
      ### VIASH END
      
      logger = logging.getLogger()
      logger.setLevel(logging.INFO)
      console_handler = logging.StreamHandler(stdout)
      logFormatter = logging.Formatter("%(asctime)s %(levelname)-8s %(message)s")
      console_handler.setFormatter(logFormatter)
      logger.addHandler(console_handler)
      
      
      def add_sample_names(sample_ids: tuple[str], samples: list[mu.MuData]) -> None:
          """
          Add sample names to the observations for each sample.
          Additionally, set the .batch attribute to each MuData object to store
          the sample names
          """
          for (sample_id, sample) in zip(sample_ids, samples):
              if "batch" in sample.obs_keys():
                  samples.obs = sample.obs.drop("batch", axis=1)
              sample.obs["batch"] = sample_id
              sample.batch = sample_id
      
      
      def make_observation_keys_unique(samples: list[mu.MuData]) -> None:
          """
          Make the observation keys unique across all samples. At input,
          the observation keys are unique within a sample. By adding the sample name
          (unique for a sample) to each observation key, the observation key is made
          unique across all samples as well.
          """
          logger.info('Making observation keys unique across all samples.')
          for sample in samples:
              sample.obs.index = f"{sample.batch}_" + sample.obs.index
              make_observation_keys_unique_per_mod(sample)
      
      
      def make_observation_keys_unique_per_mod(sample: list[anndata.AnnData]) -> None:
          """
          Updating MuData.obs_names is not allowed (it is read-only).
          So the observation keys for each modality has to be updated manually.
          """
          for _, mod in sample.mod.items():
              mod.obs_names = f"{sample.batch}_" + mod.obs_names
      
      
      def group_modalities(samples: list[anndata.AnnData]) -> dict[str, anndata.AnnData]:
          """
          Split up the modalities of all samples and group them per modality.
          """
          mods = {}
          for sample in samples:
              for mod_name, mod in sample.mod.items():
                  mods.setdefault(mod_name, []).append(mod)
      
          if len(set(len(mod) for mod in mods.values())) != 1:
              logger.warning("One or more samples seem to have a different number of modalities.")
      
          logger.info("Successfully sorted modalities for the different samples.")
          return mods
      
      
      def concat_columns(vars_list: list[pd.DataFrame]) -> pd.DataFrame:
          """
          Combine dataframes by joining matching columns into a comma-separated list
          containing unique, non-na values.
          """
          column_names = set(column_name for var in vars_list for column_name in var)
          logger.debug('Trying to concatenate columns: %s.', ",".join(column_names))
          if not column_names:
              return pd.DataFrame()
          df = pd.concat(vars_list, axis=1)
          logger.debug('Concatenated dataframe. Aggregating column.')
          result = df.groupby(df.columns, axis=1).agg(lambda x: x.apply(lambda y: ','.join(y.dropna().unique()), axis=1))
          logger.info('Aggregation completed.')
          dtypes = {}
          for col_name in column_names:
              for var in vars_list:
                  col = var.get(col_name, None)
                  if col is not None and col_name not in dtypes:
                      dtypes[col_name] = col.dtype
          result.replace('', np.nan, inplace=True)
          result = concat_result_cast_dtype(result, orignal_dtypes=dtypes)
          logger.debug('Finished concatenating. Result is:\\n%s', result)
          return result
      
      
      def concat_result_cast_dtype(result: pd.DataFrame,
                                   orignal_dtypes: dict[str, pd.core.dtypes.dtypes.Dtype]) -> pd.DataFrame:
          logger.debug('Trying to cast to "category" or keep original datatype.')
          for col_name, orig_dtype in orignal_dtypes.items():
              try:
                  result = result.astype({col_name: "category"}, copy=True)
              except (ValueError, TypeError):
                  try:
                      result = result.astype({col_name: orig_dtype}, copy=True)
                  except (ValueError, TypeError):
                      logger.warning("Could not keep datatype for column %s", col_name)
          return result
      
      
      def concatenate_modalities(modalities: dict[str, anndata.AnnData],
                                 other_axis_mode: str) -> mu.MuData:
          """
          Join the modalities together into a single multimodal sample.
          """
          logger.info('Concatenating samples.')
          if other_axis_mode == "concat":
              other_axis_mode = concat_columns
          new_mods = {mod_name: anndata.concat(modes,
                                               join='outer',
                                               merge=other_axis_mode)
                      for mod_name, modes in modalities.items()}
          concatenated_data = mu.MuData(new_mods)
          logger.info("Concatenation succesfull.")
          return concatenated_data
      
      
      def main() -> None:
          # Read in sample names and sample .h5mu files
          sample_ids: tuple[str] = tuple(i.strip() for i in par["sample_names"])
          samples: list[mu.MuData] = [mu.read(path.strip()) for path in par["input"]]
      
          if len(sample_ids) != len(samples):
              raise ValueError("The number of sample names must match the number of sample files.")
      
          if len(set(par["sample_names"])) != len(par["sample_names"]):
              raise ValueError("The sample names should be unique.")
      
          logger.info("\\nConcatenating data for:\\n\\t%s\\nFrom paths:\\n\\t%s",
                      "\\n\\t".join(sample_ids),
                      "\\n\\t".join(par["input"]))
      
          add_sample_names(sample_ids, samples)
          make_observation_keys_unique(samples)
      
          mods = group_modalities(samples)
          concatenated_samples = concatenate_modalities(mods, par["other_axis_mode"])
          logger.info("Writing out data to '%s' with compression '%s'.",
                      par["output"], par["compression"])
          concatenated_samples.write(par["output"], compression=par["compression"])
      
      
      if __name__ == "__main__":
          main()
      
      VIASHMAIN
      python "\$tempscript" &
      wait "\$!"
      
      VIASHEOF
      

    dest: "concat"
    is_executable: true
  description: "Concatenates several uni-modal samples in .h5mu files into a single\
    \ file.\n"
  test_resources:
  - type: "python_script"
    path: "test.py"
    is_executable: true
  - type: "file"
    path: "../../../resources_test/concat/e18_mouse_brain_fresh_5k_filtered_feature_bc_matrix_subset.h5mu"
  - type: "file"
    path: "../../../resources_test/concat/human_brain_3k_filtered_feature_bc_matrix_subset.h5mu"
  info: {}
  dummy_arguments: []
  set_wd_to_resources_dir: false
  enabled: true
platform:
  type: "native"
  id: "native"
platforms: []
info:
  config: "src/integrate/concat/config.vsh.yaml"
  platform: "native"
  output: "target/native/integrate/concat"
  executable: "target/native/integrate/concat/concat"
  viash_version: "0.5.14"
  git_commit: "9954f2e0216b8a62cd97834ad4aadcc8b480c5d3"
  git_remote: "https://github.com/openpipelines-bio/openpipeline"
