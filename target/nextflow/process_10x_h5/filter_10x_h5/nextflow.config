  docker.enabled = true
  def viash_temp = System.getenv("VIASH_TEMP") ?: "/tmp/"
  docker.runOptions = "-i -v ${baseDir}:${baseDir} -v $viash_temp:$viash_temp"
  process.container = "dataintuitive/viash"
  params {
    filter_10x_h5__input = "viash_no_value"
    filter_10x_h5__output = "viash_no_value"
    filter_10x_h5__min_library_size = "0"
    filter_10x_h5__min_cells_per_gene = "0"
    filter_10x_h5__keep_feature_types = "no_default_value_configured"
    filter_10x_h5__verbose = "no_default_value_configured"
    id = ""
    testScript = "run_test.R"
    testResources = [ "run_test.R", "../../../resources_test/pbmc_1k_protein_v3/pbmc_1k_protein_v3_filtered_feature_bc_matrix.h5" ]
    filter_10x_h5 {
      name = "filter_10x_h5"
      container = "process_10x_h5_filter_10x_h5"
      containerTag = "main_build"
      containerRegistry = "ghcr.io"
      command = "filter_10x_h5"
      tests {
        isDefined = true
        testScript = "run_test.R"
        testResources = [ "run_test.R", "../../../resources_test/pbmc_1k_protein_v3/pbmc_1k_protein_v3_filtered_feature_bc_matrix.h5" ]
      }
      arguments {
        input {
          name = "input"
          otype = "--"
          required = true
          type = "string"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_10x_h5__input}"
          example = "pbmc_1k_protein_v3_raw_feature_bc_matrix.h5"
          description = "An h5 file from the 10x genomics website."
        }
        output {
          name = "output"
          otype = "--"
          required = true
          type = "file"
          direction = "Output"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_10x_h5__output}"
          example = "pbmc_1k_protein_v3_raw_feature_bc_matrix_filtered.h5"
          description = "Output h5 file."
        }
        min_library_size {
          name = "min_library_size"
          otype = "--"
          required = false
          type = "integer"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_10x_h5__min_library_size}"
          dflt = "0"
          description = "Minimum library size."
        }
        min_cells_per_gene {
          name = "min_cells_per_gene"
          otype = "--"
          required = false
          type = "integer"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_10x_h5__min_cells_per_gene}"
          dflt = "0"
          description = "Minimum number of cells per gene."
        }
        keep_feature_types {
          name = "keep_feature_types"
          otype = "--"
          required = false
          type = "string"
          direction = "Input"
          multiple = true
          multiple_sep = ":"
          value = "${params.filter_10x_h5__keep_feature_types}"
          example = "Antibody Capture"
          description = "Specify which feature types will never be filtered out"
        }
        verbose {
          name = "verbose"
          otype = "--"
          required = false
          type = "boolean_true"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_10x_h5__verbose}"
          description = "Increase verbosity"
        }
      }
    }
  }