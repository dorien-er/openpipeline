#!/usr/bin/env bash

##################################
#    filter_10x_h5 main_build    #
##################################

# This wrapper script is auto-generated by viash 0.5.10 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Robrecht Cannoodt <rcannood@gmail.com> (maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="filter_10x_h5"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "filter_10x_h5 main_build"
  echo "Filter a 10x h5 dataset."
  echo
  echo -n "Usage: "
  echo "filter_10x_h5 \\"
  echo "  --input pbmc_1k_protein_v3_raw_feature_bc_matrix.h5 \\"
  echo "  --output pbmc_1k_protein_v3_raw_feature_bc_matrix_filtered.h5 \\"
  echo "  --min_library_size 1000 --min_cells_per_gene 300"
  echo
  echo "Options:"

  echo "   --input"
  echo "        type: string, required parameter"
  echo "        example: pbmc_1k_protein_v3_raw_feature_bc_matrix.h5"
  echo "        An h5 file from the 10x genomics website."
  echo ""


  echo "   --output"
  echo "        type: file, required parameter, output"
  echo "        example: pbmc_1k_protein_v3_raw_feature_bc_matrix_filtered.h5"
  echo "        Output h5 file."
  echo ""


  echo "   --min_library_size"
  echo "        type: integer"
  echo "        default: 0"
  echo "        Minimum library size."
  echo ""


  echo "   --min_cells_per_gene"
  echo "        type: integer"
  echo "        default: 0"
  echo "        Minimum number of cells per gene."
  echo ""


  echo "   --keep_feature_types"
  echo "        type: string, multiple values allowed"
  echo "        example: Antibody Capture"
  echo "        Specify which feature types will never be filtered out"
  echo ""


  echo "   --verbose"
  echo "        type: boolean_true"
  echo "        Increase verbosity"
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "filter_10x_h5 main_build"
            exit
            ;;
        --input)
            VIASH_PAR_INPUT="$2"
            shift 2
            ;;
        --input=*)
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --min_library_size)
            VIASH_PAR_MIN_LIBRARY_SIZE="$2"
            shift 2
            ;;
        --min_library_size=*)
            VIASH_PAR_MIN_LIBRARY_SIZE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --min_cells_per_gene)
            VIASH_PAR_MIN_CELLS_PER_GENE="$2"
            shift 2
            ;;
        --min_cells_per_gene=*)
            VIASH_PAR_MIN_CELLS_PER_GENE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --keep_feature_types)
            if [ -z "$VIASH_PAR_KEEP_FEATURE_TYPES" ]; then
              VIASH_PAR_KEEP_FEATURE_TYPES="$2"
            else
              VIASH_PAR_KEEP_FEATURE_TYPES="$VIASH_PAR_KEEP_FEATURE_TYPES:""$2"
            fi
            shift 2
            ;;
        --keep_feature_types=*)
            if [ -z "$VIASH_PAR_KEEP_FEATURE_TYPES" ]; then
              VIASH_PAR_KEEP_FEATURE_TYPES=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_KEEP_FEATURE_TYPES="$VIASH_PAR_KEEP_FEATURE_TYPES:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --verbose)
            VIASH_PAR_VERBOSE=true
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS




# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT" ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_MIN_LIBRARY_SIZE" ]; then
  VIASH_PAR_MIN_LIBRARY_SIZE="0"
fi
if [ -z "$VIASH_PAR_MIN_CELLS_PER_GENE" ]; then
  VIASH_PAR_MIN_CELLS_PER_GENE="0"
fi
if [ -z "$VIASH_PAR_VERBOSE" ]; then
  VIASH_PAR_VERBOSE="false"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-filter_10x_h5-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
## VIASH START
# The following code has been auto-generated by Viash.
# get parameters from cli
par <- list(
  "input" = $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "'$VIASH_PAR_INPUT'"; else echo NULL; fi ),
  "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo NULL; fi ),
  "min_library_size" = $( if [ ! -z ${VIASH_PAR_MIN_LIBRARY_SIZE+x} ]; then echo "as.integer($VIASH_PAR_MIN_LIBRARY_SIZE)"; else echo NULL; fi ),
  "min_cells_per_gene" = $( if [ ! -z ${VIASH_PAR_MIN_CELLS_PER_GENE+x} ]; then echo "as.integer($VIASH_PAR_MIN_CELLS_PER_GENE)"; else echo NULL; fi ),
  "keep_feature_types" = $( if [ ! -z ${VIASH_PAR_KEEP_FEATURE_TYPES+x} ]; then echo "strsplit('$VIASH_PAR_KEEP_FEATURE_TYPES', split = ':')[[1]]"; else echo NULL; fi ),
  "verbose" = $( if [ ! -z ${VIASH_PAR_VERBOSE+x} ]; then echo "as.logical(toupper('$VIASH_PAR_VERBOSE'))"; else echo NULL; fi )
)

# get meta parameters
meta <- list(
  functionality_name = "$VIASH_META_FUNCTIONALITY_NAME",
  resources_dir = "$VIASH_RESOURCES_DIR"
)

# get resources dir
resources_dir = "$VIASH_RESOURCES_DIR"

## VIASH END

if (par\$verbose) cat("Loading dependencies\\n")
requireNamespace("hdf5r", quietly = TRUE)

if (par\$verbose) cat("Opening h5ad file\\n")
h5 <- hdf5r::H5File\$new(par\$input, mode = "r")

if (par\$verbose) cat("Reading data in memory\\n")
features__all_tag_keys <- h5[["matrix/features/_all_tag_keys"]][]

features <- data.frame(
  feature_type = h5[["matrix/features/feature_type"]][],
  genome = h5[["matrix/features/genome"]][],
  id = h5[["matrix/features/id"]][],
  name = h5[["matrix/features/name"]][]
)

mat <- Matrix::sparseMatrix(
  i = h5[["matrix/indices"]][],
  p = h5[["matrix/indptr"]][],
  x = h5[["matrix/data"]][],
  dims = h5[["matrix/shape"]][],
  index1 = FALSE,
  dimnames = list(
    features\$id,
    h5[["matrix/barcodes"]][]
  )
)

if (par\$verbose) cat("Filtering out cells with library size < ", par\$min_library_size, "\\n", sep = "")
library_size <- Matrix::colSums(mat)
mat2 <- mat[, library_size >= par\$min_library_size, drop = FALSE]

if (par\$verbose) cat("Filtering genes with num cells < ", par\$min_cells_per_gene, "\\n", sep = "")
num_cells <- Matrix::rowSums(mat2 > 0)
mat3 <- mat2[num_cells >= par\$min_cells_per_gene | features\$feature_type %in% par\$keep_feature_types, , drop = FALSE]
features2 <- features[match(rownames(mat3), features\$id), , drop = FALSE]

# helper fun
set_with_type <- function(path, value) {
  orig_dtype <- h5[[path]]\$get_type()
  orig_chunk <- h5[[path]]\$chunk_dims
  if (is.na(orig_chunk)) orig_chunk <- "auto"
  h5new\$create_dataset(path, value, dtype = orig_dtype, chunk_dims = orig_chunk)
}

# create new file
if (par\$verbose) cat("Saving h5 file at '", par\$output, "'\\n", sep = "")
h5new <- hdf5r::H5File\$new(par\$output, mode = "w")
zz <- h5new\$create_group("matrix")
zz <- h5new\$create_group("matrix/features")

set_with_type("matrix/features/feature_type", features2\$feature_type)
set_with_type("matrix/features/genome", features2\$genome)
set_with_type("matrix/features/id", features2\$id)
set_with_type("matrix/features/name", features2\$name)
set_with_type("matrix/features/_all_tag_keys", features__all_tag_keys)
set_with_type("matrix/indices", mat3@i)
set_with_type("matrix/indptr", mat3@p)
set_with_type("matrix/data", as.integer(mat3@x))
set_with_type("matrix/shape", dim(mat3))
set_with_type("matrix/barcodes", colnames(mat3))

for (attname in hdf5r::h5attr_names(h5)) {
  h5new\$create_attr(attname, hdf5r::h5attr(h5, attname))
}
h5new\$close_all()
h5\$close_all()
VIASHMAIN
Rscript "\$tempscript" &
wait "\$!"

VIASHEOF
