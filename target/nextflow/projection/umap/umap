#!/usr/bin/env bash

#########################
#    umap main_build    #
#########################

# This wrapper script is auto-generated by viash 0.5.0 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Dries De Maeyer <ddemaeyer@gmail.com> (maintainer) {account: ddemaey1}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "umap main_build"
  echo "UMAP(Uniform Manifold Approximation and Projection) is a novel manifold learning technique for dimension reduction. UMAP is constructed from a theoretical framework based in Riemannian geometry and algebraic topology. The result is a practical scalable algorithm that applies to real world data. The UMAP algorithm is competitive with t-SNE for visualization quality, and arguably preserves more of the global structure with superior run time performance. Furthermore, UMAP has no computational restrictions on embedding dimension, making it viable as a general purpose dimension reduction technique for machine learning. "
  echo ""
  echo "For more information about the method see https://arxiv.org/abs/1802.03426"
  echo
  echo "Options:"

  echo "   --input"
  echo "        type: file, required parameter"
  echo "        Input h5ad file"
  echo ""


  echo "   -o, --output"
  echo "        type: file, required parameter, output"
  echo "        Output h5ad file."
  echo ""


  echo "   --min_dist"
  echo "        type: double"
  echo "        default: 0.5"
  echo "        The effective minimum distance between embedded points. Smaller values will result in a more clustered/clumped embedding where nearby points on the manifold are drawn closer together, while larger values will result on a more even dispersal of points. The value should be set relative to the spread value, which determines the scale at which embedded points will be spread out. The default of in the umap-learn package is 0.1."
  echo ""


  echo "   --alpha"
  echo "        type: double"
  echo "        default: 1.0"
  echo "        The initial learning rate for the embedding optimization."
  echo ""


  echo "   --gamma"
  echo "        type: double"
  echo "        default: 1.0"
  echo "        Weighting applied to negative samples in low dimensional embedding optimization. Values higher than one will result in greater weight being given to negative samples."
  echo ""


  echo "   --random_seed"
  echo "        type: integer"
  echo "        default: 0"
  echo "        Random seed for Leiden algrithm."
  echo ""


  echo "   --negative_sample_rate"
  echo "        type: integer"
  echo "        default: 5"
  echo "        The number of negative edge/1-simplex samples to use per positive edge/1-simplex sample in optimizing the low dimensional embedding."
  echo ""


  echo "   --init_pos"
  echo "        type: string"
  echo "        default: spectral"
  echo "        How to initialize the low dimensional embedding. Called init in the original UMAP. Options are paga, spectral and random."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "umap main_build"
            exit
            ;;
        --input)
            VIASH_PAR_INPUT="$2"
            shift 2
            ;;
        --input=*)
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --min_dist)
            VIASH_PAR_MIN_DIST="$2"
            shift 2
            ;;
        --min_dist=*)
            VIASH_PAR_MIN_DIST=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --alpha)
            VIASH_PAR_ALPHA="$2"
            shift 2
            ;;
        --alpha=*)
            VIASH_PAR_ALPHA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --gamma)
            VIASH_PAR_GAMMA="$2"
            shift 2
            ;;
        --gamma=*)
            VIASH_PAR_GAMMA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --random_seed)
            VIASH_PAR_RANDOM_SEED="$2"
            shift 2
            ;;
        --random_seed=*)
            VIASH_PAR_RANDOM_SEED=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --negative_sample_rate)
            VIASH_PAR_NEGATIVE_SAMPLE_RATE="$2"
            shift 2
            ;;
        --negative_sample_rate=*)
            VIASH_PAR_NEGATIVE_SAMPLE_RATE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --init_pos)
            VIASH_PAR_INIT_POS="$2"
            shift 2
            ;;
        --init_pos=*)
            VIASH_PAR_INIT_POS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT" ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_MIN_DIST" ]; then
  VIASH_PAR_MIN_DIST="0.5"
fi
if [ -z "$VIASH_PAR_ALPHA" ]; then
  VIASH_PAR_ALPHA="1.0"
fi
if [ -z "$VIASH_PAR_GAMMA" ]; then
  VIASH_PAR_GAMMA="1.0"
fi
if [ -z "$VIASH_PAR_RANDOM_SEED" ]; then
  VIASH_PAR_RANDOM_SEED="0"
fi
if [ -z "$VIASH_PAR_NEGATIVE_SAMPLE_RATE" ]; then
  VIASH_PAR_NEGATIVE_SAMPLE_RATE="5"
fi
if [ -z "$VIASH_PAR_INIT_POS" ]; then
  VIASH_PAR_INIT_POS="spectral"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-umap-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
# The following code has been auto-generated by Viash.
par = {
  'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "'$VIASH_PAR_INPUT'"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo None; fi ),
  'min_dist': $( if [ ! -z ${VIASH_PAR_MIN_DIST+x} ]; then echo "float('$VIASH_PAR_MIN_DIST')"; else echo None; fi ),
  'alpha': $( if [ ! -z ${VIASH_PAR_ALPHA+x} ]; then echo "float('$VIASH_PAR_ALPHA')"; else echo None; fi ),
  'gamma': $( if [ ! -z ${VIASH_PAR_GAMMA+x} ]; then echo "float('$VIASH_PAR_GAMMA')"; else echo None; fi ),
  'random_seed': $( if [ ! -z ${VIASH_PAR_RANDOM_SEED+x} ]; then echo "int('$VIASH_PAR_RANDOM_SEED')"; else echo None; fi ),
  'negative_sample_rate': $( if [ ! -z ${VIASH_PAR_NEGATIVE_SAMPLE_RATE+x} ]; then echo "int('$VIASH_PAR_NEGATIVE_SAMPLE_RATE')"; else echo None; fi ),
  'init_pos': $( if [ ! -z ${VIASH_PAR_INIT_POS+x} ]; then echo "'$VIASH_PAR_INIT_POS'"; else echo None; fi )
}

resources_dir = '$VIASH_RESOURCES_DIR'

### VIASH START
### VIASH END

import scanpy as sc

data = sc.read_h5ad(par["input"])

sc.tl.umap(data, 
          min_dist = par["min_dist"],
          alpha = par["alpha"],
          gamma = par["gamma"],
          random_state = par["random_seed"],
          negative_sample_rate = par["negative_sample_rate"],
          init_pos = par["init_pos"])

data.write_h5ad(par["output"], compression = "gzip")
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

python "\$tempscript"

VIASHEOF
