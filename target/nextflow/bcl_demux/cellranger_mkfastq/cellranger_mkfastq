#!/usr/bin/env bash

##################################
#    cellranger_mkfastq 0.2.0    #
##################################

# This wrapper script is auto-generated by viash 0.5.1 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Toni Verbeiren <tverbeir@its.jnj.com> (maintainer) {account: tverbeir}
# * Robrecht Cannoodt <rcannood@gmail.com> (contributor) {github: rcannood, orcid: 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "cellranger_mkfastq 0.2.0"
  echo "Run Illumina demultiplexer on sample sheets that contain 10x-specific sample index sets, and generate 10x-specific quality metrics after the demultiplex. Any bcl2fastq argument will work (except a few that are set by the pipeline to ensure proper trimming and sample indexing). The FASTQ output generated will be the same as when running bcl2fastq directly."
  echo
  echo "Options:"

  echo "   -i, --input"
  echo "        type: file"
  echo "        Path of Illumina BCL run tar.gz or folder."
  echo ""


  echo "   --samplesheet"
  echo "        type: file"
  echo "        Path to the sample sheet. The sample sheet can either be a simple CSV with lane, sample and index columns, or an Illumina Experiment Manager-compatible sample sheet. Sample sheet indexes can refer to 10x sample index set names (e.g., SI-GA-A12)."
  echo ""


  echo "   -o, --output"
  echo "        type: file, required parameter, output"
  echo "        The output folder generated by cellranger mkfastq"
  echo ""


  echo "   --barcode_mismatches"
  echo "        type: integer"
  echo "        default: 1"
  echo "        Number of allowed mismatches per index. Multiple, comma delimited, entries allowed. Each entry is applied to the corresponding index; last entry applies to all remaining indices. Accepted values: 0, 1, 2."
  echo ""


  echo "   --memory"
  echo "        type: integer"
  echo "        default: 128"
  echo "        Set max GB the pipeline may request at one time. Only applies to local jobs. Default=128. Set to '0' to use the default cellranger behaviour."
  echo ""


  echo "   --cores"
  echo "        type: integer"
  echo "        default: 32"
  echo "        Set max cores the pipeline may request at one time. Only applies to local jobs. Default=32. Set to '0' to use the default cellranger behaviour."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "cellranger_mkfastq 0.2.0"
            exit
            ;;
        --input)
            VIASH_PAR_INPUT="$2"
            shift 2
            ;;
        --input=*)
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -i)
            VIASH_PAR_INPUT="$2"
            shift 2
            ;;
        --samplesheet)
            VIASH_PAR_SAMPLESHEET="$2"
            shift 2
            ;;
        --samplesheet=*)
            VIASH_PAR_SAMPLESHEET=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --barcode_mismatches)
            VIASH_PAR_BARCODE_MISMATCHES="$2"
            shift 2
            ;;
        --barcode_mismatches=*)
            VIASH_PAR_BARCODE_MISMATCHES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --memory)
            VIASH_PAR_MEMORY="$2"
            shift 2
            ;;
        --memory=*)
            VIASH_PAR_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --cores)
            VIASH_PAR_CORES="$2"
            shift 2
            ;;
        --cores=*)
            VIASH_PAR_CORES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_BARCODE_MISMATCHES" ]; then
  VIASH_PAR_BARCODE_MISMATCHES="1"
fi
if [ -z "$VIASH_PAR_MEMORY" ]; then
  VIASH_PAR_MEMORY="128"
fi
if [ -z "$VIASH_PAR_CORES" ]; then
  VIASH_PAR_CORES="32"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-cellranger_mkfastq-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
# The following code has been auto-generated by Viash.
par_input='$VIASH_PAR_INPUT'
par_samplesheet='$VIASH_PAR_SAMPLESHEET'
par_output='$VIASH_PAR_OUTPUT'
par_barcode_mismatches='$VIASH_PAR_BARCODE_MISMATCHES'
par_memory='$VIASH_PAR_MEMORY'
par_cores='$VIASH_PAR_CORES'

resources_dir="$VIASH_RESOURCES_DIR"

#!/bin/bash

if [ \$par_memory == "auto" ]; then
  par_memory=0
fi
if [ \$par_cores == "auto" ]; then
  par_cores=0
fi

# making all IO absolute
par_input=\$(realpath --no-symlinks "\$par_input")
par_samplesheet=\$(realpath --no-symlinks "\$par_samplesheet")
par_output=\$(realpath --no-symlinks "\$par_output")

# if par_input is a folder, untar first
if [ ! -d "\$par_input" ]; then
  tmpdir=\$(mktemp -d)
  function clean_up {
    rm -rf "\$tmpdir"
  }
  trap clean_up EXIT
  
  echo "Assuming input is a tar.gz, untarring"
  tar xzf "\$par_input" -C "\$tmpdir" --strip-components=1
  input_dir="\$tmpdir"
else
  input_dir="\$par_input"
fi

echo "Running cellranger"
tmpwddir=\$(mktemp -d)
function clean_up {
  rm -rf "\$tmpwddir"
}
trap clean_up EXIT

cd "\$tmpwddir"
cellranger mkfastq \\
  --run "\$input_dir" \\
  --id myoutput \\
  --csv "\$par_samplesheet" \\
  --disable-ui \\
  --localmem=\$par_memory \\
  --barcode-mismatches=\$par_barcode_mismatches

echo "Moving output to output directory"
mv "myoutput/outs/fastq_path" "\$par_output"

# todo: could interpret Stats/Stats.json to see which output dirs were created
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

bash "\$tempscript"

VIASHEOF
