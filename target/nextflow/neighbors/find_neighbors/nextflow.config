  docker.enabled = true
  def viash_temp = System.getenv("VIASH_TEMP") ?: "/tmp/"
  docker.runOptions = "-i -v ${baseDir}:${baseDir} -v $viash_temp:$viash_temp"
  process.container = "dataintuitive/viash"
  params {
    find_neighbors__input = "viash_no_value"
    find_neighbors__output = "no_default_value_configured"
    find_neighbors__metric = "cosine"
    find_neighbors__nNeighbors = "15"
    id = ""
    testScript = "run_test.py"
    testResources = [ "run_test.py", "../../../resources_test/pbmc_1k_protein_v3" ]
    find_neighbors {
      name = "find_neighbors"
      container = "neighbors_find_neighbors"
      containerTag = "main_build"
      containerRegistry = "ghcr.io"
      containerOrganization = "openpipeline"
      command = "find_neighbors"
      tests {
        isDefined = true
        testScript = "run_test.py"
        testResources = [ "run_test.py", "../../../resources_test/pbmc_1k_protein_v3" ]
      }
      arguments {
        input {
          name = "input"
          otype = "--"
          required = true
          type = "file"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.find_neighbors__input}"
          example = "input.h5mu"
          description = "Input h5mu file"
        }
        output {
          name = "output"
          otype = "--"
          required = false
          type = "file"
          direction = "Output"
          multiple = false
          multiple_sep = ":"
          value = "${params.find_neighbors__output}"
          example = "output.h5mu"
          description = "Output h5mu file containing the found neighbors."
        }
        metric {
          name = "metric"
          otype = "--"
          required = false
          type = "string"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.find_neighbors__metric}"
          dflt = "cosine"
          description = "The distance metric to be used in the generation of the nearest neighborhood network."
        }
        nNeighbors {
          name = "nNeighbors"
          otype = "--"
          required = false
          type = "integer"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.find_neighbors__nNeighbors}"
          dflt = "15"
          description = "The number of neighors to be present in the nn-network."
        }
      }
    }
  }