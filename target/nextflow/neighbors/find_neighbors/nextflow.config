  docker.enabled = true
  def viash_temp = System.getenv("VIASH_TEMP") ?: "/tmp/"
  docker.runOptions = "-i -v ${baseDir}:${baseDir} -v $viash_temp:$viash_temp"
  process.container = "dataintuitive/viash"
  params {
    find_neighbors__input = "viash_no_value"
    find_neighbors__modality = "rna"
    find_neighbors__output = "no_default_value_configured"
    find_neighbors__obsp_name_prefix = "no_default_value_configured"
    find_neighbors__metric = "euclidean"
    find_neighbors__num_neighbors = "15"
    id = ""
    testScript = "run_test.py"
    testResources = [ "run_test.py", "../../../resources_test/pbmc_1k_protein_v3" ]
    find_neighbors {
      name = "find_neighbors"
      container = "neighbors_find_neighbors"
      containerTag = "0.3.0rc2"
      containerRegistry = "ghcr.io"
      containerOrganization = "openpipelines-bio"
      command = "find_neighbors"
      tests {
        isDefined = true
        testScript = "run_test.py"
        testResources = [ "run_test.py", "../../../resources_test/pbmc_1k_protein_v3" ]
      }
      arguments {
        input {
          name = "input"
          otype = "--"
          required = true
          type = "file"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.find_neighbors__input}"
          example = "input.h5mu"
          description = "Input h5mu file"
        }
        modality {
          name = "modality"
          otype = "--"
          required = false
          type = "string"
          direction = "Input"
          multiple = true
          multiple_sep = ":"
          value = "${params.find_neighbors__modality}"
          dflt = "rna"
        }
        output {
          name = "output"
          otype = "--"
          required = false
          type = "file"
          direction = "Output"
          multiple = false
          multiple_sep = ":"
          value = "${params.find_neighbors__output}"
          example = "output.h5mu"
          description = "Output h5mu file containing the found neighbors."
        }
        obsp_name_prefix {
          name = "obsp_name_prefix"
          otype = "--"
          required = false
          type = "string"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.find_neighbors__obsp_name_prefix}"
          example = "foo"
          description = "An optional prefix for the obsp slot. If not specified, the neighbors data is stored in .uns['neighbors'], distances and connectivities are stored in .obsp['distances'] and .obsp['connectivities'] respectively. If specified, the neighbors data is added to .uns[key_added], distances are stored in .obsp[key_added+'_distances'] and connectivities in .obsp[key_added+'_connectivities']."
        }
        metric {
          name = "metric"
          otype = "--"
          required = false
          type = "string"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.find_neighbors__metric}"
          dflt = "euclidean"
          description = "The distance metric to be used in the generation of the nearest neighborhood network."
        }
        num_neighbors {
          name = "num_neighbors"
          otype = "--"
          required = false
          type = "integer"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.find_neighbors__num_neighbors}"
          dflt = "15"
          description = "The size of local neighborhood (in terms of number of neighboring data points) used for manifold approximation. Larger values result in more global views of the manifold, while smaller values result in more local data being preserved. In general values should be in the range 2 to 100. If knn is True, number of nearest neighbors to be searched. If knn is False, a Gaussian kernel width is set to the distance of the n_neighbors neighbor."
        }
      }
    }
  }