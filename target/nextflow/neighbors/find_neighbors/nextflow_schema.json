{
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "find_neighbors",
    "description": "Compute a neighborhood graph of observations [McInnes18].\n\nThe neighbor search efficiency of this heavily relies on UMAP [McInnes18], which also provides a method for estimating connectivities of data points - the connectivity of the manifold (method==\u0027umap\u0027). If method==\u0027gauss\u0027, connectivities are computed according to [Coifman05], in the adaption of [Haghverdi16].\n",
    "type": "object",
    "definitions": {
      "arguments" : {
        "title": "Arguments",
        "type": "object",
        "description": "No description",
        "default": "",
        "properties": {
          "input": {
            "type":"string",
            "description": "Input h5mu file",
            
            
            "default": ""
          },
          "modality": {
            "type":"string",
            "description": "No description",
            
            
            "default": "rna"
          },
          "obsm_input": {
            "type":"string",
            "description": "Which .obsm slot to use as a starting PCA embedding.",
            
            
            "default": "X_pca"
          },
          "output": {
            "type":"string",
            "description": "Output h5mu file containing the found neighbors.",
            
            
            "default": "$id.$key.output.h5mu"
          },
          "uns_output": {
            "type":"string",
            "description": "Mandatory .uns slot to store various neighbor output objects.",
            
            
            "default": "neighbors"
          },
          "obsp_distances": {
            "type":"string",
            "description": "In which .obsp slot to store the distance matrix between the resulting neighbors.",
            
            
            "default": "distances"
          },
          "obsp_connectivities": {
            "type":"string",
            "description": "In which .obsp slot to store the connectivities matrix between the resulting neighbors.",
            
            
            "default": "connectivities"
          },
          "metric": {
            "type":"string",
            "description": "The distance metric to be used in the generation of the nearest neighborhood network.",
            
            "enum": ["cityblock", "cosine", "euclidean", "l1", "l2", "manhattan", "braycurtis", "canberra", "chebyshev", "correlation", "dice", "hamming", "jaccard", "kulsinski", "mahalanobis", "minkowski", "rogerstanimoto", "russellrao", "seuclidean", "sokalmichener", "sokalsneath", "sqeuclidean", "yule"],
            "default": "euclidean"
          },
          "num_neighbors": {
            "type":"integer",
            "description": "The size of local neighborhood (in terms of number of neighboring data points) used for manifold approximation. Larger values result in more global views of the manifold, while smaller values result in more local data being preserved. In general values should be in the range 2 to 100. If knn is True, number of nearest neighbors to be searched. If knn is False, a Gaussian kernel width is set to the distance of the n_neighbors neighbor.",
            
            
            "default": "15"
          },
          "seed": {
            "type":"integer",
            "description": "A random seed.",
            
            
            "default": "0"
          }
        }
      },
      "nextflow input-output arguments" : {
        "title": "Nextflow input-output arguments",
        "type": "object",
        "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
        "default": "",
        "properties": {
          "publish_dir": {
            "type":"string",
            "description": "Path to an output directory.",
            
            
            "default": ""
          },
          "param_list": {
            "type":"string",
            "description": "Allows inputting multiple parameter sets to initialise a Nextflow channel. Possible formats are csv, json, yaml, or simply a yaml_blob.\nA csv should have column names which correspond to the different arguments of this pipeline.\nA json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline.\nA yaml blob can also be passed directly as a parameter.\nInside the Nextflow pipeline code, params.params_list can also be used to directly a list of parameter sets.\nWhen passing a csv, json or yaml, relative path names are relativized to the location of the parameter file.",
            "hidden": true,
            
            "default": ""
          },
          "param_list_format": {
            "type":"string",
            "description": "Manually specify the param_list_format. Must be one of \u0027csv\u0027, \u0027json\u0027, \u0027yaml\u0027, \u0027yaml_blob\u0027, \u0027asis\u0027 or \u0027none\u0027.",
            "hidden": true,
            "enum": ["csv", "json", "yaml", "yaml_blob", "asis", "none"],
            "default": ""
          }
        }
      }
    },
    "allOf": [
      {
        "$ref": "#/definitions/arguments"
      },
      {
        "$ref": "#/definitions/nextflow input-output arguments"
      }
      
    ]
}
