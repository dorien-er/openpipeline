#!/usr/bin/env bash

##################################
#    bd_rhapsody_wta 0.3.0rc2    #
##################################

# This wrapper script is auto-generated by viash 0.5.10.1 and is thus a
# derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
# Data Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Robrecht Cannoodt <rcannood@gmail.com> (maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="bd_rhapsody_wta"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "bd_rhapsody_wta 0.3.0rc2"
  echo "A viash component for the BD Rhapsody Analysis CWL pipeline."
  echo ""
  echo "The CWL pipeline file is obtained by cloning 'https://bitbucket.org/CRSwDev/cwl/src/master/' and removing all objects with class 'DockerRequirement' from the JSON."
  echo ""
  echo "The reference_genome and transcriptome_annotation files can be downloaded from these locations:"
  echo "  - Human: http://bd-rhapsody-public.s3-website-us-east-1.amazonaws.com/Rhapsody-WTA/GRCh38-PhiX-gencodev29/"
  echo "  - Mouse: http://bd-rhapsody-public.s3-website-us-east-1.amazonaws.com/Rhapsody-WTA/GRCm38-PhiX-gencodevM19/"
  echo
  echo "Options:"

  echo "   -i, --input"
  echo "        type: file, required parameter, multiple values allowed"
  echo "        example: input.fastq.gz"
  echo "        Path to your read files in the FASTQ.GZ format. You may specify as many R1/R2 read pairs as you want."
  echo ""


  echo "   -o, --output"
  echo "        type: file, required parameter, output"
  echo "        example: output_dir"
  echo "        Output folder. Output still needs to be processed further."
  echo ""


  echo "   --subsample"
  echo "        type: double"
  echo "        A number >1 or fraction (0 < n < 1) to indicate the number or percentage of reads to subsample."
  echo ""


  echo "   -r, --reference_genome"
  echo "        type: file, required parameter"
  echo "        Path to STAR index as a tar.gz file."
  echo ""


  echo "   -t, --transcriptome_annotation"
  echo "        type: file, required parameter"
  echo "        Path to GTF annotation file."
  echo ""


  echo "   --exact_cell_count"
  echo "        type: integer"
  echo "        Exact cell count - Set a specific number (>=1) of cells as putative, based on those with the highest error-corrected read count"
  echo ""


  echo "   --disable_putative_calling"
  echo "        type: boolean"
  echo "        Disable Refined Putative Cell Calling - Determine putative cells using only the basic algorithm (minimum second derivative along the cumulative reads curve). The refined algorithm attempts to remove false positives and recover false negatives, but may not be ideal for certain complex mixtures of cell types. Does not apply if Exact Cell Count is set."
  echo ""


  echo "   --parallel"
  echo "        type: boolean_true"
  echo "        [experimental] Run jobs in parallel."
  echo ""


  echo "   --timestamps"
  echo "        type: boolean_true"
  echo "        Add timestamps to the errors, warnings, and notifications."
  echo ""


  echo "   -a, --abseq_reference"
  echo "        type: file, multiple values allowed"
  echo "        Path to the AbSeq reference file in FASTA format. Only needed if BD AbSeq Ab-Oligos are used."
  echo ""


  echo "   -s, --supplemental_reference"
  echo "        type: file, multiple values allowed"
  echo "        Path to the supplemental reference file in FASTA format. Only needed if there are additional transgene sequences used in the experiment."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "bd_rhapsody_wta 0.3.0rc2"
            exit
            ;;
        --input)
            if [ -z "$VIASH_PAR_INPUT" ]; then
              VIASH_PAR_INPUT="$2"
            else
              VIASH_PAR_INPUT="$VIASH_PAR_INPUT:""$2"
            fi
            shift 2
            ;;
        --input=*)
            if [ -z "$VIASH_PAR_INPUT" ]; then
              VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_INPUT="$VIASH_PAR_INPUT:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        -i)
            if [ -z "$VIASH_PAR_INPUT" ]; then
              VIASH_PAR_INPUT="$2"
            else
              VIASH_PAR_INPUT="$VIASH_PAR_INPUT:""$2"
            fi
            shift 2
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --subsample)
            VIASH_PAR_SUBSAMPLE="$2"
            shift 2
            ;;
        --subsample=*)
            VIASH_PAR_SUBSAMPLE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --reference_genome)
            VIASH_PAR_REFERENCE_GENOME="$2"
            shift 2
            ;;
        --reference_genome=*)
            VIASH_PAR_REFERENCE_GENOME=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -r)
            VIASH_PAR_REFERENCE_GENOME="$2"
            shift 2
            ;;
        --transcriptome_annotation)
            VIASH_PAR_TRANSCRIPTOME_ANNOTATION="$2"
            shift 2
            ;;
        --transcriptome_annotation=*)
            VIASH_PAR_TRANSCRIPTOME_ANNOTATION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -t)
            VIASH_PAR_TRANSCRIPTOME_ANNOTATION="$2"
            shift 2
            ;;
        --exact_cell_count)
            VIASH_PAR_EXACT_CELL_COUNT="$2"
            shift 2
            ;;
        --exact_cell_count=*)
            VIASH_PAR_EXACT_CELL_COUNT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --disable_putative_calling)
            VIASH_PAR_DISABLE_PUTATIVE_CALLING="$2"
            shift 2
            ;;
        --disable_putative_calling=*)
            VIASH_PAR_DISABLE_PUTATIVE_CALLING=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --parallel)
            VIASH_PAR_PARALLEL=true
            shift 1
            ;;
        --timestamps)
            VIASH_PAR_TIMESTAMPS=true
            shift 1
            ;;
        --abseq_reference)
            if [ -z "$VIASH_PAR_ABSEQ_REFERENCE" ]; then
              VIASH_PAR_ABSEQ_REFERENCE="$2"
            else
              VIASH_PAR_ABSEQ_REFERENCE="$VIASH_PAR_ABSEQ_REFERENCE:""$2"
            fi
            shift 2
            ;;
        --abseq_reference=*)
            if [ -z "$VIASH_PAR_ABSEQ_REFERENCE" ]; then
              VIASH_PAR_ABSEQ_REFERENCE=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_ABSEQ_REFERENCE="$VIASH_PAR_ABSEQ_REFERENCE:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        -a)
            if [ -z "$VIASH_PAR_ABSEQ_REFERENCE" ]; then
              VIASH_PAR_ABSEQ_REFERENCE="$2"
            else
              VIASH_PAR_ABSEQ_REFERENCE="$VIASH_PAR_ABSEQ_REFERENCE:""$2"
            fi
            shift 2
            ;;
        --supplemental_reference)
            if [ -z "$VIASH_PAR_SUPPLEMENTAL_REFERENCE" ]; then
              VIASH_PAR_SUPPLEMENTAL_REFERENCE="$2"
            else
              VIASH_PAR_SUPPLEMENTAL_REFERENCE="$VIASH_PAR_SUPPLEMENTAL_REFERENCE:""$2"
            fi
            shift 2
            ;;
        --supplemental_reference=*)
            if [ -z "$VIASH_PAR_SUPPLEMENTAL_REFERENCE" ]; then
              VIASH_PAR_SUPPLEMENTAL_REFERENCE=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_SUPPLEMENTAL_REFERENCE="$VIASH_PAR_SUPPLEMENTAL_REFERENCE:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        -s)
            if [ -z "$VIASH_PAR_SUPPLEMENTAL_REFERENCE" ]; then
              VIASH_PAR_SUPPLEMENTAL_REFERENCE="$2"
            else
              VIASH_PAR_SUPPLEMENTAL_REFERENCE="$VIASH_PAR_SUPPLEMENTAL_REFERENCE:""$2"
            fi
            shift 2
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS




# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT" ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_REFERENCE_GENOME" ]; then
  ViashError '--reference_genome' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_TRANSCRIPTOME_ANNOTATION" ]; then
  ViashError '--transcriptome_annotation' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_PARALLEL" ]; then
  VIASH_PAR_PARALLEL="false"
fi
if [ -z "$VIASH_PAR_TIMESTAMPS" ]; then
  VIASH_PAR_TIMESTAMPS="false"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-bd_rhapsody_wta-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
## VIASH START
# The following code has been auto-generated by Viash.
$( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "par_input='$VIASH_PAR_INPUT'"; fi )
$( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "par_output='$VIASH_PAR_OUTPUT'"; fi )
$( if [ ! -z ${VIASH_PAR_SUBSAMPLE+x} ]; then echo "par_subsample='$VIASH_PAR_SUBSAMPLE'"; fi )
$( if [ ! -z ${VIASH_PAR_REFERENCE_GENOME+x} ]; then echo "par_reference_genome='$VIASH_PAR_REFERENCE_GENOME'"; fi )
$( if [ ! -z ${VIASH_PAR_TRANSCRIPTOME_ANNOTATION+x} ]; then echo "par_transcriptome_annotation='$VIASH_PAR_TRANSCRIPTOME_ANNOTATION'"; fi )
$( if [ ! -z ${VIASH_PAR_EXACT_CELL_COUNT+x} ]; then echo "par_exact_cell_count='$VIASH_PAR_EXACT_CELL_COUNT'"; fi )
$( if [ ! -z ${VIASH_PAR_DISABLE_PUTATIVE_CALLING+x} ]; then echo "par_disable_putative_calling='$VIASH_PAR_DISABLE_PUTATIVE_CALLING'"; fi )
$( if [ ! -z ${VIASH_PAR_PARALLEL+x} ]; then echo "par_parallel='$VIASH_PAR_PARALLEL'"; fi )
$( if [ ! -z ${VIASH_PAR_TIMESTAMPS+x} ]; then echo "par_timestamps='$VIASH_PAR_TIMESTAMPS'"; fi )
$( if [ ! -z ${VIASH_PAR_ABSEQ_REFERENCE+x} ]; then echo "par_abseq_reference='$VIASH_PAR_ABSEQ_REFERENCE'"; fi )
$( if [ ! -z ${VIASH_PAR_SUPPLEMENTAL_REFERENCE+x} ]; then echo "par_supplemental_reference='$VIASH_PAR_SUPPLEMENTAL_REFERENCE'"; fi )
meta_functionality_name='$VIASH_META_FUNCTIONALITY_NAME'
meta_resources_dir='$VIASH_RESOURCES_DIR'
resources_dir="$VIASH_RESOURCES_DIR"

## VIASH END
#!/bin/bash

mkdir -p \$par_output

cat > \$par_output/config.yml << HERE
#!/usr/bin/env cwl-runner

cwl:tool: rhapsody

# This is a YML file used to specify the inputs for a BD Genomics WTA Rhapsody Analysis pipeline run. See the
# BD Genomics Analysis Setup User Guide (Doc ID: 47383) for more details.

## Reference_Genome (required) - Path to STAR index for tar.gz format. See Doc ID: 47383 for instructions to obtain pre-built STAR index file.
Reference_Genome:
   class: File
   location: "\$(realpath --no-symlinks \$par_reference_genome)"

## Transcriptome_Annotation (required) - Path to GTF annotation file
Transcriptome_Annotation:
   class: File
   location: "\$(realpath --no-symlinks \$par_transcriptome_annotation)"

## Reads (required) - Path to your read files in the FASTQ.GZ format. You may specify as many R1/R2 read pairs as you want.
Reads:
HERE

# process fastq files
IFS=:
set -f
for val in \$par_input; do
  unset IFS
  cat >> \$par_output/config.yml << HERE
 - class: File
   location: "\$(realpath --no-symlinks \$val)"
HERE
done
set +f

# Add abseq reference, if specified
if [ ! -z "\$par_abseq_reference" ]; then
  cat >> \$par_output/config.yml << HERE

## AbSeq_Reference (optional) - Path to the AbSeq reference file in FASTA format.  Only needed if BD AbSeq Ab-Oligos are used.
AbSeq_Reference:
HERE

  # process abseq reference files
  IFS=:
  set -f
  for val in \$par_abseq_reference; do
    unset IFS

    cat >> \$par_output/config.yml << HERE
 - class: File
   location: "\$(realpath --no-symlinks \$val)"
HERE
  done
  set +f
fi

# Add supplemental reference, if specified
if [ ! -z "\$par_supplemental_reference" ]; then
  cat >> \$par_output/config.yml << HERE

# Supplemental_Reference (optional) - Path to the supplemental reference file in FASTA format.  Only needed if there are additional transgene sequences used in the experiment.
Supplemental_Reference:
HERE

  # process supplemental reference files
  IFS=:
  set -f
  for val in \$par_supplemental_reference; do
    unset IFS

    cat >> \$par_output/config.yml << HERE
 - class: File
   location: "\$(realpath --no-symlinks \$val)"
HERE
  done
  set +f
fi

# Add exact cell count, if specified
if [ ! -z "\$par_exact_cell_count" ]; then
  cat >> \$par_output/config.yml << HERE

## Exact cell count - Set a specific number (>=1) of cells as putative, based on those with the highest error-corrected read count
Exact_Cell_Count: \$par_exact_cell_count
HERE
fi

# Add Disable Refined Putative Cell Calling, if specified
if [ ! -z "\$par_disable_putative_calling" ]; then
  cat >> \$par_output/config.yml << HERE

## Disable Refined Putative Cell Calling - Determine putative cells using only the basic algorithm (minimum second derivative along the cumulative reads curve).
## The refined algorithm attempts to remove false positives and recover false negatives, but may not be ideal for certain complex mixtures of cell types.
## Does not apply if Exact Cell Count is set. Values can be true or false.
Basic_Algo_Only: \$par_disable_putative_calling
HERE
fi

# add subsample, if specified
if [ ! -z "\$par_subsample" ]; then
  cat >> \$par_output/config.yml << HERE

## Subsample (optional) - A number >1 or fraction (0 < n < 1) to indicate the number or percentage of reads to subsample.
Subsample: \$par_subsample
HERE
fi

if [ "\$par_parallel" == "true" ]; then
  pars="\$pars --parallel"
fi
if [ "\$par_timestamps" == "true" ]; then
  pars="\$pars --timestamps"
fi

cd \$par_output

# enable tempdir
export TMPDIR=\$(mktemp -d "$VIASH_TEMP/cwl-bd_rhapsody_wta-XXXXXX")
# remove tempdir after execution
function clean_up {
  [[ -d "\$TMPDIR" ]] && rm -r "\$TMPDIR"
}
trap clean_up EXIT

echo "> cwl-runner\$pars --no-container \\"\$resources_dir/rhapsody_wta_1.9.1_nodocker.cwl\\" config.yml"
eval cwl-runner\$pars --no-container "\$resources_dir/rhapsody_wta_1.9.1_nodocker.cwl" config.yml
VIASHMAIN
bash "\$tempscript" &
wait "\$!"

VIASHEOF
