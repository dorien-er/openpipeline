{
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "samtools_sort",
    "description": "Sort and (optionally) index alignments.\n\nReads are sorted by leftmost coordinates, or by read name when `--sort_by_read_names` is used.\n\nAn appropriate `@HD-SO` sort order header tag will be added or an existing one updated if necessary.\n\nNote that to generate an index file (by specifying `--output_bai`), the default coordinate sort must be used.\nThus the `--sort_by_read_names` and `--sort_by \u003cTAG\u003e` options are incompatible with `--output_bai`. \n",
    "type": "object",
    "definitions": {
      "arguments" : {
        "title": "Arguments",
        "type": "object",
        "description": "No description",
        "default": "",
        "properties": {"minimizer_cluster": {
            "type":"boolean",
            "description": "Sort unmapped reads (those in chromosome \"*\") by their sequence minimiser (Schleimer et al., 2003; Roberts et al., 2004), ","help_text": "Sort unmapped reads (those in chromosome \"*\") by their sequence minimiser (Schleimer et al., 2003; Roberts et al., 2004), \nalso reverse complementing as appropriate. This has the effect of collating some similar data together, improving the \ncompressibility of the unmapped sequence. The minimiser kmer size is adjusted using the -K option. Note data compressed \nin this manner may need to be name collated prior to conversion back to fastq.\n\nMapped sequences are sorted by chromosome and position. \n",
            
            "default": "False"
          },"minimizer_kmer": {
            "type":"integer",
            "description": "Sets the kmer size to be used in the -M option.",
            
            "default": ""
          },"sort_by_read_names": {
            "type":"boolean",
            "description": "Sort by read names (i.e., the QNAME field) rather than by chromosomal coordinates.",
            
            "default": "False"
          },"sort_by": {
            "type":"string",
            "description": "Sort first by this value in the alignment tag, then by position or name (if also using -n).",
            
            "default": ""
          },"no_pg": {
            "type":"boolean",
            "description": "Do not add a @PG line to the header of the output file.",
            
            "default": "False"
          }
        }
      },
      "input" : {
        "title": "Input",
        "type": "object",
        "description": "No description",
        "default": "",
        "properties": {"input": {
            "type":"string",
            "description": "Path to the SAM/BAM/CRAM files containing the mapped reads.",
            
            "default": ""
          }
        }
      },
      "output" : {
        "title": "Output",
        "type": "object",
        "description": "No description",
        "default": "",
        "properties": {"output_bam": {
            "type":"string",
            "description": "Filename to output the counts to.",
            
            "default": "$id.$key.output_bam.bam"
          },"output_bai": {
            "type":"string",
            "description": "BAI-format index for BAM file.",
            
            "default": "$id.$key.output_bai.bai"
          },"output_format": {
            "type":"string",
            "description": "The output format. By default, samtools tries to select a format based on the -o filename extension; if output is to standard output or no format can be deduced, bam is selected.",
            "enum": ["sam", "bam", "cram"],
            "default": ""
          },"compression": {
            "type":"integer",
            "description": "Compression level, from 0 (uncompressed) to 9 (best",
            
            "default": ""
          }
        }
      },
      "nextflow input-output arguments" : {
        "title": "Nextflow input-output arguments",
        "type": "object",
        "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
        "default": "",
        "properties": {"publish_dir": {
            "type":"string",
            "description": "Path to an output directory.",
            
            "default": ""
          },"param_list": {
            "type":"string",
            "description": "Allows inputting multiple parameter sets to initialise a Nextflow channel. Possible formats are csv, json, yaml, or simply a yaml_blob.","help_text": "Allows inputting multiple parameter sets to initialise a Nextflow channel. Possible formats are csv, json, yaml, or simply a yaml_blob.\nA csv should have column names which correspond to the different arguments of this pipeline.\nA json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline.\nA yaml blob can also be passed directly as a parameter.\nInside the Nextflow pipeline code, params.params_list can also be used to directly a list of parameter sets.\nWhen passing a csv, json or yaml, relative path names are relativized to the location of the parameter file.","hidden": true,
            
            "default": ""
          },"param_list_format": {
            "type":"string",
            "description": "Manually specify the param_list_format. Must be one of \u0027csv\u0027, \u0027json\u0027, \u0027yaml\u0027, \u0027yaml_blob\u0027, \u0027asis\u0027 or \u0027none\u0027.","hidden": true,
            "enum": ["csv", "json", "yaml", "yaml_blob", "asis", "none"],
            "default": ""
          }
        }
      }
    },
    "allOf": [
      {
        "$ref": "#/definitions/arguments"
      },
      {
        "$ref": "#/definitions/input"
      },
      {
        "$ref": "#/definitions/output"
      },
      {
        "$ref": "#/definitions/nextflow input-output arguments"
      }
      
    ]
}
