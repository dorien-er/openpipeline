#!/usr/bin/env bash

#####################################
#    cellranger_count main_build    #
#####################################

# This wrapper script is auto-generated by viash 0.5.8 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Robrecht Cannoodt <rcannood@gmail.com> (maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="cellranger_count"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "cellranger_count main_build"
  echo "Use Cellranger to count gene expression (targeted or whole-transcriptome) and/or "
  echo "feature barcode reads from a single sample and GEM well."
  echo
  echo "Options:"

  echo "   --input"
  echo "        type: file"
  echo "        example: fastq_dir"
  echo "        Path of folder created by mkfastq or bcl2fastq"
  echo ""


  echo "   --id"
  echo "        type: string"
  echo "        default: cr"
  echo "        Output folder for the count files."
  echo ""


  echo "   --libraries"
  echo "        type: file"
  echo "        File containing the library definitions"
  echo ""


  echo "   --feature_ref"
  echo "        type: file"
  echo "        File containing the barcode info"
  echo ""


  echo "   --transcriptome"
  echo "        type: file, required parameter"
  echo "        example: reference_dir"
  echo "        Path of folder containing 10x-compatible reference."
  echo ""


  echo "   --output"
  echo "        type: file, required parameter, output"
  echo "        example: output"
  echo "        Path to cellranger output folder"
  echo ""


  echo "   --log"
  echo "        type: string"
  echo "        default: log.txt"
  echo "        Path to the log file (stdout and stderr)"
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "cellranger_count main_build"
            exit
            ;;
        --input)
            VIASH_PAR_INPUT="$2"
            shift 2
            ;;
        --input=*)
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --id)
            VIASH_PAR_ID="$2"
            shift 2
            ;;
        --id=*)
            VIASH_PAR_ID=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --libraries)
            VIASH_PAR_LIBRARIES="$2"
            shift 2
            ;;
        --libraries=*)
            VIASH_PAR_LIBRARIES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --feature_ref)
            VIASH_PAR_FEATURE_REF="$2"
            shift 2
            ;;
        --feature_ref=*)
            VIASH_PAR_FEATURE_REF=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --transcriptome)
            VIASH_PAR_TRANSCRIPTOME="$2"
            shift 2
            ;;
        --transcriptome=*)
            VIASH_PAR_TRANSCRIPTOME=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --log)
            VIASH_PAR_LOG="$2"
            shift 2
            ;;
        --log=*)
            VIASH_PAR_LOG=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS




# check whether required parameters exist
if [ -z "$VIASH_PAR_TRANSCRIPTOME" ]; then
  ViashError '--transcriptome' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_ID" ]; then
  VIASH_PAR_ID="cr"
fi
if [ -z "$VIASH_PAR_LOG" ]; then
  VIASH_PAR_LOG="log.txt"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-cellranger_count-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'

## VIASH START
# The following code has been auto-generated by Viash.
$( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "par_input='$VIASH_PAR_INPUT'"; fi )
$( if [ ! -z ${VIASH_PAR_ID+x} ]; then echo "par_id='$VIASH_PAR_ID'"; fi )
$( if [ ! -z ${VIASH_PAR_LIBRARIES+x} ]; then echo "par_libraries='$VIASH_PAR_LIBRARIES'"; fi )
$( if [ ! -z ${VIASH_PAR_FEATURE_REF+x} ]; then echo "par_feature_ref='$VIASH_PAR_FEATURE_REF'"; fi )
$( if [ ! -z ${VIASH_PAR_TRANSCRIPTOME+x} ]; then echo "par_transcriptome='$VIASH_PAR_TRANSCRIPTOME'"; fi )
$( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "par_output='$VIASH_PAR_OUTPUT'"; fi )
$( if [ ! -z ${VIASH_PAR_LOG+x} ]; then echo "par_log='$VIASH_PAR_LOG'"; fi )
meta_functionality_name='$VIASH_META_FUNCTIONALITY_NAME'
meta_resources_dir='$VIASH_RESOURCES_DIR'
resources_dir="$VIASH_RESOURCES_DIR"

## VIASH END

if [ ! -d "\$par_output" ]; then
  mkdir -p "\$par_output"
fi

extra_params=( )

# process libraries parameter
if [ ! -z "\$par_libraries" ]; then 
  extra_params+=( "--libraries=\$par_libraries" )
fi

# process feature ref parameter
if [ ! -z "\$par_feature_ref" ]; then 
  extra_params+=( "--feature-ref=\$par_feature_ref" )
fi

cellranger count \\
  --id="\$par_id" \\
  --fastqs="\$par_input" \\
  --transcriptome="\$par_transcriptome" \\
  "\${extra_params[@]}" \\
  --disable-ui \\
  2>&1 | tee -a "\$par_log"

if [ -d "\$par_id/outs/" ]; then
  mv "\$par_id"/outs/* "\$par_output/"
fi
VIASHMAIN
bash "\$tempscript"

VIASHEOF
