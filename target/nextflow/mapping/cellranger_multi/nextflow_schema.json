{
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "cellranger_multi",
    "description": "Align fastq files using Cell Ranger multi.",
    "type": "object",
    "definitions": {
      "outputs" : {
        "title": "Outputs",
        "type": "object",
        "description": "No description",
        "default": "",
        "properties": {
          "output": {
            "type":"string",
            "description": "The folder to store the alignment results.",
            
            
            "default": "$id.$key.output.output"
          }
        }
      },
      "input files" : {
        "title": "Input files",
        "type": "object",
        "description": "No description",
        "default": "",
        "properties": {
          "input": {
            "type":"string",
            "description": "The FASTQ files to be analyzed. FASTQ files should conform to the naming conventions of bcl2fastq and mkfastq:\n`[Sample Name]_S[Sample Index]_L00[Lane Number]_[Read Type]_001.fastq.gz`\n",
            
            
            "default": ""
          },
          "gex_reference": {
            "type":"string",
            "description": "Genome refence index built by Cell Ranger mkref.",
            
            
            "default": ""
          },
          "vdj_reference": {
            "type":"string",
            "description": "VDJ refence index built by Cell Ranger mkref.",
            
            
            "default": ""
          },
          "feature_reference": {
            "type":"string",
            "description": "Path to the Feature reference CSV file, declaring Feature Barcode constructs and associated barcodes. Required only for Antibody Capture or CRISPR Guide Capture libraries. See https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/feature-bc-analysis#feature-ref for more information.",
            
            
            "default": ""
          }
        }
      },
      "library arguments" : {
        "title": "Library arguments",
        "type": "object",
        "description": "No description",
        "default": "",
        "properties": {
          "library_id": {
            "type":"string",
            "description": "The Illumina sample name to analyze. This must exactly match the \u0027Sample Name\u0027 part of the FASTQ files specified in the `--input` argument.",
            
            
            "default": ""
          },
          "library_type": {
            "type":"string",
            "description": "The underlying feature type of the library.\nPossible values: \"Gene Expression\", \"VDJ\", \"VDJ-T\", \"VDJ-B\", \"Antibody Capture\", \"CRISPR Guide Capture\", \"Multiplexing Capture\"\n",
            
            
            "default": ""
          },
          "library_subsample": {
            "type":"string",
            "description": "Optional. The rate at which reads from the provided FASTQ files are sampled. Must be strictly greater than 0 and less than or equal to 1.",
            
            
            "default": ""
          },
          "library_lanes": {
            "type":"string",
            "description": "Lanes associated with this sample. Defaults to using all lanes.",
            
            
            "default": ""
          }
        }
      },
      "gene expression arguments" : {
        "title": "Gene expression arguments",
        "type": "object",
        "description": "Arguments relevant to the analysis of gene expression data.",
        "default": "",
        "properties": {
          "gex_expect_cells": {
            "type":"integer",
            "description": "Expected number of recovered cells, used as input to cell calling algorithm.",
            
            
            "default": ""
          },
          "gex_chemistry": {
            "type":"string",
            "description": "Assay configuration.\n- auto: autodetect mode\n- threeprime: Single Cell 3\u0027\n- fiveprime: Single Cell 5\u0027\n- SC3Pv1: Single Cell 3\u0027 v1\n- SC3Pv2: Single Cell 3\u0027 v2\n- SC3Pv3: Single Cell 3\u0027 v3\n- SC3Pv3LT: Single Cell 3\u0027 v3 LT\n- SC3Pv3HT: Single Cell 3\u0027 v3 HT\n- SC5P-PE: Single Cell 5\u0027 paired-end\n- SC5P-R2: Single Cell 5\u0027 R2-only\n- SC-FB: Single Cell Antibody-only 3\u0027 v2 or 5\u0027\nSee https://kb.10xgenomics.com/hc/en-us/articles/115003764132-How-does-Cell-Ranger-auto-detect-chemistry- for more information.\n",
            
            "enum": ["auto", "threeprime", "fiveprime", "SC3Pv1", "SC3Pv2", "SC3Pv3", "SC3Pv3LT", "SC3Pv3HT", "SC5P-PE", "SC5P-R2", "SC-FB"],
            "default": "auto"
          },
          "gex_secondary_analysis": {
            "type":"boolean",
            "description": "Whether or not to run the secondary analysis e.g. clustering.",
            
            
            "default": "False"
          },
          "gex_generate_bam": {
            "type":"boolean",
            "description": "Whether to generate a BAM file.",
            
            
            "default": "True"
          },
          "gex_include_introns": {
            "type":"boolean",
            "description": "Include intronic reads in count (default=true unless --target-panel is specified in which case default=false)",
            
            
            "default": "True"
          }
        }
      },
      "cell multiplexing parameters" : {
        "title": "Cell multiplexing parameters",
        "type": "object",
        "description": "Arguments related to cell multiplexing.",
        "default": "",
        "properties": {
          "cell_multiplex_sample_id": {
            "type":"string",
            "description": "A name to identify a multiplexed sample. Must be alphanumeric with hyphens and/or underscores, and less than 64 characters. Required for Cell Multiplexing libraries.",
            
            
            "default": ""
          },
          "cell_multiplex_oligo_ids": {
            "type":"string",
            "description": "The Cell Multiplexing oligo IDs used to multiplex this sample. If multiple CMOs were used for a sample, separate IDs with a pipe (e.g., CMO301|CMO302). Required for Cell Multiplexing libraries.",
            
            
            "default": ""
          },
          "cell_multiplex_description": {
            "type":"string",
            "description": "A description for the sample.",
            
            
            "default": ""
          }
        }
      },
      "executor arguments" : {
        "title": "Executor arguments",
        "type": "object",
        "description": "No description",
        "default": "",
        "properties": {
          "dryrun": {
            "type":"boolean",
            "description": "If true, the output directory will only contain the CWL input files, but the pipeline itself will not be executed.",
            
            
            "default": "False"
          }
        }
      },
      "nextflow input-output arguments" : {
        "title": "Nextflow input-output arguments",
        "type": "object",
        "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
        "default": "",
        "properties": {
          "publish_dir": {
            "type":"string",
            "description": "Path to an output directory.",
            
            
            "default": ""
          },
          "param_list": {
            "type":"string",
            "description": "Allows inputting multiple parameter sets to initialise a Nextflow channel. Possible formats are csv, json, yaml, or simply a yaml_blob.\nA csv should have column names which correspond to the different arguments of this pipeline.\nA json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline.\nA yaml blob can also be passed directly as a parameter.\nInside the Nextflow pipeline code, params.params_list can also be used to directly a list of parameter sets.\nWhen passing a csv, json or yaml, relative path names are relativized to the location of the parameter file.",
            "hidden": true,
            
            "default": ""
          },
          "param_list_format": {
            "type":"string",
            "description": "Manually specify the param_list_format. Must be one of \u0027csv\u0027, \u0027json\u0027, \u0027yaml\u0027, \u0027yaml_blob\u0027, \u0027asis\u0027 or \u0027none\u0027.",
            "hidden": true,
            "enum": ["csv", "json", "yaml", "yaml_blob", "asis", "none"],
            "default": ""
          }
        }
      }
    },
    "allOf": [
      {
        "$ref": "#/definitions/outputs"
      },
      {
        "$ref": "#/definitions/input files"
      },
      {
        "$ref": "#/definitions/library arguments"
      },
      {
        "$ref": "#/definitions/gene expression arguments"
      },
      {
        "$ref": "#/definitions/cell multiplexing parameters"
      },
      {
        "$ref": "#/definitions/executor arguments"
      },
      {
        "$ref": "#/definitions/nextflow input-output arguments"
      }
      
    ]
}
