{
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "umap",
    "description": "UMAP (Uniform Manifold Approximation and Projection) is a manifold learning technique suitable for visualizing high-dimensional data. Besides tending to be faster than tSNE, it optimizes the embedding such that it best reflects the topology of the data, which we represent throughout Scanpy using a neighborhood graph. tSNE, by contrast, optimizes the distribution of nearest-neighbor distances in the embedding such that these best match the distribution of distances in the high-dimensional space. We use the implementation of umap-learn [McInnes18]. For a few comparisons of UMAP with tSNE, see this preprint.\n",
    "type": "object",
    "definitions": {
      "inputs" : {
        "title": "Inputs",
        "type": "object",
        "description": "No description",
        "default": "",
        "properties": {
          "input": {
            "type":"string",
            "description": "Input h5mu file",
            
            
            "default": ""
          },
          "modality": {
            "type":"string",
            "description": "No description",
            
            
            "default": "rna"
          },
          "uns_neighbors": {
            "type":"string",
            "description": "The `.uns` neighbors slot as output by the `find_neighbors` component.",
            
            
            "default": "neighbors"
          }
        }
      },
      "outputs" : {
        "title": "Outputs",
        "type": "object",
        "description": "No description",
        "default": "",
        "properties": {
          "output": {
            "type":"string",
            "description": "Output h5mu file.",
            
            
            "default": "$id.$key.output.h5mu"
          },
          "obsm_output": {
            "type":"string",
            "description": "The pre/postfix under which to store the UMAP results.",
            
            
            "default": "umap"
          }
        }
      },
      "arguments" : {
        "title": "Arguments",
        "type": "object",
        "description": "No description",
        "default": "",
        "properties": {
          "min_dist": {
            "type":"number",
            "description": "The effective minimum distance between embedded points. Smaller values will result in a more clustered/clumped embedding where nearby points on the manifold are drawn closer together, while larger values will result on a more even dispersal of points. The value should be set relative to the spread value, which determines the scale at which embedded points will be spread out.",
            
            
            "default": "0.5"
          },
          "spread": {
            "type":"number",
            "description": "The effective scale of embedded points. In combination with `min_dist` this determines how clustered/clumped the embedded points are.",
            
            
            "default": "1.0"
          },
          "num_components": {
            "type":"integer",
            "description": "The number of dimensions of the embedding.",
            
            
            "default": "2"
          },
          "max_iter": {
            "type":"integer",
            "description": "The number of iterations (epochs) of the optimization. Called `n_epochs` in the original UMAP.",
            
            
            "default": ""
          },
          "alpha": {
            "type":"number",
            "description": "The initial learning rate for the embedding optimization.",
            
            
            "default": "1.0"
          },
          "gamma": {
            "type":"number",
            "description": "Weighting applied to negative samples in low dimensional embedding optimization. Values higher than one will result in greater weight being given to negative samples.",
            
            
            "default": "1.0"
          },
          "negative_sample_rate": {
            "type":"integer",
            "description": "The number of negative edge/1-simplex samples to use per positive edge/1-simplex sample in optimizing the low dimensional embedding.",
            
            
            "default": "5"
          },
          "init_pos": {
            "type":"string",
            "description": "How to initialize the low dimensional embedding. Called `init` in the original UMAP. Options are:\n\n* Any key from `.obsm`\n* `\u0027paga\u0027`: positions from `paga()`\n* `\u0027spectral\u0027`: use a spectral embedding of the graph\n* `\u0027random\u0027`: assign initial embedding positions at random.\n",
            
            
            "default": "spectral"
          }
        }
      },
      "nextflow input-output arguments" : {
        "title": "Nextflow input-output arguments",
        "type": "object",
        "description": "Input/output parameters for Nextflow itself. Please note that both publishDir and publish_dir are supported but at least one has to be configured.",
        "default": "",
        "properties": {
          "publish_dir": {
            "type":"string",
            "description": "Path to an output directory.",
            
            
            "default": ""
          },
          "param_list": {
            "type":"string",
            "description": "Allows inputting multiple parameter sets to initialise a Nextflow channel. Possible formats are csv, json, yaml, or simply a yaml_blob.\nA csv should have column names which correspond to the different arguments of this pipeline.\nA json or a yaml file should be a list of maps, each of which has keys corresponding to the arguments of the pipeline.\nA yaml blob can also be passed directly as a parameter.\nInside the Nextflow pipeline code, params.params_list can also be used to directly a list of parameter sets.\nWhen passing a csv, json or yaml, relative path names are relativized to the location of the parameter file.",
            "hidden": true,
            
            "default": ""
          },
          "param_list_format": {
            "type":"string",
            "description": "Manually specify the param_list_format. Must be one of \u0027csv\u0027, \u0027json\u0027, \u0027yaml\u0027, \u0027yaml_blob\u0027, \u0027asis\u0027 or \u0027none\u0027.",
            "hidden": true,
            "enum": ["csv", "json", "yaml", "yaml_blob", "asis", "none"],
            "default": ""
          }
        }
      }
    },
    "allOf": [
      {
        "$ref": "#/definitions/inputs"
      },
      {
        "$ref": "#/definitions/outputs"
      },
      {
        "$ref": "#/definitions/arguments"
      },
      {
        "$ref": "#/definitions/nextflow input-output arguments"
      }
      
    ]
}
