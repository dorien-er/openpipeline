#!/usr/bin/env bash

########################
#    pca main_build    #
########################

# This wrapper script is auto-generated by viash 0.5.10.1 and is thus a
# derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
# Data Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Dries De Maeyer <ddemaeyer@gmail.com> (maintainer) {account: ddemaey1}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="pca"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "pca main_build"
  echo "Computes PCA coordinates, loadings and variance decomposition. Uses the implementation of scikit-learn [Pedregosa11]."
  echo
  echo "Options:"

  echo "   -i, --input"
  echo "        type: file, required parameter"
  echo "        example: input.h5mu"
  echo "        Input h5mu file"
  echo ""


  echo "   --modality"
  echo "        type: string, multiple values allowed"
  echo "        default: rna"
  echo ""


  echo "   -o, --output"
  echo "        type: file, required parameter, output"
  echo "        example: output.h5mu"
  echo "        Output h5mu file."
  echo ""


  echo "   --output_key"
  echo "        type: string"
  echo "        default: pca"
  echo "        The pre/postfix under which to store the PCA results. More specifically, .obsm[\"X_\"+key], .uns[key] and .varm[\"loadings_\"+key]."
  echo ""


  echo "   --num_components"
  echo "        type: integer"
  echo "        example: 25"
  echo "        Number of principal components to compute. Defaults to 50, or 1 - minimum dimension size of selected representation."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "pca main_build"
            exit
            ;;
        --input)
            VIASH_PAR_INPUT="$2"
            shift 2
            ;;
        --input=*)
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -i)
            VIASH_PAR_INPUT="$2"
            shift 2
            ;;
        --modality)
            if [ -z "$VIASH_PAR_MODALITY" ]; then
              VIASH_PAR_MODALITY="$2"
            else
              VIASH_PAR_MODALITY="$VIASH_PAR_MODALITY:""$2"
            fi
            shift 2
            ;;
        --modality=*)
            if [ -z "$VIASH_PAR_MODALITY" ]; then
              VIASH_PAR_MODALITY=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_MODALITY="$VIASH_PAR_MODALITY:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output_key)
            VIASH_PAR_OUTPUT_KEY="$2"
            shift 2
            ;;
        --output_key=*)
            VIASH_PAR_OUTPUT_KEY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --num_components)
            VIASH_PAR_NUM_COMPONENTS="$2"
            shift 2
            ;;
        --num_components=*)
            VIASH_PAR_NUM_COMPONENTS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS




# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT" ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_MODALITY" ]; then
  VIASH_PAR_MODALITY="rna"
fi
if [ -z "$VIASH_PAR_OUTPUT_KEY" ]; then
  VIASH_PAR_OUTPUT_KEY="pca"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-pca-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
import scanpy as sc
import muon as mu

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "'$VIASH_PAR_INPUT'"; else echo None; fi ),
  'modality': $( if [ ! -z ${VIASH_PAR_MODALITY+x} ]; then echo "'$VIASH_PAR_MODALITY'.split(':')"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo None; fi ),
  'output_key': $( if [ ! -z ${VIASH_PAR_OUTPUT_KEY+x} ]; then echo "'$VIASH_PAR_OUTPUT_KEY'"; else echo None; fi ),
  'num_components': $( if [ ! -z ${VIASH_PAR_NUM_COMPONENTS+x} ]; then echo "int('$VIASH_PAR_NUM_COMPONENTS')"; else echo None; fi )
}
meta = {
  'functionality_name': '$VIASH_META_FUNCTIONALITY_NAME',
  'resources_dir': '$VIASH_RESOURCES_DIR'
}

resources_dir = '$VIASH_RESOURCES_DIR'

## VIASH END
okey = par["output_key"]

print("Reading", par["input"])
mdata = mu.read_h5mu(par["input"])

for mod in par['modality']:
    print(f"Computing PCA components for modality '{mod}'")
    data = mdata.mod[mod]

    # run pca
    # sc.tl.pca(data, n_comps=par["num_components"])
    X_pca, loadings, variance, variance_ratio = sc.tl.pca(
        data.X, 
        n_comps=par["num_components"], 
        return_info=True
    )

    # store output in specific objects
    data.obsm["X_"+okey] = X_pca
    data.varm["loadings_"+okey] = loadings.T
    data.uns[okey] = { "variance": variance, "variance_ratio": variance_ratio }

print("Writing", par["output"])
mdata.write_h5mu(filename=par["output"])
VIASHMAIN
python "\$tempscript" &
wait "\$!"

VIASHEOF
