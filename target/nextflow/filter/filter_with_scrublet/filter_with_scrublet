#!/usr/bin/env bash

#######################################
#    filter_with_scrublet 0.3.0rc2    #
#######################################

# This wrapper script is auto-generated by viash 0.5.10.1 and is thus a
# derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
# Data Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Dries De Maeyer <DDeMaey1@its.jnj.com> (contributor) {account: ddemaey1}
# * Robrecht Cannoodt <rcannood@gmail.com> (maintainer, contributor) {github: rcannood, orcid: 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="filter_with_scrublet"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "filter_with_scrublet 0.3.0rc2"
  echo "Doublet detection using the Scrublet method (Wolock, Lopez and Klein, 2019)."
  echo "The method tests for potential doublets by using the expression profiles of"
  echo "cells to generate synthetic potential doubles which are tested against cells. "
  echo "The method returns a \"doublet score\" on which it calls for potential doublets."
  echo ""
  echo "For the source code please visit https://github.com/AllonKleinLab/scrublet."
  echo ""
  echo "For 10x we expect the doublet rates to be:"
  echo "  Multiplet Rate (%) - # of Cells Loaded - # of Cells Recovered"
  echo "  ~0.4% ~800 ~500"
  echo "  ~0.8% ~1,600 ~1,000"
  echo "  ~1.6% ~3,200 ~2,000"
  echo "  ~2.3% ~4,800 ~3,000"
  echo "  ~3.1% ~6,400 ~4,000"
  echo "  ~3.9% ~8,000 ~5,000"
  echo "  ~4.6% ~9,600 ~6,000"
  echo "  ~5.4% ~11,200 ~7,000"
  echo "  ~6.1% ~12,800 ~8,000"
  echo "  ~6.9% ~14,400 ~9,000"
  echo "  ~7.6% ~16,000 ~10,000"
  echo
  echo "Options:"

  echo "   --input"
  echo "        type: file, required parameter"
  echo "        example: input.h5mu"
  echo "        Input h5mu file"
  echo ""


  echo "   --modality"
  echo "        type: string, multiple values allowed"
  echo "        default: rna"
  echo ""


  echo "   --output"
  echo "        type: file, output"
  echo "        example: output.h5mu"
  echo "        Output h5mu file."
  echo ""


  echo "   --obs_name_filter"
  echo "        type: string"
  echo "        default: filter_with_scrublet"
  echo "        In which .obs slot to store a boolean array corresponding to which observations should be filtered out."
  echo ""


  echo "   --do_subset"
  echo "        type: boolean_true"
  echo "        Whether to subset before storing the output."
  echo ""


  echo "   --obs_name_doublet_score"
  echo "        type: string"
  echo "        default: scrublet_doublet_score"
  echo "        Name of the doublet scores column in the obs slot of the returned object."
  echo ""


  echo "   --min_counts"
  echo "        type: integer"
  echo "        default: 2"
  echo "        The number of minimal UMI counts per cell that have to be present for initial cell detection."
  echo ""


  echo "   --min_cells"
  echo "        type: integer"
  echo "        default: 3"
  echo "        The number of cells in which UMIs for a gene were detected."
  echo ""


  echo "   --min_gene_variablity_percent"
  echo "        type: double"
  echo "        default: 85.0"
  echo "        Used for gene filtering prior to PCA. Keep the most highly variable genes (in the top min_gene_variability_pctl percentile), as measured by the v-statistic [Klein et al., Cell 2015]."
  echo ""


  echo "   --num_pca_components"
  echo "        type: integer"
  echo "        default: 30"
  echo "        Number of principal components to use during PCA dimensionality reduction."
  echo ""


  echo "   --distance_metric"
  echo "        type: string"
  echo "        default: euclidean"
  echo "        The distance metric used for computing similarities."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "filter_with_scrublet 0.3.0rc2"
            exit
            ;;
        --input)
            VIASH_PAR_INPUT="$2"
            shift 2
            ;;
        --input=*)
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --modality)
            if [ -z "$VIASH_PAR_MODALITY" ]; then
              VIASH_PAR_MODALITY="$2"
            else
              VIASH_PAR_MODALITY="$VIASH_PAR_MODALITY:""$2"
            fi
            shift 2
            ;;
        --modality=*)
            if [ -z "$VIASH_PAR_MODALITY" ]; then
              VIASH_PAR_MODALITY=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_MODALITY="$VIASH_PAR_MODALITY:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_name_filter)
            VIASH_PAR_OBS_NAME_FILTER="$2"
            shift 2
            ;;
        --obs_name_filter=*)
            VIASH_PAR_OBS_NAME_FILTER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --do_subset)
            VIASH_PAR_DO_SUBSET=true
            shift 1
            ;;
        --obs_name_doublet_score)
            VIASH_PAR_OBS_NAME_DOUBLET_SCORE="$2"
            shift 2
            ;;
        --obs_name_doublet_score=*)
            VIASH_PAR_OBS_NAME_DOUBLET_SCORE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --min_counts)
            VIASH_PAR_MIN_COUNTS="$2"
            shift 2
            ;;
        --min_counts=*)
            VIASH_PAR_MIN_COUNTS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --min_cells)
            VIASH_PAR_MIN_CELLS="$2"
            shift 2
            ;;
        --min_cells=*)
            VIASH_PAR_MIN_CELLS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --min_gene_variablity_percent)
            VIASH_PAR_MIN_GENE_VARIABLITY_PERCENT="$2"
            shift 2
            ;;
        --min_gene_variablity_percent=*)
            VIASH_PAR_MIN_GENE_VARIABLITY_PERCENT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --num_pca_components)
            VIASH_PAR_NUM_PCA_COMPONENTS="$2"
            shift 2
            ;;
        --num_pca_components=*)
            VIASH_PAR_NUM_PCA_COMPONENTS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --distance_metric)
            VIASH_PAR_DISTANCE_METRIC="$2"
            shift 2
            ;;
        --distance_metric=*)
            VIASH_PAR_DISTANCE_METRIC=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS




# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT" ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_MODALITY" ]; then
  VIASH_PAR_MODALITY="rna"
fi
if [ -z "$VIASH_PAR_OBS_NAME_FILTER" ]; then
  VIASH_PAR_OBS_NAME_FILTER="filter_with_scrublet"
fi
if [ -z "$VIASH_PAR_DO_SUBSET" ]; then
  VIASH_PAR_DO_SUBSET="false"
fi
if [ -z "$VIASH_PAR_OBS_NAME_DOUBLET_SCORE" ]; then
  VIASH_PAR_OBS_NAME_DOUBLET_SCORE="scrublet_doublet_score"
fi
if [ -z "$VIASH_PAR_MIN_COUNTS" ]; then
  VIASH_PAR_MIN_COUNTS="2"
fi
if [ -z "$VIASH_PAR_MIN_CELLS" ]; then
  VIASH_PAR_MIN_CELLS="3"
fi
if [ -z "$VIASH_PAR_MIN_GENE_VARIABLITY_PERCENT" ]; then
  VIASH_PAR_MIN_GENE_VARIABLITY_PERCENT="85.0"
fi
if [ -z "$VIASH_PAR_NUM_PCA_COMPONENTS" ]; then
  VIASH_PAR_NUM_PCA_COMPONENTS="30"
fi
if [ -z "$VIASH_PAR_DISTANCE_METRIC" ]; then
  VIASH_PAR_DISTANCE_METRIC="euclidean"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-filter_with_scrublet-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
import scrublet as scr
import muon as mu
import numpy as np

### VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "'$VIASH_PAR_INPUT'"; else echo None; fi ),
  'modality': $( if [ ! -z ${VIASH_PAR_MODALITY+x} ]; then echo "'$VIASH_PAR_MODALITY'.split(':')"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo None; fi ),
  'obs_name_filter': $( if [ ! -z ${VIASH_PAR_OBS_NAME_FILTER+x} ]; then echo "'$VIASH_PAR_OBS_NAME_FILTER'"; else echo None; fi ),
  'do_subset': $( if [ ! -z ${VIASH_PAR_DO_SUBSET+x} ]; then echo "'$VIASH_PAR_DO_SUBSET'.lower() == 'true'"; else echo None; fi ),
  'obs_name_doublet_score': $( if [ ! -z ${VIASH_PAR_OBS_NAME_DOUBLET_SCORE+x} ]; then echo "'$VIASH_PAR_OBS_NAME_DOUBLET_SCORE'"; else echo None; fi ),
  'min_counts': $( if [ ! -z ${VIASH_PAR_MIN_COUNTS+x} ]; then echo "int('$VIASH_PAR_MIN_COUNTS')"; else echo None; fi ),
  'min_cells': $( if [ ! -z ${VIASH_PAR_MIN_CELLS+x} ]; then echo "int('$VIASH_PAR_MIN_CELLS')"; else echo None; fi ),
  'min_gene_variablity_percent': $( if [ ! -z ${VIASH_PAR_MIN_GENE_VARIABLITY_PERCENT+x} ]; then echo "float('$VIASH_PAR_MIN_GENE_VARIABLITY_PERCENT')"; else echo None; fi ),
  'num_pca_components': $( if [ ! -z ${VIASH_PAR_NUM_PCA_COMPONENTS+x} ]; then echo "int('$VIASH_PAR_NUM_PCA_COMPONENTS')"; else echo None; fi ),
  'distance_metric': $( if [ ! -z ${VIASH_PAR_DISTANCE_METRIC+x} ]; then echo "'$VIASH_PAR_DISTANCE_METRIC'"; else echo None; fi )
}
meta = {
  'functionality_name': '$VIASH_META_FUNCTIONALITY_NAME',
  'resources_dir': '$VIASH_RESOURCES_DIR'
}

resources_dir = '$VIASH_RESOURCES_DIR'

### VIASH END

print(f"Reading {par['input']}")
mdata = mu.read_h5mu(par["input"])

for mod in par["modality"]:
    print(f"Processing modality '{mod}'")
    data = mdata.mod[mod]

    print("  Running scrublet")
    scrub = scr.Scrublet(data.X)

    doublet_scores, predicted_doublets = scrub.scrub_doublets(
        min_counts=par["min_counts"],
        min_cells=par["min_cells"],
        min_gene_variability_pctl=par["min_gene_variablity_percent"],
        n_prin_comps=par["num_pca_components"],
        distance_metric=par["distance_metric"],
    )
    keep_cells = np.invert(predicted_doublets)

    print("  Storing output into .obs")
    if par["obs_name_doublet_score"] is not None:
        data.obs[par["obs_name_doublet_score"]] = doublet_scores
    if par["obs_name_filter"] is not None:
        data.obs[par["obs_name_filter"]] = keep_cells

    if par["do_subset"]:
        mdata.mod[mod] = data[keep_cells, :]


# # can we assume execution_log exists?
# if mdata.uns is None or "execution_log" not in mdata.uns:
#     mdata.uns["execution_log"] = []
# # store new entry
# new_entry = {"component": meta["functionality_name"], "params": par}
# mdata.uns["execution_log"].append(new_entry)


print("Writing h5mu to file")
mdata.write_h5mu(par["output"])
VIASHMAIN
python "\$tempscript" &
wait "\$!"

VIASHEOF
