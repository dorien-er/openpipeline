  docker.enabled = true
  def viash_temp = System.getenv("VIASH_TEMP") ?: "/tmp/"
  docker.runOptions = "-i -v ${baseDir}:${baseDir} -v $viash_temp:$viash_temp"
  process.container = "dataintuitive/viash"
  params {
    filter_with_counts__input = "viash_no_value"
    filter_with_counts__modality = "rna"
    filter_with_counts__output = "no_default_value_configured"
    filter_with_counts__do_subset = "no_default_value_configured"
    filter_with_counts__obs_name_filter = "filter_with_counts"
    filter_with_counts__var_name_filter = "filter_with_counts"
    filter_with_counts__min_counts = "no_default_value_configured"
    filter_with_counts__max_counts = "no_default_value_configured"
    filter_with_counts__min_genes_per_cell = "no_default_value_configured"
    filter_with_counts__max_genes_per_cell = "no_default_value_configured"
    filter_with_counts__min_cells_per_gene = "no_default_value_configured"
    filter_with_counts__min_fraction_mito = "no_default_value_configured"
    filter_with_counts__max_fraction_mito = "no_default_value_configured"
    id = ""
    testScript = "run_test.py"
    testResources = [ "run_test.py", "../../../resources_test/pbmc_1k_protein_v3" ]
    filter_with_counts {
      name = "filter_with_counts"
      container = "filter_filter_with_counts"
      containerTag = "0.3.0"
      containerRegistry = "ghcr.io"
      containerOrganization = "openpipelines-bio"
      command = "filter_with_counts"
      tests {
        isDefined = true
        testScript = "run_test.py"
        testResources = [ "run_test.py", "../../../resources_test/pbmc_1k_protein_v3" ]
      }
      arguments {
        input {
          name = "input"
          otype = "--"
          required = true
          type = "file"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_counts__input}"
          example = "input.h5mu"
          description = "Input h5mu file"
        }
        modality {
          name = "modality"
          otype = "--"
          required = false
          type = "string"
          direction = "Input"
          multiple = true
          multiple_sep = ":"
          value = "${params.filter_with_counts__modality}"
          dflt = "rna"
        }
        output {
          name = "output"
          otype = "--"
          required = false
          type = "file"
          direction = "Output"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_counts__output}"
          example = "output.h5mu"
          description = "Output h5mu file."
        }
        do_subset {
          name = "do_subset"
          otype = "--"
          required = false
          type = "boolean_true"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_counts__do_subset}"
          description = "Whether to subset before storing the output."
        }
        obs_name_filter {
          name = "obs_name_filter"
          otype = "--"
          required = false
          type = "string"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_counts__obs_name_filter}"
          dflt = "filter_with_counts"
          description = "In which .obs slot to store a boolean array corresponding to which observations should be removed."
        }
        var_name_filter {
          name = "var_name_filter"
          otype = "--"
          required = false
          type = "string"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_counts__var_name_filter}"
          dflt = "filter_with_counts"
          description = "In which .var slot to store a boolean array corresponding to which variables should be removed."
        }
        min_counts {
          name = "min_counts"
          otype = "--"
          required = false
          type = "integer"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_counts__min_counts}"
          example = "200"
          description = "Minimum number of counts captured per cell."
        }
        max_counts {
          name = "max_counts"
          otype = "--"
          required = false
          type = "integer"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_counts__max_counts}"
          example = "5000000"
          description = "Maximum number of counts captured per cell."
        }
        min_genes_per_cell {
          name = "min_genes_per_cell"
          otype = "--"
          required = false
          type = "integer"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_counts__min_genes_per_cell}"
          example = "200"
          description = "Minimum of non-zero values per cell."
        }
        max_genes_per_cell {
          name = "max_genes_per_cell"
          otype = "--"
          required = false
          type = "integer"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_counts__max_genes_per_cell}"
          example = "1500000"
          description = "Maximum of non-zero values per cell."
        }
        min_cells_per_gene {
          name = "min_cells_per_gene"
          otype = "--"
          required = false
          type = "integer"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_counts__min_cells_per_gene}"
          example = "3"
          description = "Minimum of non-zero values per gene."
        }
        min_fraction_mito {
          name = "min_fraction_mito"
          otype = "--"
          required = false
          type = "double"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_counts__min_fraction_mito}"
          example = "0.0"
          description = "Minimum fraction of UMIs that are mitochondrial."
        }
        max_fraction_mito {
          name = "max_fraction_mito"
          otype = "--"
          required = false
          type = "double"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_counts__max_fraction_mito}"
          example = "0.2"
          description = "Maximum fraction of UMIs that are mitochondrial."
        }
      }
    }
  }