#!/usr/bin/env bash

####################################
#    filter_with_hvg main_build    #
####################################

# This wrapper script is auto-generated by viash 0.5.10 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Dries De Maeyer <DDeMaey1@its.jnj.com> (contributor) {account: ddemaey1}
# * Robrecht Cannoodt <rcannood@gmail.com> (maintainer, contributor) {github: rcannood, orcid: 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="filter_with_hvg"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "filter_with_hvg main_build"
  echo "Annotate highly variable genes [Satija15] [Zheng17] [Stuart19]."
  echo ""
  echo "Expects logarithmized data, except when flavor='seurat_v3' in which count data is expected."
  echo ""
  echo "Depending on flavor, this reproduces the R-implementations of Seurat [Satija15], Cell Ranger [Zheng17], and Seurat v3 [Stuart19]."
  echo ""
  echo "For the dispersion-based methods ([Satija15] and [Zheng17]), the normalized dispersion is obtained by scaling with the mean and standard deviation of the dispersions for genes falling into a given bin for mean expression of genes. This means that for each bin of mean expression, highly variable genes are selected."
  echo ""
  echo "For [Stuart19], a normalized variance for each gene is computed. First, the data are standardized (i.e., z-score normalization per feature) with a regularized standard deviation. Next, the normalized variance is computed as the variance of each gene after the transformation. Genes are ranked by the normalized variance."
  echo
  echo "Options:"

  echo "   --input"
  echo "        type: file, required parameter"
  echo "        example: input.h5mu"
  echo "        Input h5mu file"
  echo ""


  echo "   --modality"
  echo "        type: string, multiple values allowed"
  echo "        default: rna"
  echo ""


  echo "   --output"
  echo "        type: file, output"
  echo "        example: output.h5mu"
  echo "        Output h5mu file."
  echo ""


  echo "   --var_name_filter"
  echo "        type: string"
  echo "        default: filter_with_hvg"
  echo "        In which .var slot to store a boolean array corresponding to which observations should be filtered out."
  echo ""


  echo "   --varm_name"
  echo "        type: string"
  echo "        default: hvg"
  echo "        In which .varm slot to store additional metadata."
  echo ""


  echo "   --do_subset"
  echo "        type: boolean_true"
  echo "        Whether to subset before storing the output."
  echo ""


  echo "   --flavor"
  echo "        type: string"
  echo "        default: seurat"
  echo "        Choose the flavor for identifying highly variable genes. For the dispersion based methods in their default workflows, Seurat passes the cutoffs whereas Cell Ranger passes n_top_genes."
  echo ""


  echo "   --n_top_genes"
  echo "        type: integer"
  echo "        Number of highly-variable genes to keep. Mandatory if flavor='seurat_v3'."
  echo ""


  echo "   --min_mean"
  echo "        type: double"
  echo "        default: 0.0125"
  echo "        If n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor='seurat_v3'."
  echo ""


  echo "   --max_mean"
  echo "        type: double"
  echo "        default: 3.0"
  echo "        If n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor='seurat_v3'."
  echo ""


  echo "   --min_disp"
  echo "        type: double"
  echo "        default: 0.5"
  echo "        If n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor='seurat_v3'."
  echo ""


  echo "   --max_disp"
  echo "        type: double"
  echo "        If n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor='seurat_v3'. Default is +inf."
  echo ""


  echo "   --span"
  echo "        type: double"
  echo "        default: 0.3"
  echo "        The fraction of the data (cells) used when estimating the variance in the loess model fit if flavor='seurat_v3'."
  echo ""


  echo "   --n_bins"
  echo "        type: integer"
  echo "        default: 20"
  echo "        Number of bins for binning the mean gene expression. Normalization is done with respect to each bin. If just a single gene falls into a bin, the normalized dispersion is artificially set to 1."
  echo ""


  echo "   --obs_batch_key"
  echo "        type: string"
  echo "        If specified, highly-variable genes are selected within each batch separately and merged. This simple "
  echo "        process avoids the selection of batch-specific genes and acts as a lightweight batch correction method. "
  echo "        For all flavors, genes are first sorted by how many batches they are a HVG. For dispersion-based flavors "
  echo "        ties are broken by normalized dispersion. If flavor = 'seurat_v3', ties are broken by the median (across"
  echo "        batches) rank based on within-batch normalized variance."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "filter_with_hvg main_build"
            exit
            ;;
        --input)
            VIASH_PAR_INPUT="$2"
            shift 2
            ;;
        --input=*)
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --modality)
            if [ -z "$VIASH_PAR_MODALITY" ]; then
              VIASH_PAR_MODALITY="$2"
            else
              VIASH_PAR_MODALITY="$VIASH_PAR_MODALITY:""$2"
            fi
            shift 2
            ;;
        --modality=*)
            if [ -z "$VIASH_PAR_MODALITY" ]; then
              VIASH_PAR_MODALITY=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_MODALITY="$VIASH_PAR_MODALITY:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --var_name_filter)
            VIASH_PAR_VAR_NAME_FILTER="$2"
            shift 2
            ;;
        --var_name_filter=*)
            VIASH_PAR_VAR_NAME_FILTER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --varm_name)
            VIASH_PAR_VARM_NAME="$2"
            shift 2
            ;;
        --varm_name=*)
            VIASH_PAR_VARM_NAME=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --do_subset)
            VIASH_PAR_DO_SUBSET=true
            shift 1
            ;;
        --flavor)
            VIASH_PAR_FLAVOR="$2"
            shift 2
            ;;
        --flavor=*)
            VIASH_PAR_FLAVOR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --n_top_genes)
            VIASH_PAR_N_TOP_GENES="$2"
            shift 2
            ;;
        --n_top_genes=*)
            VIASH_PAR_N_TOP_GENES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --min_mean)
            VIASH_PAR_MIN_MEAN="$2"
            shift 2
            ;;
        --min_mean=*)
            VIASH_PAR_MIN_MEAN=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --max_mean)
            VIASH_PAR_MAX_MEAN="$2"
            shift 2
            ;;
        --max_mean=*)
            VIASH_PAR_MAX_MEAN=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --min_disp)
            VIASH_PAR_MIN_DISP="$2"
            shift 2
            ;;
        --min_disp=*)
            VIASH_PAR_MIN_DISP=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --max_disp)
            VIASH_PAR_MAX_DISP="$2"
            shift 2
            ;;
        --max_disp=*)
            VIASH_PAR_MAX_DISP=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --span)
            VIASH_PAR_SPAN="$2"
            shift 2
            ;;
        --span=*)
            VIASH_PAR_SPAN=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --n_bins)
            VIASH_PAR_N_BINS="$2"
            shift 2
            ;;
        --n_bins=*)
            VIASH_PAR_N_BINS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_batch_key)
            VIASH_PAR_OBS_BATCH_KEY="$2"
            shift 2
            ;;
        --obs_batch_key=*)
            VIASH_PAR_OBS_BATCH_KEY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS




# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT" ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_MODALITY" ]; then
  VIASH_PAR_MODALITY="rna"
fi
if [ -z "$VIASH_PAR_VAR_NAME_FILTER" ]; then
  VIASH_PAR_VAR_NAME_FILTER="filter_with_hvg"
fi
if [ -z "$VIASH_PAR_VARM_NAME" ]; then
  VIASH_PAR_VARM_NAME="hvg"
fi
if [ -z "$VIASH_PAR_DO_SUBSET" ]; then
  VIASH_PAR_DO_SUBSET="false"
fi
if [ -z "$VIASH_PAR_FLAVOR" ]; then
  VIASH_PAR_FLAVOR="seurat"
fi
if [ -z "$VIASH_PAR_MIN_MEAN" ]; then
  VIASH_PAR_MIN_MEAN="0.0125"
fi
if [ -z "$VIASH_PAR_MAX_MEAN" ]; then
  VIASH_PAR_MAX_MEAN="3.0"
fi
if [ -z "$VIASH_PAR_MIN_DISP" ]; then
  VIASH_PAR_MIN_DISP="0.5"
fi
if [ -z "$VIASH_PAR_SPAN" ]; then
  VIASH_PAR_SPAN="0.3"
fi
if [ -z "$VIASH_PAR_N_BINS" ]; then
  VIASH_PAR_N_BINS="20"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-filter_with_hvg-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
import scanpy as sc
import muon as mu
import numpy as np

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "'$VIASH_PAR_INPUT'"; else echo None; fi ),
  'modality': $( if [ ! -z ${VIASH_PAR_MODALITY+x} ]; then echo "'$VIASH_PAR_MODALITY'.split(':')"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo None; fi ),
  'var_name_filter': $( if [ ! -z ${VIASH_PAR_VAR_NAME_FILTER+x} ]; then echo "'$VIASH_PAR_VAR_NAME_FILTER'"; else echo None; fi ),
  'varm_name': $( if [ ! -z ${VIASH_PAR_VARM_NAME+x} ]; then echo "'$VIASH_PAR_VARM_NAME'"; else echo None; fi ),
  'do_subset': $( if [ ! -z ${VIASH_PAR_DO_SUBSET+x} ]; then echo "'$VIASH_PAR_DO_SUBSET'.lower() == 'true'"; else echo None; fi ),
  'flavor': $( if [ ! -z ${VIASH_PAR_FLAVOR+x} ]; then echo "'$VIASH_PAR_FLAVOR'"; else echo None; fi ),
  'n_top_genes': $( if [ ! -z ${VIASH_PAR_N_TOP_GENES+x} ]; then echo "int('$VIASH_PAR_N_TOP_GENES')"; else echo None; fi ),
  'min_mean': $( if [ ! -z ${VIASH_PAR_MIN_MEAN+x} ]; then echo "float('$VIASH_PAR_MIN_MEAN')"; else echo None; fi ),
  'max_mean': $( if [ ! -z ${VIASH_PAR_MAX_MEAN+x} ]; then echo "float('$VIASH_PAR_MAX_MEAN')"; else echo None; fi ),
  'min_disp': $( if [ ! -z ${VIASH_PAR_MIN_DISP+x} ]; then echo "float('$VIASH_PAR_MIN_DISP')"; else echo None; fi ),
  'max_disp': $( if [ ! -z ${VIASH_PAR_MAX_DISP+x} ]; then echo "float('$VIASH_PAR_MAX_DISP')"; else echo None; fi ),
  'span': $( if [ ! -z ${VIASH_PAR_SPAN+x} ]; then echo "float('$VIASH_PAR_SPAN')"; else echo None; fi ),
  'n_bins': $( if [ ! -z ${VIASH_PAR_N_BINS+x} ]; then echo "int('$VIASH_PAR_N_BINS')"; else echo None; fi ),
  'obs_batch_key': $( if [ ! -z ${VIASH_PAR_OBS_BATCH_KEY+x} ]; then echo "'$VIASH_PAR_OBS_BATCH_KEY'"; else echo None; fi )
}
meta = {
  'functionality_name': '$VIASH_META_FUNCTIONALITY_NAME',
  'resources_dir': '$VIASH_RESOURCES_DIR'
}

resources_dir = '$VIASH_RESOURCES_DIR'

## VIASH END

mdata = mu.read_h5mu(par["input"])

for mod in par['modality']:
    print(f"Processing modality '{mod}'")
    data = mdata.mod[mod]
    data.var_names_make_unique()
    #sc.pp.log1p(data)

    print(f"  Unfiltered data: {data}")

    print("  Computing hvg")
    # construct arguments
    hvg_args = {
        'adata': data,
        'n_top_genes': par["n_top_genes"],
        'min_mean': par["min_mean"],
        'max_mean': par["max_mean"],
        'min_disp': par["min_disp"],
        'span': par["span"],
        'n_bins': par["n_bins"],
        'flavor': par["flavor"],
        'subset': False,
        'inplace': False
    }

    # only add parameter if it's passed
    if par.get("max_disp", None) is not None:
        hvg_args["max_disp"] = par["max_disp"]
    if par.get("obs_batch_key", None) is not None:
        hvg_args["batch_key"] = par["obs_batch_key"]
    
    # call function
    try:
        out = sc.pp.highly_variable_genes(**hvg_args)
        out.index = data.var.index
    except ValueError as err:
        if str(err) == "cannot specify integer \`bins\` when input data contains infinity":
            err.args = ("Cannot specify integer \`bins\` when input data contains infinity. Perhaps input data has not been log normalized?",)
        raise err

    print("  Storing output into .var")
    if par.get("var_name_filter", None) is not None:
        data.var[par["var_name_filter"]] = out["highly_variable"]

    if par.get("varm_name", None) is not None:
        # drop mean_bin as muon/anndata doesn't support tuples
        data.varm[par["varm_name"]] = out.drop("mean_bin", axis=1)

    if par["do_subset"]:
        keep_feats = np.ravel(data.var[par["var_name_filter"]])
        mdata.mod[mod] = data[:,keep_feats]


# # can we assume execution_log exists?
# if mdata.uns is None or "execution_log" not in mdata.uns:
#     mdata.uns["execution_log"] = []
# # store new entry
# new_entry = {"component": meta["functionality_name"], "params": par}
# mdata.uns["execution_log"].append(new_entry)


print("Writing h5mu to file")
mdata.write_h5mu(par["output"])
VIASHMAIN
python "\$tempscript" &
wait "\$!"

VIASHEOF
