  docker.enabled = true
  def viash_temp = System.getenv("VIASH_TEMP") ?: "/tmp/"
  docker.runOptions = "-i -v ${baseDir}:${baseDir} -v $viash_temp:$viash_temp"
  process.container = "dataintuitive/viash"
  params {
    filter_with_hvg__input = "viash_no_value"
    filter_with_hvg__modality = "rna"
    filter_with_hvg__output = "no_default_value_configured"
    filter_with_hvg__var_name_filter = "filter_with_hvg"
    filter_with_hvg__varm_name = "hvg"
    filter_with_hvg__do_subset = "no_default_value_configured"
    filter_with_hvg__flavor = "seurat"
    filter_with_hvg__n_top_genes = "no_default_value_configured"
    filter_with_hvg__min_mean = "0.0125"
    filter_with_hvg__max_mean = "3.0"
    filter_with_hvg__min_disp = "0.5"
    filter_with_hvg__max_disp = "no_default_value_configured"
    filter_with_hvg__span = "0.3"
    filter_with_hvg__n_bins = "20"
    filter_with_hvg__obs_batch_key = "no_default_value_configured"
    id = ""
    testScript = "run_test.py"
    testResources = [ "run_test.py", "../../../resources_test/pbmc_1k_protein_v3" ]
    filter_with_hvg {
      name = "filter_with_hvg"
      container = "filter_filter_with_hvg"
      containerTag = "main_build"
      containerRegistry = "ghcr.io"
      containerOrganization = "openpipeline"
      command = "filter_with_hvg"
      tests {
        isDefined = true
        testScript = "run_test.py"
        testResources = [ "run_test.py", "../../../resources_test/pbmc_1k_protein_v3" ]
      }
      arguments {
        input {
          name = "input"
          otype = "--"
          required = true
          type = "file"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_hvg__input}"
          example = "input.h5mu"
          description = "Input h5mu file"
        }
        modality {
          name = "modality"
          otype = "--"
          required = false
          type = "string"
          direction = "Input"
          multiple = true
          multiple_sep = ":"
          value = "${params.filter_with_hvg__modality}"
          dflt = "rna"
        }
        output {
          name = "output"
          otype = "--"
          required = false
          type = "file"
          direction = "Output"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_hvg__output}"
          example = "output.h5mu"
          description = "Output h5mu file."
        }
        var_name_filter {
          name = "var_name_filter"
          otype = "--"
          required = false
          type = "string"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_hvg__var_name_filter}"
          dflt = "filter_with_hvg"
          description = "In which .var slot to store a boolean array corresponding to which observations should be filtered out."
        }
        varm_name {
          name = "varm_name"
          otype = "--"
          required = false
          type = "string"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_hvg__varm_name}"
          dflt = "hvg"
          description = "In which .varm slot to store additional metadata."
        }
        do_subset {
          name = "do_subset"
          otype = "--"
          required = false
          type = "boolean_true"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_hvg__do_subset}"
          description = "Whether to subset before storing the output."
        }
        flavor {
          name = "flavor"
          otype = "--"
          required = false
          type = "string"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_hvg__flavor}"
          dflt = "seurat"
          description = "Choose the flavor for identifying highly variable genes. For the dispersion based methods in their default workflows, Seurat passes the cutoffs whereas Cell Ranger passes n_top_genes."
        }
        n_top_genes {
          name = "n_top_genes"
          otype = "--"
          required = false
          type = "integer"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_hvg__n_top_genes}"
          description = "Number of highly-variable genes to keep. Mandatory if flavor='seurat_v3'."
        }
        min_mean {
          name = "min_mean"
          otype = "--"
          required = false
          type = "double"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_hvg__min_mean}"
          dflt = "0.0125"
          description = "If n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor='seurat_v3'."
        }
        max_mean {
          name = "max_mean"
          otype = "--"
          required = false
          type = "double"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_hvg__max_mean}"
          dflt = "3.0"
          description = "If n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor='seurat_v3'."
        }
        min_disp {
          name = "min_disp"
          otype = "--"
          required = false
          type = "double"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_hvg__min_disp}"
          dflt = "0.5"
          description = "If n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor='seurat_v3'."
        }
        max_disp {
          name = "max_disp"
          otype = "--"
          required = false
          type = "double"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_hvg__max_disp}"
          description = "If n_top_genes is defined, this and all other cutoffs for the means and the normalized dispersions are ignored. Ignored if flavor='seurat_v3'. Default is +inf."
        }
        span {
          name = "span"
          otype = "--"
          required = false
          type = "double"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_hvg__span}"
          dflt = "0.3"
          description = "The fraction of the data (cells) used when estimating the variance in the loess model fit if flavor='seurat_v3'."
        }
        n_bins {
          name = "n_bins"
          otype = "--"
          required = false
          type = "integer"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_hvg__n_bins}"
          dflt = "20"
          description = "Number of bins for binning the mean gene expression. Normalization is done with respect to each bin. If just a single gene falls into a bin, the normalized dispersion is artificially set to 1."
        }
        obs_batch_key {
          name = "obs_batch_key"
          otype = "--"
          required = false
          type = "string"
          direction = "Input"
          multiple = false
          multiple_sep = ":"
          value = "${params.filter_with_hvg__obs_batch_key}"
          description = "If specified, highly-variable genes are selected within each batch separately and merged. This simple \nprocess avoids the selection of batch-specific genes and acts as a lightweight batch correction method. \nFor all flavors, genes are first sorted by how many batches they are a HVG. For dispersion-based flavors \nties are broken by normalized dispersion. If flavor = 'seurat_v3', ties are broken by the median (across\nbatches) rank based on within-batch normalized variance.\n"
        }
      }
    }
  }