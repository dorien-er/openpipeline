#!/usr/bin/env bash

###########################################
#    convert_bdrhap_to_h5ad main_build    #
###########################################

# This wrapper script is auto-generated by viash 0.5.10 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Robrecht Cannoodt <rcannood@gmail.com> (maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="convert_bdrhap_to_h5ad"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "convert_bdrhap_to_h5ad main_build"
  echo "Create a h5ad file from BD Rhapsody output."
  echo
  echo "Options:"

  echo "   -i, --input"
  echo "        type: file, required parameter, multiple values allowed"
  echo "        example: input_dir"
  echo "        One or more folders containing the output of the BD Rhapsody workflow. If multiple are given, they are all combined into one h5ad file."
  echo ""


  echo "   --id"
  echo "        type: string, multiple values allowed"
  echo "        example: my_id"
  echo "        A vector of ids with same length as --input."
  echo ""


  echo "   -o, --output"
  echo "        type: file, required parameter, output"
  echo "        example: output.h5ad"
  echo "        Output h5ad file."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "convert_bdrhap_to_h5ad main_build"
            exit
            ;;
        --input)
            if [ -z "$VIASH_PAR_INPUT" ]; then
              VIASH_PAR_INPUT="$2"
            else
              VIASH_PAR_INPUT="$VIASH_PAR_INPUT:""$2"
            fi
            shift 2
            ;;
        --input=*)
            if [ -z "$VIASH_PAR_INPUT" ]; then
              VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_INPUT="$VIASH_PAR_INPUT:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        -i)
            if [ -z "$VIASH_PAR_INPUT" ]; then
              VIASH_PAR_INPUT="$2"
            else
              VIASH_PAR_INPUT="$VIASH_PAR_INPUT:""$2"
            fi
            shift 2
            ;;
        --id)
            if [ -z "$VIASH_PAR_ID" ]; then
              VIASH_PAR_ID="$2"
            else
              VIASH_PAR_ID="$VIASH_PAR_ID:""$2"
            fi
            shift 2
            ;;
        --id=*)
            if [ -z "$VIASH_PAR_ID" ]; then
              VIASH_PAR_ID=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_ID="$VIASH_PAR_ID:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS




# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT" ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi



cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-convert_bdrhap_to_h5ad-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
## VIASH START
# The following code has been auto-generated by Viash.
# get parameters from cli
par <- list(
  "input" = $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "strsplit('$VIASH_PAR_INPUT', split = ':')[[1]]"; else echo NULL; fi ),
  "id" = $( if [ ! -z ${VIASH_PAR_ID+x} ]; then echo "strsplit('$VIASH_PAR_ID', split = ':')[[1]]"; else echo NULL; fi ),
  "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo NULL; fi )
)

# get meta parameters
meta <- list(
  functionality_name = "$VIASH_META_FUNCTIONALITY_NAME",
  resources_dir = "$VIASH_RESOURCES_DIR"
)

# get resources dir
resources_dir = "$VIASH_RESOURCES_DIR"

## VIASH END

cat("Loading libraries\\n")
options(tidyverse.quiet = TRUE)
library(tidyverse)
requireNamespace("anndata", quietly = TRUE)

read_metric <- function(file) {
  lines <- readr::read_lines(file)
  ix <- grep("^#[^#]", lines)
  header <- lines[ix+1] %>% strsplit(",") %>% unlist
  values <- lines[ix+2] %>% strsplit(",") %>% unlist
  ix2 <- !duplicated(header)
  new_csv <- paste0(
    header[ix2] %>% paste(collapse = ","), "\\n",
    values[ix2] %>% paste(collapse = ","), "\\n"
  )
  readr::read_csv(new_csv)
}

ids <- map_chr(seq_along(par\$input), function(i) {
  if (!is.null(par\$id) && length(par\$input) == length(par\$id)) {
    par\$id[[i]]
  } else {
    paste0("sample", i)
  }
})

cat("Reading in metric summaries\\n")
mets <- map_df(par\$input, function(dir) {
  list.files(dir, pattern = "Metrics_Summary.csv\$", full.names = TRUE) %>% read_metric()
})
mets\$id <- ids

cat("Reading in count data\\n")
counts <- lapply(par\$input, function(dir) {
  list.files(dir, pattern = "_RSEC_MolsPerCell.csv\$", full.names = TRUE) %>%
    readr::read_csv(
      col_types = cols(.default = col_integer()),
      comment = "#"
    ) %>%
    tibble::column_to_rownames("Cell_Index") %>%
    as.matrix %>%
    Matrix::Matrix(sparse = TRUE)
})

obs <- map_df(seq_along(counts), function(i) {
  cell_index = rownames(counts[[i]])
  data.frame(
    row.names = paste0("sample", i, "_", cell_index),
    id = rep(ids[[i]], length(cell_index))
  )
})

cat("Constructing var\\n")
targets <- map(counts, colnames)
unique_targets <- sort(unique(unlist(targets)))
var <- data.frame(
  row.names = unique_targets,
  feature_types = rep("Gene Expression", length(unique_targets))
)

cat("Constructing counts\\n")
new_counts <- map(seq_along(counts), function(i) {
  mat <- counts[[i]]
  if (is(mat, "RsparseMatrix")) {
    j <- mat@j+1
    jmap <- match(colnames(mat), unique_targets)
    newj <- jmap[j]
    Matrix::sparseMatrix(
      p = mat@p,
      j = newj,
      x = mat@x,
      repr = "R",
      dims = c(nrow(mat), length(unique_targets)),
      dimnames = list(rownames(mat), unique_targets)
    )
  } else if (is(mat, "CsparseMatrix")) {
    pmap <- cumsum(c(TRUE, unique_targets %in% colnames(mat)))
    newp <- mat@p[pmap]
    Matrix::sparseMatrix(
      p = newp,
      i = mat@i+1,
      x = mat@x,
      repr = "C",
      dims = c(nrow(mat), length(unique_targets)),
      dimnames = list(rownames(mat), unique_targets)
    )
  }
}) %>% do.call(rbind, .)

cat("Constructing metrics summary\\n")
new_met <- tibble(
  Total_Reads_in_FASTQ = sum(mets\$Total_Reads_in_FASTQ),
  Pct_Reads_Too_Short = sum(mets\$Total_Reads_in_FASTQ * mets\$Pct_Reads_Too_Short) / Total_Reads_in_FASTQ,
  Pct_Reads_Low_Base_Quality = sum(mets\$Total_Reads_in_FASTQ * mets\$Pct_Reads_Low_Base_Quality) / Total_Reads_in_FASTQ,
  Pct_Reads_High_SNF = sum(mets\$Total_Reads_in_FASTQ * mets\$Pct_Reads_High_SNF) / Total_Reads_in_FASTQ,
  Pct_Reads_Filtered_Out = sum(mets\$Total_Reads_in_FASTQ * mets\$Pct_Reads_Filtered_Out) / Total_Reads_in_FASTQ,
  Total_Reads_After_Quality_Filtering = sum(mets\$Total_Reads_After_Quality_Filtering),
  Library = unique(mets\$Library),
  Total_Filtered_Reads = sum(mets\$Total_Filtered_Reads),
  Pct_Contaminating_PhiX_Reads_in_Filtered_R2 = sum(mets\$Total_Filtered_Reads * mets\$Pct_Contaminating_PhiX_Reads_in_Filtered_R2) / Total_Filtered_Reads,
  Pct_Q30_Bases_in_Filtered_R2 = sum(mets\$Total_Filtered_Reads * mets\$Pct_Q30_Bases_in_Filtered_R2) / Total_Filtered_Reads,
  Pct_Assigned_to_Cell_Labels = sum(mets\$Total_Filtered_Reads * mets\$Pct_Assigned_to_Cell_Labels) / Total_Filtered_Reads,
  Pct_Cellular_Reads_Aligned_Uniquely_to_Annotated_Transcriptome = sum(mets\$Total_Filtered_Reads * mets\$Pct_Cellular_Reads_Aligned_Uniquely_to_Annotated_Transcriptome) / Total_Filtered_Reads,
  Pct_Cellular_Reads_Aligned_Uniquely_to_Other_Genomic_Regions = sum(mets\$Total_Filtered_Reads * mets\$Pct_Cellular_Reads_Aligned_Uniquely_to_Other_Genomic_Regions) / Total_Filtered_Reads,
  Pct_Cellular_Reads_Aligned_Not_Unique = sum(mets\$Total_Filtered_Reads * mets\$Pct_Cellular_Reads_Aligned_Not_Unique) / Total_Filtered_Reads,
  Pct_Cellular_Reads_Unaligned = sum(mets\$Total_Filtered_Reads * mets\$Pct_Cellular_Reads_Unaligned) / Total_Filtered_Reads,
  Aligned_Reads_By_Type = sum(mets\$Aligned_Reads_By_Type),
  Total_Raw_Molecules = sum(mets\$Total_Raw_Molecules),
  Total_RSEC_Molecules = sum(mets\$Total_RSEC_Molecules),
  Mean_Raw_Sequencing_Depth = sum(mets\$Total_Raw_Molecules * mets\$Mean_Raw_Sequencing_Depth) / Total_Raw_Molecules,
  Mean_RSEC_Sequencing_Depth = sum(mets\$Total_RSEC_Molecules * mets\$Mean_RSEC_Sequencing_Depth) / Total_RSEC_Molecules,
  Sequencing_Saturation = NA_real_,
  Target_Type = unique(mets\$Target_Type),
  Putative_Cell_Count = sum(mets\$Putative_Cell_Count),
  Pct_Reads_from_Putative_Cells = sum(mets\$Putative_Cell_Count * mets\$Mean_Reads_per_Cell * mets\$Pct_Reads_from_Putative_Cells) / sum(mets\$Putative_Cell_Count * mets\$Mean_Reads_per_Cell),
  Mean_Reads_per_Cell = sum(mets\$Putative_Cell_Count * mets\$Mean_Reads_per_Cell) / Putative_Cell_Count,
  Mean_Molecules_per_Cell = sum(mets\$Putative_Cell_Count * mets\$Mean_Molecules_per_Cell) / Putative_Cell_Count,
  Median_Molecules_per_Cell = median(Matrix::rowSums(new_counts)),
  Mean_Targets_per_Cell = sum(mets\$Putative_Cell_Count * mets\$Mean_Targets_per_Cell) / Putative_Cell_Count,
  Median_Targets_per_Cell = median(Matrix::rowSums(new_counts > 0)),
  Total_Targets_Detected = length(unique_targets)
)

cat("Constructing anndata object\\n")
new_h5ad <- anndata::AnnData(
  X = new_counts,
  obs = obs,
  var = var,
  uns = list(
    metrics_summary = new_met,
    metrics_per_file = mets %>% select(id, everything())
  )
)

cat("Storing raw\\n")
new_h5ad\$raw <- new_h5ad

cat("Writing to h5ad file\\n")
new_h5ad\$write_h5ad(par\$output, compression = "gzip")
VIASHMAIN
Rscript "\$tempscript" &
wait "\$!"

VIASHEOF
