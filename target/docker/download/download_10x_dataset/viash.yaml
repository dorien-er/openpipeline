functionality:
  name: "download_10x_dataset"
  namespace: "download"
  version: "main_build"
  authors:
  - name: "Robrecht Cannoodt"
    email: "rcannood@gmail.com"
    roles:
    - "maintainer"
    props:
      github: "rcannood"
      orcid: "0000-0003-3641-729X"
  arguments:
  - type: "string"
    name: "--input"
    alternatives:
    - "-i"
    description: "Location URL to an h5 file from the 10x genomics website."
    example: "https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_protein_v3/pbmc_1k_protein_v3_raw_feature_bc_matrix.h5"
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--output"
    alternatives:
    - "-o"
    description: "Output h5 file."
    example: "pbmc_1k_protein_v3_raw_feature_bc_matrix.h5"
    must_exist: false
    required: true
    direction: "Output"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--min_library_size"
    alternatives: []
    description: "Minimum library size."
    default: 0
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--min_cells_per_gene"
    alternatives: []
    description: "Minimum number of cells per gene."
    default: 0
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--keep_feature_types"
    alternatives: []
    description: "Specify which feature types will never be filtered out"
    example: "Antibody Capture"
    required: false
    direction: "Input"
    multiple: true
    multiple_sep: ":"
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      #########################################
      #    download_10x_dataset main_build    #
      #########################################
      
      # This wrapper script is auto-generated by viash 0.5.0-rc2 and is thus a
      # derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
      # Data Intuitive.  The component may contain files which fall under a different
      # license. The authors of this component should specify the license in the
      # header of such files, or include a separate license file detailing the
      # licenses of all included files.
      #
      # Component authors:
      # * Robrecht Cannoodt <rcannood@gmail.com> (maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=/tmp
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      VIASH_VERBOSITY=5
      
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '. 
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '. 
      function ViashEmergency {
        ViashLog 0 emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '. 
      function ViashAlert {
        ViashLog 1 alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '. 
      function ViashCritical {
        ViashLog 2 critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '. 
      function ViashError {
        ViashLog 3 error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '. 
      function ViashWarning {
        ViashLog 4 warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '. 
      function ViashNotice {
        ViashLog 5 notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '. 
      function ViashInfo {
        ViashLog 6 info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '. 
      function ViashDebug {
        ViashLog 7 debug $@
      }
      
      # find source folder of this component
      VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
         echo "download_10x_dataset main_build"
      echo "Download a dataset from the 10x genomics website. "
         echo
      echo "Usage: download_10x_dataset \\
        --input https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_protein_v3/pbmc_1k_protein_v3_raw_feature_bc_matrix.h5 \\
        --min_library_size 1000 --min_cells_per_gene 300"
      echo
         echo "Options:"
      
      echo "    -i, --input"
      echo "        type: string, required parameter"
      echo "        example: https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_protein_v3/pbmc_1k_protein_v3_raw_feature_bc_matrix.h5"
      echo "        Location URL to an h5 file from the 10x genomics website."
      echo ""
      
      
      echo "    -o, --output"
      echo "        type: file, required parameter, output"
      echo "        example: pbmc_1k_protein_v3_raw_feature_bc_matrix.h5"
      echo "        Output h5 file."
      echo ""
      
      
      echo "    --min_library_size"
      echo "        type: integer"
      echo "        default: 0"
      echo "        Minimum library size."
      echo ""
      
      
      echo "    --min_cells_per_gene"
      echo "        type: integer"
      echo "        default: 0"
      echo "        Minimum number of cells per gene."
      echo ""
      
      
      echo "    --keep_feature_types"
      echo "        type: string, multiple values allowed"
      echo "        example: Antibody Capture"
      echo "        Specify which feature types will never be filtered out"
      echo ""
      
      }
      ######## Helper functions for setting up Docker images for viash ########
      
      
      # ViashDockerRemoteTagCheck: check whether a Docker image is available 
      # on a remote. Assumes `docker login` has been performed, if relevant.
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerRemoteTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerRemoteTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerRemoteTagCheck {
        docker manifest inspect $1 > /dev/null 2> /dev/null
      }
      
      # ViashDockerLocalTagCheck: check whether a Docker image is available locally
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   docker pull python:latest
      #   ViashDockerLocalTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerLocalTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerLocalTagCheck {
        [ -n "$(docker images -q $1)" ]
      }
      
      # ViashDockerPull: pull a Docker image
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerPull python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerPull sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerPull {
        ViashNotice "Running 'docker pull $1'"
        docker pull $1 && return 0 || return 1
      }
      
      # ViashDockerPullElseBuild: pull a Docker image, else build it
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerPullElseBuild mynewcomponent
      function ViashDockerPullElseBuild {
        set +e
        ViashDockerPull $1
        out=$?
        set -e
        if [ $out -ne 0 ]; then
          ViashDockerBuild $@
        fi
      }
      
      # ViashDockerSetup: create a Docker image, according to specified docker setup strategy
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # $2                  : docker setup strategy, see DockerSetupStrategy.scala
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerSetup mynewcomponent alwaysbuild
      function ViashDockerSetup {
        VSHD_ID="$1"
        VSHD_STRAT="$2"
        if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
          ViashDockerBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
          ViashDockerPull $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
          ViashDockerBuild $VSHD_ID
        elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
          set +e
          ViashDockerLocalTagCheck $VSHD_ID
          outCheck=$?
          set -e
          if [ $outCheck -eq 0 ]; then
            ViashInfo "Image $VSHD_ID already exists"
          elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
            ViashDockerBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
            ViashDockerBuild $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
            ViashDockerPull $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID
          else
            ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
            exit 1
          fi
        elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
          set +e
          docker push $VSHD_ID
          outPush=$?
          set -e
          if [ $outPush -eq 0 ]; then
            ViashNotice "Container '$VSHD_ID' push succeeded."
          else
            ViashError "Container '$VSHD_ID' push errored."
            exit 1
          fi
        elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
          set +e
          ViashDockerRemoteTagCheck $VSHD_ID
          outCheck=$?
          set -e
          if [ $outCheck -eq 0 ]; then
            ViashNotice "Container '$VSHD_ID' exists, doing nothing."
          else
            ViashNotice "Container '$VSHD_ID' does not yet exist."
            set +e
            docker push $1 > /dev/null 2> /dev/null
            outPush=$?
            set -e
            if [ $outPush -eq 0 ]; then
              ViashNotice "Container '$VSHD_ID' push succeeded."
            else
            ViashError "Container '$VSHD_ID' push errored."
              exit 1
            fi
          fi
        elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
          ViashNotice "Skipping setup."
        else
          ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
          exit 1
        fi
      }
      
      
      ######## End of helper functions for setting up Docker images for viash ########
      
      # ViashDockerFile: print the dockerfile to stdout
      # return : dockerfile required to run this component
      # examples:
      #   ViashDockerFile
      function ViashDockerfile {
        cat << 'VIASHDOCKER'
      FROM dataintuitive/randpy:r4.0_py3.8_bioc3.12
      
      RUN :
      VIASHDOCKER
      }
      
      # ViashDockerBuild: build a docker container
      # $1              : image identifier with format `[registry/]image[:tag]`
      # exit code $?    : whether or not the image was built
      function ViashDockerBuild {
      
        # create temporary directory to store dockerfile & optional resources in
        tmpdir=$(mktemp -d "$VIASH_TEMP/viashsetupdocker-download_10x_dataset-XXXXXX")
        function clean_up {
          rm -rf "$tmpdir"
        }
        trap clean_up EXIT
      
        # store dockerfile and resources
        ViashDockerfile > $tmpdir/Dockerfile
        cp -r $VIASH_RESOURCES_DIR/* $tmpdir
      
        # Build the container
        ViashNotice "Running 'docker build -t $@ $tmpdir'"
        set +e
        if [ $VIASH_VERBOSITY -ge 6 ]; then
          docker build -t $@ $tmpdir
        else
          docker build -t $@ $tmpdir &> $tmpdir/docker_build.log
        fi
        out=$?
        set -e
        if [ ! $out -eq 0 ]; then
          ViashError "Error occurred while building the container $@."
          if [ ! $VIASH_VERBOSITY -ge 6 ]; then
            ViashError "Transcript: --------------------------------"
            cat "$tmpdir/docker_build.log"
            ViashError "End of transcript --------------------------"
          fi
          exit 1
        fi
      }
      # ViashAbsolutePath: generate absolute path from relative path
      # borrowed from https://stackoverflow.com/a/21951256
      # $1     : relative filename
      # return : absolute path
      # examples:
      #   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
      #   ViashAbsolutePath /foo/bar/..     # returns /foo
      function ViashAbsolutePath {
        local thePath
        if [[ ! "$1" =~ ^/ ]]; then
          thePath="$PWD/$1"
        else
          thePath="$1"
        fi
        echo "$thePath" | (
          IFS=/
          read -a parr
          declare -a outp
          for i in "${parr[@]}"; do
            case "$i" in
            ''|.) continue ;;
            ..)
              len=${#outp[@]}
              if ((len==0)); then
                continue
              else
                unset outp[$((len-1))]
              fi
              ;;
            *)
              len=${#outp[@]}
              outp[$len]="$i"
            ;;
            esac
          done
          echo /"${outp[*]}"
        )
      }
      # ViashAutodetectMount: auto configuring docker mounts from parameters
      # $1                  : The parameter value
      # returns             : New parameter
      # $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
      # examples:
      #   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
      #   ViashAutodetectMountArg /path/to/bar   # returns '-v /path/to:/viash_automount/path/to'
      function ViashAutodetectMount {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "$mount_target/$base_name"
      }
      function ViashAutodetectMountArg {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "-v \"$mount_source:$mount_target\""
      }
      # ViashExtractFlags: Retain leading flag
      # $1     : string with a possible leading flag
      # return : leading flag
      # examples:
      #   ViashExtractFlags --foo=bar  # returns --foo
      function ViashExtractFlags {
        echo $1 | sed 's/=.*//'
      }
      # initialise variables
      VIASH_EXTRA_MOUNTS=''
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              -v|--verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              -vv)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
                  shift 1
                  ;;
              --verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              --verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "download_10x_dataset main_build"
                  exit
                  ;;
              --input)
                  VIASH_PAR_INPUT="$2"
                  shift 2
                  ;;
              --input=*)
                  VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -i)
                  VIASH_PAR_INPUT="$2"
                  shift 2
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -o)
                  VIASH_PAR_OUTPUT="$2"
                  shift 2
                  ;;
              --min_library_size)
                  VIASH_PAR_MIN_LIBRARY_SIZE="$2"
                  shift 2
                  ;;
              --min_library_size=*)
                  VIASH_PAR_MIN_LIBRARY_SIZE=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --min_cells_per_gene)
                  VIASH_PAR_MIN_CELLS_PER_GENE="$2"
                  shift 2
                  ;;
              --min_cells_per_gene=*)
                  VIASH_PAR_MIN_CELLS_PER_GENE=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --keep_feature_types)
                  if [ -z "$VIASH_PAR_KEEP_FEATURE_TYPES" ]; then
                    VIASH_PAR_KEEP_FEATURE_TYPES="$2"
                  else
                    VIASH_PAR_KEEP_FEATURE_TYPES="$VIASH_PAR_KEEP_FEATURE_TYPES:""$2"
                  fi
                  shift 2
                  ;;
              --keep_feature_types=*)
                  if [ -z "$VIASH_PAR_KEEP_FEATURE_TYPES" ]; then
                    VIASH_PAR_KEEP_FEATURE_TYPES=$(ViashRemoveFlags "$1")
                  else
                    VIASH_PAR_KEEP_FEATURE_TYPES="$VIASH_PAR_KEEP_FEATURE_TYPES:"$(ViashRemoveFlags "$1")
                  fi
                  shift 1
                  ;;
              ---setup)
                  ViashDockerSetup 'openpipeline/download_download_10x_dataset:main_build' "$2"
                  exit 0
                  ;;
              ---setup=*)
                  ViashDockerSetup 'openpipeline/download_download_10x_dataset:main_build' "$(ViashRemoveFlags "$1")"
                  exit 0
                  ;;
              ---dockerfile)
                  ViashDockerfile
                  exit 0
                  ;;
              ---v|---volume)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v "$2""
                  shift 2
                  ;;
              ---volume=*)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v $(ViashRemoveFlags "$2")"
                  shift 1
                  ;;
              ---debug)
                  ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t openpipeline/download_download_10x_dataset:main_build"
                  docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t openpipeline/download_download_10x_dataset:main_build
                  exit 0
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_INPUT" ]; then
        ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT" ]; then
        ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_MIN_LIBRARY_SIZE" ]; then
        VIASH_PAR_MIN_LIBRARY_SIZE="0"
      fi
      if [ -z "$VIASH_PAR_MIN_CELLS_PER_GENE" ]; then
        VIASH_PAR_MIN_CELLS_PER_GENE="0"
      fi
      
      ViashDockerSetup 'openpipeline/download_download_10x_dataset:main_build' ifneedbepullelsecachedbuild
      
      # detect volumes from file arguments
      if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT")"
        VIASH_PAR_OUTPUT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT")
      fi
      
      # Always mount the resource directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_RESOURCES_DIR")"
      VIASH_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_RESOURCES_DIR")
      
      # Always mount the VIASH_TEMP directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_TEMP")"
      VIASH_TEMP=$(ViashAutodetectMount "$VIASH_TEMP")
      
      # change file ownership
      function viash_perform_chown {
        
        if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS openpipeline/download_download_10x_dataset:main_build "$(id -u):$(id -g)" -R "$VIASH_PAR_OUTPUT"
        fi
      }
      trap viash_perform_chown EXIT
      
      
      cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm $VIASH_EXTRA_MOUNTS openpipeline/download_download_10x_dataset:main_build
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-download_10x_dataset-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      trap clean_up EXIT
      cat > "\$tempscript" << 'VIASHMAIN'
      # The following code has been auto-generated by Viash.
      par <- list(
        "input" = $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "'$VIASH_PAR_INPUT'"; else echo NULL; fi ),
        "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo NULL; fi ),
        "min_library_size" = $( if [ ! -z ${VIASH_PAR_MIN_LIBRARY_SIZE+x} ]; then echo "as.integer($VIASH_PAR_MIN_LIBRARY_SIZE)"; else echo NULL; fi ),
        "min_cells_per_gene" = $( if [ ! -z ${VIASH_PAR_MIN_CELLS_PER_GENE+x} ]; then echo "as.integer($VIASH_PAR_MIN_CELLS_PER_GENE)"; else echo NULL; fi ),
        "keep_feature_types" = $( if [ ! -z ${VIASH_PAR_KEEP_FEATURE_TYPES+x} ]; then echo "strsplit('$VIASH_PAR_KEEP_FEATURE_TYPES', split = ':')[[1]]"; else echo NULL; fi )
      )
      
      resources_dir = "$VIASH_RESOURCES_DIR"
      
      cat("Loading dependencies\\n")
      requireNamespace("hdf5r", quietly = TRUE)
      
      ## VIASH START
      ## VIASH END
      
      # simply download if no filtering is required
      if (par\$min_cells_per_gene <= 0 && par\$min_library_size <= 0) {
        cat("Downloading file at '", par\$input, "'\\n", sep = "")
        download.file(par\$input, par\$output, quiet = TRUE)
      } else {
        cat("Downloading file at '", par\$input, "'\\n", sep = "")
        h5_tmp <- tempfile()
        download.file(par\$input, destfile = h5_tmp, quiet = TRUE)
      
        cat("Opening h5ad file at '", h5_tmp, "'\\n", sep = "")
        h5 <- hdf5r::H5File\$new(h5_tmp, mode = "r")
      
        cat("Reading data in memory\\n")
        features__all_tag_keys <- h5[["matrix/features/_all_tag_keys"]][]
      
        features <- data.frame(
          feature_type = h5[["matrix/features/feature_type"]][],
          genome = h5[["matrix/features/genome"]][],
          id = h5[["matrix/features/id"]][],
          name = h5[["matrix/features/name"]][]
        )
      
        mat <- Matrix::sparseMatrix(
          i = h5[["matrix/indices"]][],
          p = h5[["matrix/indptr"]][],
          x = h5[["matrix/data"]][],
          dims = h5[["matrix/shape"]][],
          index1 = FALSE,
          dimnames = list(
            features\$id,
            h5[["matrix/barcodes"]][]
          )
        )
      
        cat("Filtering out cells with library size < ", par\$min_library_size, "\\n", sep = "")
        library_size <- Matrix::colSums(mat)
        mat2 <- mat[,library_size >= par\$min_library_size, drop = FALSE]
      
        cat("Filtering genes with num cells < ", par\$min_cells_per_gene, "\\n", sep = "")
        num_cells <- Matrix::rowSums(mat2 > 0)
        mat3 <- mat2[num_cells >= par\$min_cells_per_gene | features\$feature_type %in% par\$keep_feature_types, , drop = FALSE]
        features2 <- features[match(rownames(mat3), features\$id), , drop = FALSE]
      
        # helper fun
        set_with_type <- function(path, value) {
          orig_dtype <- h5[[path]]\$get_type()
          orig_chunk <- h5[[path]]\$chunk_dims
          if (is.na(orig_chunk)) orig_chunk <- "auto"
          h5new\$create_dataset(path, value, dtype = orig_dtype, chunk_dims = orig_chunk)
        }
      
        # create new file
        cat("Saving h5 file at '", par\$output, "'\\n", sep = "")
        h5new <- hdf5r::H5File\$new(par\$output, mode = "w")
        h5new\$create_group("matrix")
        h5new\$create_group("matrix/features")
      
        set_with_type("matrix/features/feature_type", features2\$feature_type)
        set_with_type("matrix/features/genome", features2\$genome)
        set_with_type("matrix/features/id", features2\$id)
        set_with_type("matrix/features/name", features2\$name)
        set_with_type("matrix/features/_all_tag_keys", features__all_tag_keys)
        set_with_type("matrix/indices", mat3@i)
        set_with_type("matrix/indptr", mat3@p)
        set_with_type("matrix/data", as.integer(mat3@x))
        set_with_type("matrix/shape", dim(mat3))
        set_with_type("matrix/barcodes", colnames(mat3))
      
        for (attname in hdf5r::h5attr_names(h5)) {
          h5new\$create_attr(attname, hdf5r::h5attr(h5, attname))
        }
        h5new\$close_all()
        h5\$close_all()
        zzz <- file.remove(h5_tmp)
      }
      VIASHMAIN
      PATH="$VIASH_RESOURCES_DIR:\$PATH"
      
      Rscript "\$tempscript"
      
      VIASHEOF
      

    dest: "download_10x_dataset"
    is_executable: true
  description: "Download a dataset from the 10x genomics website. \n"
  usage: "download_10x_dataset \\\n  --input https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_protein_v3/pbmc_1k_protein_v3_raw_feature_bc_matrix.h5\
    \ \\\n  --min_library_size 1000 --min_cells_per_gene 300\n"
  tests:
  - type: "r_script"
    path: "test/run_test.R"
    is_executable: true
  info: {}
platform:
  type: "docker"
  id: "docker"
  image: "dataintuitive/randpy:r4.0_py3.8_bioc3.12"
  target_registry: "openpipeline"
  namespace_separator: "_"
  resolve_volume: "Automatic"
  chown: true
  setup_strategy: "ifneedbepullelsecachedbuild"
  privileged: false
  setup: []
platforms: []
info:
  config: "src/download/download_10x_dataset/config.vsh.yaml"
  platform: "docker"
  output: "target/docker/download/download_10x_dataset"
  executable: "target/docker/download/download_10x_dataset/download_10x_dataset"
  viash_version: "0.5.0-rc2"
  git_commit: "118ee506cc218ee9d5e9d0536fee52597a091518"
  git_remote: "https://github.com/openpipeline-bio/openpipeline"
