functionality:
  name: "concat"
  namespace: "integrate"
  version: "integration_build"
  authors:
  - name: "Dries Schaumont"
    email: "Dschaumo@its.jnj.com"
    roles:
    - "maintainer"
    props: {}
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--input"
    alternatives:
    - "-i"
    description: "Paths to the different samples to be concatenated."
    example:
    - "sample_paths"
    default: []
    must_exist: false
    required: true
    direction: "input"
    multiple: true
    multiple_sep: ","
  - type: "string"
    name: "--sample_names"
    alternatives: []
    description: "Names of the different samples that have to be concatenated. Must\
      \ be of same length as `--input`."
    example:
    - "sample_names"
    default: []
    required: true
    choices: []
    direction: "input"
    multiple: true
    multiple_sep: ","
  - type: "file"
    name: "--output"
    alternatives:
    - "-o"
    example:
    - "output.h5mu"
    default: []
    must_exist: false
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--obs_sample_name"
    alternatives: []
    description: "Name of the .obs key under which to add the sample names."
    example: []
    default:
    - "sample_id"
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--compression"
    alternatives: []
    description: "The compression format to be used on the final h5mu object."
    example: []
    default:
    - "gzip"
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--other_axis_mode"
    alternatives: []
    description: "How to handle the merging of other axis (var, obs, ...).\n - None:\
      \ keep no data\n - same: only keep elements of the matrices which are the same\
      \ in each of the samples\n - unique: only keep elements for which there is only\
      \ 1 possible value (1 value that can occur in multiple samples)\n - first: keep\
      \ the annotation from the first sample\n - only: keep elements that show up\
      \ in only one of the objects (1 unique element in only 1 sample)\n - concat:\
      \ concatenate unique values together\n - move: identical to 'same', but moving\
      \ the conflicting values to .varm or .obsm\n"
    example: []
    default:
    - "move"
    required: false
    choices:
    - "same"
    - "unique"
    - "first"
    - "only"
    - "concat"
    - "move"
    direction: "input"
    multiple: false
    multiple_sep: ":"
  argument_groups: []
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      # concat integration_build
      # 
      # This wrapper script is auto-generated by viash 0.5.15 and is thus a derivative
      # work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
      # Intuitive.
      # 
      # The component may contain files which fall under a different license. The
      # authors of this component should specify the license in the header of such
      # files, or include a separate license file detailing the licenses of all included
      # files.
      # 
      # Component authors:
      #  * Dries Schaumont <Dschaumo@its.jnj.com> (maintainer)
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TEMP}
        VIASH_TEMP=${VIASH_TEMP:-/tmp}
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      VIASH_LOGCODE_EMERGENCY=0
      VIASH_LOGCODE_ALERT=1
      VIASH_LOGCODE_CRITICAL=2
      VIASH_LOGCODE_ERROR=3
      VIASH_LOGCODE_WARNING=4
      VIASH_LOGCODE_NOTICE=5
      VIASH_LOGCODE_INFO=6
      VIASH_LOGCODE_DEBUG=7
      VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '.
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '.
      function ViashEmergency {
        ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '.
      function ViashAlert {
        ViashLog $VIASH_LOGCODE_ALERT alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '.
      function ViashCritical {
        ViashLog $VIASH_LOGCODE_CRITICAL critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '.
      function ViashError {
        ViashLog $VIASH_LOGCODE_ERROR error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '.
      function ViashWarning {
        ViashLog $VIASH_LOGCODE_WARNING warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '.
      function ViashNotice {
        ViashLog $VIASH_LOGCODE_NOTICE notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '.
      function ViashInfo {
        ViashLog $VIASH_LOGCODE_INFO info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '.
      function ViashDebug {
        ViashLog $VIASH_LOGCODE_DEBUG debug $@
      }
      
      # find source folder of this component
      VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      # backwards compatibility
      VIASH_RESOURCES_DIR="$VIASH_META_RESOURCES_DIR"
      
      # define meta fields
      VIASH_META_FUNCTIONALITY_NAME="concat"
      VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "concat integration_build"
        echo ""
        echo "Concatenates several uni-modal samples in .h5mu files into a single file."
        echo ""
        echo "Arguments:"
        echo "    -i, --input"
        echo "        type: file, required parameter, multiple values allowed"
        echo "        example: sample_paths"
        echo "        Paths to the different samples to be concatenated."
        echo ""
        echo "    --sample_names"
        echo "        type: string, required parameter, multiple values allowed"
        echo "        example: sample_names"
        echo "        Names of the different samples that have to be concatenated. Must be of"
        echo "        same length as \`--input\`."
        echo ""
        echo "    -o, --output"
        echo "        type: file, output"
        echo "        example: output.h5mu"
        echo ""
        echo "    --obs_sample_name"
        echo "        type: string"
        echo "        default: sample_id"
        echo "        Name of the .obs key under which to add the sample names."
        echo ""
        echo "    --compression"
        echo "        type: string"
        echo "        default: gzip"
        echo "        The compression format to be used on the final h5mu object."
        echo ""
        echo "    --other_axis_mode"
        echo "        type: string"
        echo "        default: move"
        echo "        choices: [ same, unique, first, only, concat, move ]"
        echo "        How to handle the merging of other axis (var, obs, ...)."
        echo "         - None: keep no data"
        echo "         - same: only keep elements of the matrices which are the same in each"
        echo "        of the samples"
        echo "         - unique: only keep elements for which there is only 1 possible value"
        echo "        (1 value that can occur in multiple samples)"
        echo "         - first: keep the annotation from the first sample"
        echo "         - only: keep elements that show up in only one of the objects (1 unique"
        echo "        element in only 1 sample)"
        echo "         - concat: concatenate unique values together"
        echo "         - move: identical to 'same', but moving the conflicting values to .varm"
        echo "        or .obsm"
      }
      ######## Helper functions for setting up Docker images for viash ########
      # expects: ViashDockerBuild
      
      # ViashDockerInstallationCheck: check whether Docker is installed correctly
      #
      # examples:
      #   ViashDockerInstallationCheck
      function ViashDockerInstallationCheck {
        ViashDebug "Checking whether Docker is installed"
        if [ ! command -v docker &> /dev/null ]; then
          ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
          exit 1
        fi
      
        ViashDebug "Checking whether the Docker daemon is running"
        save=$-; set +e
        docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
        out=$?
        [[ $save =~ e ]] && set -e
        if [ $out -ne 0 ]; then
          ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
          ViashCritical "- Try running 'dockerd' in the command line"
          ViashCritical "- See https://docs.docker.com/config/daemon/"
          exit 1
        fi
      }
      
      # ViashDockerRemoteTagCheck: check whether a Docker image is available 
      # on a remote. Assumes `docker login` has been performed, if relevant.
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerRemoteTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerRemoteTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerRemoteTagCheck {
        docker manifest inspect $1 > /dev/null 2> /dev/null
      }
      
      # ViashDockerLocalTagCheck: check whether a Docker image is available locally
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   docker pull python:latest
      #   ViashDockerLocalTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerLocalTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerLocalTagCheck {
        [ -n "$(docker images -q $1)" ]
      }
      
      # ViashDockerPull: pull a Docker image
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerPull python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerPull sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerPull {
        ViashNotice "Checking if Docker image is available at '$1'"
        if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
          docker pull $1 && return 0 || return 1
        else
          save=$-; set +e
          docker pull $1 2> /dev/null > /dev/null
          out=$?
          [[ $save =~ e ]] && set -e
          if [ $out -ne 0 ]; then
            ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
          fi
          return $out
        fi
      }
      
      # ViashDockerPush: push a Docker image
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerPush python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerPush sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerPush {
        ViashNotice "Pushing image to '$1'"
        save=$-; set +e
        if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
          docker push $1
          out=$?
        else
          docker push $1 2> /dev/null > /dev/null
          out=$?
        fi
        [[ $save =~ e ]] && set -e
        if [ $out -eq 0 ]; then
          ViashNotice "Container '$VSHD_ID' push succeeded."
        else
          ViashError "Container '$VSHD_ID' push errored. You might not be logged in or have the necessary permissions."
        fi
        return $out
      }
      
      # ViashDockerPullElseBuild: pull a Docker image, else build it
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerPullElseBuild mynewcomponent
      function ViashDockerPullElseBuild {
        save=$-; set +e
        ViashDockerPull $1
        out=$?
        [[ $save =~ e ]] && set -e
        if [ $out -ne 0 ]; then
          ViashDockerBuild $@
        fi
      }
      
      # ViashDockerSetup: create a Docker image, according to specified docker setup strategy
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # $2                  : docker setup strategy, see DockerSetupStrategy.scala
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerSetup mynewcomponent alwaysbuild
      function ViashDockerSetup {
        VSHD_ID="$1"
        VSHD_STRAT="$2"
        if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
          ViashDockerBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
          ViashDockerPull $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
          ViashDockerBuild $VSHD_ID
        elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
          save=$-; set +e
          ViashDockerLocalTagCheck $VSHD_ID
          outCheck=$?
          [[ $save =~ e ]] && set -e
          if [ $outCheck -eq 0 ]; then
            ViashInfo "Image $VSHD_ID already exists"
          elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
            ViashDockerBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
            ViashDockerBuild $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
            ViashDockerPull $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID
          else
            ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
            exit 1
          fi
        elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
          ViashDockerPush "$VSHD_ID"
        elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
          save=$-; set +e
          ViashDockerRemoteTagCheck $VSHD_ID
          outCheck=$?
          [[ $save =~ e ]] && set -e
          if [ $outCheck -eq 0 ]; then
            ViashNotice "Container '$VSHD_ID' exists, doing nothing."
          else
            ViashNotice "Container '$VSHD_ID' does not yet exist."
            ViashDockerPush "$VSHD_ID"
          fi
        elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
          ViashNotice "Skipping setup."
        else
          ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
          exit 1
        fi
      }
      
      
      ######## End of helper functions for setting up Docker images for viash ########
      
      # ViashDockerFile: print the dockerfile to stdout
      # return : dockerfile required to run this component
      # examples:
      #   ViashDockerFile
      function ViashDockerfile {
        cat << 'VIASHDOCKER'
      FROM python:3.10
      
      RUN pip install --upgrade pip && \
        pip install --upgrade --no-cache-dir "muon" "mudata~=0.2.0" "anndata~=0.8.0"
      
      LABEL org.opencontainers.image.authors="Dries Schaumont <Dschaumo@its.jnj.com> (maintainer)"
      LABEL org.opencontainers.image.description="Companion container for running component integrate concat"
      LABEL org.opencontainers.image.created="2022-09-05T07:39:22Z"
      LABEL org.opencontainers.image.source="https://github.com/openpipelines-bio/openpipeline"
      LABEL org.opencontainers.image.revision="ec5ecb04c92389e194c1004ce2dbe1594832c143"
      LABEL org.opencontainers.image.version="integration_build"
      VIASHDOCKER
      }
      
      # ViashDockerBuild: build a docker container
      # $1              : image identifier with format `[registry/]image[:tag]`
      # exit code $?    : whether or not the image was built
      function ViashDockerBuild {
        # create temporary directory to store dockerfile & optional resources in
        tmpdir=$(mktemp -d "$VIASH_TEMP/viashsetupdocker-concat-XXXXXX")
        function clean_up {
          rm -rf "$tmpdir"
        }
        trap clean_up EXIT
      
        # store dockerfile and resources
        ViashDockerfile > $tmpdir/Dockerfile
        cp -r $VIASH_META_RESOURCES_DIR/* $tmpdir
      
        # Build the container
        ViashNotice "Building container '$1' with Dockerfile"
        ViashInfo "Running 'docker build -t $@ $tmpdir'"
        save=$-; set +e
        if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
          docker build -t $@ $tmpdir
        else
          docker build -t $@ $tmpdir &> $tmpdir/docker_build.log
        fi
        out=$?
        [[ $save =~ e ]] && set -e
        if [ $out -ne 0 ]; then
          ViashError "Error occurred while building container '$1'"
          if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
            ViashError "Transcript: --------------------------------"
            cat "$tmpdir/docker_build.log"
            ViashError "End of transcript --------------------------"
          fi
          exit 1
        fi
      }
      # ViashAbsolutePath: generate absolute path from relative path
      # borrowed from https://stackoverflow.com/a/21951256
      # $1     : relative filename
      # return : absolute path
      # examples:
      #   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
      #   ViashAbsolutePath /foo/bar/..     # returns /foo
      function ViashAbsolutePath {
        local thePath
        if [[ ! "$1" =~ ^/ ]]; then
          thePath="$PWD/$1"
        else
          thePath="$1"
        fi
        echo "$thePath" | (
          IFS=/
          read -a parr
          declare -a outp
          for i in "${parr[@]}"; do
            case "$i" in
            ''|.) continue ;;
            ..)
              len=${#outp[@]}
              if ((len==0)); then
                continue
              else
                unset outp[$((len-1))]
              fi
              ;;
            *)
              len=${#outp[@]}
              outp[$len]="$i"
            ;;
            esac
          done
          echo /"${outp[*]}"
        )
      }
      # ViashAutodetectMount: auto configuring docker mounts from parameters
      # $1                  : The parameter value
      # returns             : New parameter
      # $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
      # examples:
      #   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
      #   ViashAutodetectMountArg /path/to/bar   # returns '-v /path/to:/viash_automount/path/to'
      function ViashAutodetectMount {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "$mount_target/$base_name"
      }
      function ViashAutodetectMountArg {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "-v \"$mount_source:$mount_target\""
      }
      # ViashExtractFlags: Retain leading flag
      # $1     : string with a possible leading flag
      # return : leading flag
      # examples:
      #   ViashExtractFlags --foo=bar  # returns --foo
      function ViashExtractFlags {
        echo $1 | sed 's/=.*//'
      }
      # initialise variables
      VIASH_EXTRA_MOUNTS=''
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      VIASH_MODE='run'
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              ---v|---verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              ---verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              ---verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "concat integration_build"
                  exit
                  ;;
              --input)
                  if [ -z "$VIASH_PAR_INPUT" ]; then
                    VIASH_PAR_INPUT="$2"
                  else
                    VIASH_PAR_INPUT="$VIASH_PAR_INPUT,""$2"
                  fi
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --input=*)
                  if [ -z "$VIASH_PAR_INPUT" ]; then
                    VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
                  else
                    VIASH_PAR_INPUT="$VIASH_PAR_INPUT,"$(ViashRemoveFlags "$1")
                  fi
                  shift 1
                  ;;
              -i)
                  if [ -z "$VIASH_PAR_INPUT" ]; then
                    VIASH_PAR_INPUT="$2"
                  else
                    VIASH_PAR_INPUT="$VIASH_PAR_INPUT,""$2"
                  fi
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to -i. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --sample_names)
                  if [ -z "$VIASH_PAR_SAMPLE_NAMES" ]; then
                    VIASH_PAR_SAMPLE_NAMES="$2"
                  else
                    VIASH_PAR_SAMPLE_NAMES="$VIASH_PAR_SAMPLE_NAMES,""$2"
                  fi
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --sample_names. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --sample_names=*)
                  if [ -z "$VIASH_PAR_SAMPLE_NAMES" ]; then
                    VIASH_PAR_SAMPLE_NAMES=$(ViashRemoveFlags "$1")
                  else
                    VIASH_PAR_SAMPLE_NAMES="$VIASH_PAR_SAMPLE_NAMES,"$(ViashRemoveFlags "$1")
                  fi
                  shift 1
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -o)
                  VIASH_PAR_OUTPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to -o. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --obs_sample_name)
                  VIASH_PAR_OBS_SAMPLE_NAME="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_sample_name. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --obs_sample_name=*)
                  VIASH_PAR_OBS_SAMPLE_NAME=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --compression)
                  VIASH_PAR_COMPRESSION="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --compression. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --compression=*)
                  VIASH_PAR_COMPRESSION=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --other_axis_mode)
                  VIASH_PAR_OTHER_AXIS_MODE="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --other_axis_mode. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --other_axis_mode=*)
                  VIASH_PAR_OTHER_AXIS_MODE=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              ---setup)
                  VIASH_MODE='docker_setup'
                  VIASH_DOCKER_SETUP_STRATEGY="$2"
                  shift 1
                  ;;
              ---setup=*)
                  VIASH_MODE='docker_setup'
                  VIASH_DOCKER_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
                  shift 2
                  ;;
              ---dockerfile)
                  ViashDockerfile
                  exit 0
                  ;;
              ---v|---volume)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v "$2""
                  shift 2
                  ;;
              ---volume=*)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v $(ViashRemoveFlags "$2")"
                  shift 1
                  ;;
              ---debug)
                  VIASH_MODE='docker_debug'
                  shift 1
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      ViashDockerInstallationCheck
      if [ $VIASH_MODE == "docker_setup" ]; then
        ViashDockerSetup 'ghcr.io/openpipelines-bio/integrate_concat:integration_build' "$VIASH_DOCKER_SETUP_STRATEGY"
        exit 0
      fi
      ViashDockerSetup 'ghcr.io/openpipelines-bio/integrate_concat:integration_build' ifneedbepullelsecachedbuild
      if [ $VIASH_MODE == "docker_debug" ]; then
        ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/integrate_concat:integration_build'"
        docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/integrate_concat:integration_build'
        exit 0
      fi
      
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_INPUT" ]; then
        ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_SAMPLE_NAMES" ]; then
        ViashError '--sample_names' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OBS_SAMPLE_NAME" ]; then
        VIASH_PAR_OBS_SAMPLE_NAME="sample_id"
      fi
      if [ -z "$VIASH_PAR_COMPRESSION" ]; then
        VIASH_PAR_COMPRESSION="gzip"
      fi
      if [ -z "$VIASH_PAR_OTHER_AXIS_MODE" ]; then
        VIASH_PAR_OTHER_AXIS_MODE="move"
      fi
      
      
      # check whether parameters values are of the right type
      
      
      
      
      
      
      
      # check whether parameters values are of the right type
      
      
      
      
      
      if [ ! -z "$VIASH_PAR_OTHER_AXIS_MODE" ]; then
        VIASH_PAR_OTHER_AXIS_MODE_CHOICES=("same:unique:first:only:concat:move")
        IFS=:
        set -f
        if ! [[ ":${VIASH_PAR_OTHER_AXIS_MODE_CHOICES[*]}:" =~ ":$VIASH_PAR_OTHER_AXIS_MODE:" ]]; then
          ViashError '--other_axis_mode' specified value of \'$VIASH_PAR_OTHER_AXIS_MODE\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
          exit 1
        fi
        set +f
        unset IFS
      fi
      
      
      # detect volumes from file arguments
      if [ ! -z "$VIASH_PAR_INPUT" ]; then
        IFS=","
        for var in $VIASH_PAR_INPUT; do
          unset IFS
          VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$var")"
          if [ -z "$VIASH_TEST_INPUT" ]; then
            VIASH_TEST_INPUT="$(ViashAutodetectMount "$var")"
          else
            VIASH_TEST_INPUT="$VIASH_TEST_INPUT,""$(ViashAutodetectMount "$var")"
          fi
        done
        VIASH_PAR_INPUT="$VIASH_TEST_INPUT"
      fi
      if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT")"
        VIASH_PAR_OUTPUT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT")
      fi
      
      # Always mount the resource directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_META_RESOURCES_DIR")"
      VIASH_META_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_META_RESOURCES_DIR")
      VIASH_META_EXECUTABLE=$(ViashAutodetectMount "$VIASH_META_EXECUTABLE")
      
      # Always mount the VIASH_TEMP directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_TEMP")"
      VIASH_TEMP=$(ViashAutodetectMount "$VIASH_TEMP")
      # change file ownership
      function ViashPerformChown {
        
        if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/openpipelines-bio/integrate_concat:integration_build "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT"
        fi
      }
      trap ViashPerformChown EXIT
      
      
      cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/openpipelines-bio/integrate_concat:integration_build
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-concat-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      function interrupt {
        echo -e "\nCTRL-C Pressed..."
        exit 1
      }
      trap clean_up EXIT
      trap interrupt INT SIGINT
      cat > "\$tempscript" << 'VIASHMAIN'
      
      from __future__ import annotations
      import logging
      import anndata
      import muon as mu
      from sys import stdout
      import pandas as pd
      import numpy as np
      from collections.abc import Iterable
      
      ### VIASH START
      # The following code has been auto-generated by Viash.
      par = {
        'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "'${VIASH_PAR_INPUT//\'/\\\'}'.split(',')"; else echo None; fi ),
        'sample_names': $( if [ ! -z ${VIASH_PAR_SAMPLE_NAMES+x} ]; then echo "'${VIASH_PAR_SAMPLE_NAMES//\'/\\\'}'.split(',')"; else echo None; fi ),
        'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'${VIASH_PAR_OUTPUT//\'/\\\'}'"; else echo None; fi ),
        'obs_sample_name': $( if [ ! -z ${VIASH_PAR_OBS_SAMPLE_NAME+x} ]; then echo "'${VIASH_PAR_OBS_SAMPLE_NAME//\'/\\\'}'"; else echo None; fi ),
        'compression': $( if [ ! -z ${VIASH_PAR_COMPRESSION+x} ]; then echo "'${VIASH_PAR_COMPRESSION//\'/\\\'}'"; else echo None; fi ),
        'other_axis_mode': $( if [ ! -z ${VIASH_PAR_OTHER_AXIS_MODE+x} ]; then echo "'${VIASH_PAR_OTHER_AXIS_MODE//\'/\\\'}'"; else echo None; fi )
      }
      meta = {
        'functionality_name': '$VIASH_META_FUNCTIONALITY_NAME',
        'resources_dir': '$VIASH_META_RESOURCES_DIR',
        'executable': '$VIASH_META_EXECUTABLE',
        'temp_dir': '$VIASH_TEMP'
      }
      
      resources_dir = '$VIASH_META_RESOURCES_DIR'
      
      ### VIASH END
      
      logger = logging.getLogger()
      logger.setLevel(logging.INFO)
      console_handler = logging.StreamHandler(stdout)
      logFormatter = logging.Formatter("%(asctime)s %(levelname)-8s %(message)s")
      console_handler.setFormatter(logFormatter)
      logger.addHandler(console_handler)
      
      def add_sample_names(sample_ids: tuple[str], samples: Iterable[mu.MuData], obs_key_sample_name: str) -> None:
          """
          Add sample names to the observations for each sample.
          """
          for (sample_id, sample) in zip(sample_ids, samples):
              if obs_key_sample_name in sample.obs_keys():
                  logger.info(f'Column .obs["{obs_key_sample_name}"] already exists in sample "{sample_id}". Overriding the value for this column.')
                  samples.obs = sample.obs.drop(obs_key_sample_name, axis=1)
              for modality in sample.mod.values():
                  modality.obs[obs_key_sample_name] = sample_id
              sample.update()
      
      
      def make_observation_keys_unique(sample_ids: tuple[str], samples: Iterable[mu.MuData]) -> None:
          """
          Make the observation keys unique across all samples. At input,
          the observation keys are unique within a sample. By adding the sample name
          (unique for a sample) to each observation key, the observation key is made
          unique across all samples as well.
          """
          logger.info('Making observation keys unique across all samples.')
          for sample_id, sample in zip(sample_ids, samples):
              sample.obs.index = f"{sample_id}_" + sample.obs.index
              make_observation_keys_unique_per_mod(sample_id, sample)
      
      
      def make_observation_keys_unique_per_mod(sample_id: str, sample: mu.MuData) -> None:
          """
          Updating MuData.obs_names is not allowed (it is read-only).
          So the observation keys for each modality has to be updated manually.
          """
          for mod in sample.mod.values():
              mod.obs_names = f"{sample_id}_" + mod.obs_names
      
      
      def group_modalities(samples: Iterable[anndata.AnnData]) -> dict[str, anndata.AnnData]:
          """
          Split up the modalities of all samples and group them per modality.
          """
          mods = {}
          for sample in samples:
              for mod_name, mod in sample.mod.items():
                  mods.setdefault(mod_name, []).append(mod)
      
          if len(set(len(mod) for mod in mods.values())) != 1:
              logger.warning("One or more samples seem to have a different number of modalities.")
      
          logger.info("Successfully sorted modalities for the different samples.")
          return mods
      
      
      def concat_columns(vars_list: Iterable[pd.DataFrame]) -> pd.DataFrame:
          """
          Combine dataframes by joining matching columns into a comma-separated list
          containing unique, non-na values.
          """
          column_names = set(column_name for var in vars_list for column_name in var)
          logger.debug('Trying to concatenate columns: %s.', ",".join(column_names))
          if not column_names:
              return pd.DataFrame()
          df = pd.concat(vars_list, axis=1)
          logger.debug('Concatenated dataframe. Aggregating column.')
          result = df.groupby(df.columns, axis=1).agg(lambda x: x.apply(lambda y: ','.join(y.dropna().unique().astype('str')), axis=1))
          logger.info('Aggregation completed.')
          dtypes = {}
          for col_name in column_names:
              for var in vars_list:
                  col = var.get(col_name, None)
                  if col is not None and col_name not in dtypes:
                      dtypes[col_name] = col.dtype
          result.replace('', np.nan, inplace=True)
          result = concat_result_cast_dtype(result, orignal_dtypes=dtypes)
          logger.debug('Finished concatenating. Result is:\\n%s', result)
          return result
      
      
      def concat_result_cast_dtype(result: pd.DataFrame,
                                   orignal_dtypes: dict[str, pd.core.dtypes.dtypes.Dtype]) -> pd.DataFrame:
          logger.debug('Trying to cast to "category" or keep original datatype.')
          for col_name, orig_dtype in orignal_dtypes.items():
              try:
                  result = result.astype({col_name: "category"}, copy=True)
              except (ValueError, TypeError):
                  try:
                      result = result.astype({col_name: orig_dtype}, copy=True)
                  except (ValueError, TypeError):
                      logger.warning("Could not keep datatype for column %s", col_name)
          return result
      
      def any_row_contains_duplicate_values(frame: pd.DataFrame) -> bool:
          """
          Check if any row contains duplicate values, that are not NA.
          """
          number_of_unique = frame.nunique(axis=1, dropna=True)
          non_na_counts = frame.count(axis=1)
          is_duplicated = (number_of_unique - non_na_counts) != 0
          return is_duplicated.any()
      
      def split_conflicts_matrices(sample_ids: tuple[str], matrices: Iterable[pd.DataFrame]) \\
          -> tuple[dict[str, pd.DataFrame], pd.DataFrame | None]:
          """
          Merge matrices by combining columns that have the same name.
          Columns that contain conflicting values (e.i. the columns have different values),
          are not merged, but instead moved to a new dataframe.
          """
          column_names = set(column_name for var in matrices for column_name in var)
          logger.debug('Trying to concatenate columns: %s.', ",".join(column_names))
          if not column_names:
              return {}, None
          conflicts = {}
          concatenated_matrix = pd.DataFrame()
          for column_name in column_names:
              columns = [var[column_name] for var in matrices if column_name in var]
              assert columns, "Some columns should have been found."
              concatenated_columns = pd.concat(columns, axis=1)
              if any_row_contains_duplicate_values(concatenated_columns):
                  concatenated_columns.columns = sample_ids
                  conflicts[f'conflict_{column_name}'] = concatenated_columns
              else:
                  unique_values = concatenated_columns.fillna(method='bfill', axis=1).iloc[:, 0]
                  concatenated_matrix = concatenated_matrix.assign(**{column_name: unique_values})
          return conflicts, concatenated_matrix
      
      def split_conflicts_modalities(sample_ids: tuple[str], modalities: Iterable[anndata.AnnData]) \\
              -> tuple[dict[str, dict[str, pd.DataFrame]],  dict[str, pd.DataFrame | None]]:
              """
              Merge .var and .obs matrices of the anndata objects. Columns are merged
              when the values (excl NA) are the same in each of the matrices.
              Conflicting columns are moved to a separate dataframe (one dataframe for each column, 
              containing all the corresponding column from each sample). 
              """
              matrices_to_parse = ("var", "obs")
              concatenated_result = {}
              conflicts_result = {}
              for matrix_name in matrices_to_parse:
                  matrices = [getattr(modality, matrix_name) for modality in modalities]
                  conflicts, concatenated_matrix = split_conflicts_matrices(sample_ids, matrices)
                  conflicts_result[f"{matrix_name}m"] = conflicts
                  concatenated_result[matrix_name] = concatenated_matrix
              return conflicts_result, concatenated_result
      
      def set_matrices(concatenated_data: mu.MuData, 
                       mod_name: str,
                       new_matrices: dict[str, pd.DataFrame | None]) -> mu.MuData:
          mod = concatenated_data.mod[mod_name]
          for matrix_name, data in new_matrices.items():
              if data is None:
                  data = pd.DataFrame(index=getattr(mod, matrix_name).index)
              setattr(mod, matrix_name, data)
          return concatenated_data
      
      def set_conflicts(concatenated_data: mu.MuData,
                        mod_name: str,
                        conflicts: dict[str, dict[str, pd.DataFrame]]) -> mu.MuData:
          mod = concatenated_data.mod[mod_name]
          for conflict_matrix_name, conflict in conflicts.items():
              for conflict_name, conflict_data in conflict.items():
                  getattr(mod, conflict_matrix_name)[conflict_name] = conflict_data.sort_index()
          return concatenated_data
      
      def concatenate_modalities(sample_ids: tuple[str], modalities: dict[str, Iterable[anndata.AnnData]],
                                 other_axis_mode: str) -> mu.MuData:
          """
          Join the modalities together into a single multimodal sample.
          """
          logger.info('Concatenating samples.')
          concat_modes = {
              "concat": concat_columns,
              "move": "same",
          }
          other_axis_mode_to_apply = concat_modes.get(other_axis_mode, other_axis_mode)
          new_mods = {mod_name: anndata.concat(modes,
                                               join='outer',
                                               merge=other_axis_mode_to_apply)
                      for mod_name, modes in modalities.items()}
          concatenated_data = mu.MuData(new_mods)
          if other_axis_mode == "move":
              for mod_name, modes in modalities.items():
                  conflicts, new_matrices = split_conflicts_modalities(sample_ids, modes)
                  concatenated_data = set_conflicts(concatenated_data, mod_name, conflicts)
                  concatenated_data = set_matrices(concatenated_data, mod_name, new_matrices)
          logger.info("Concatenation successful.")
          return concatenated_data
      
      
      def main() -> None:
          # Read in sample names and sample .h5mu files
          sample_ids: tuple[str] = tuple(i.strip() for i in par["sample_names"])
          samples: list[mu.MuData] = [mu.read(path.strip()) for path in par["input"]]
      
          if len(sample_ids) != len(samples):
              raise ValueError("The number of sample names must match the number of sample files.")
      
          if len(set(par["sample_names"])) != len(par["sample_names"]):
              raise ValueError("The sample names should be unique.")
      
          logger.info("\\nConcatenating data for:\\n\\t%s\\nFrom paths:\\n\\t%s",
                      "\\n\\t".join(sample_ids),
                      "\\n\\t".join(par["input"]))
      
          add_sample_names(sample_ids, samples, par["obs_sample_name"])
          make_observation_keys_unique(sample_ids, samples)
      
          mods = group_modalities(samples)
          concatenated_samples = concatenate_modalities(sample_ids, mods, par["other_axis_mode"])
          logger.info("Writing out data to '%s' with compression '%s'.",
                      par["output"], par["compression"])
          concatenated_samples.write(par["output"], compression=par["compression"])
      
      
      if __name__ == "__main__":
          main()
      
      VIASHMAIN
      python "\$tempscript" &
      wait "\$!"
      
      VIASHEOF
      

    dest: "concat"
    is_executable: true
  description: "Concatenates several uni-modal samples in .h5mu files into a single\
    \ file.\n"
  test_resources:
  - type: "python_script"
    path: "test.py"
    is_executable: true
  - type: "file"
    path: "../../../resources_test/concat/e18_mouse_brain_fresh_5k_filtered_feature_bc_matrix_subset.h5mu"
  - type: "file"
    path: "../../../resources_test/concat/human_brain_3k_filtered_feature_bc_matrix_subset.h5mu"
  info: {}
  dummy_arguments: []
  set_wd_to_resources_dir: false
  enabled: true
platform:
  type: "docker"
  id: "docker"
  image: "python:3.10"
  target_organization: "openpipelines-bio"
  target_registry: "ghcr.io"
  namespace_separator: "_"
  resolve_volume: "Automatic"
  chown: true
  port: []
  setup_strategy: "ifneedbepullelsecachedbuild"
  privileged: false
  run_args: []
  target_image_source: "https://github.com/openpipelines-bio/openpipeline"
  setup: []
  python:
    user: false
    packages:
    - "muon"
    - "mudata~=0.2.0"
    - "anndata~=0.8.0"
    pip: []
    pypi: []
    git: []
    github: []
    gitlab: []
    mercurial: []
    svn: []
    bazaar: []
    url: []
    script: []
    upgrade: true
    type: "python"
  test_setup: []
platforms: []
info:
  config: "src/integrate/concat/config.vsh.yaml"
  platform: "docker"
  output: "target/docker/integrate/concat"
  executable: "target/docker/integrate/concat/concat"
  viash_version: "0.5.15"
  git_commit: "ec5ecb04c92389e194c1004ce2dbe1594832c143"
  git_remote: "https://github.com/openpipelines-bio/openpipeline"
