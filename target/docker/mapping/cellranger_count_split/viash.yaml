functionality:
  name: "cellranger_count_split"
  namespace: "mapping"
  version: "integration_build"
  authors:
  - name: "Angela Pisco"
    roles:
    - "author"
    props:
      github: "aopisco"
      orcid: "0000-0003-0142-2355"
  - name: "Samuel D'Souza"
    roles:
    - "author"
    props:
      github: "srdsam"
  - name: "Robrecht Cannoodt"
    email: "rcannood@gmail.com"
    roles:
    - "author"
    - "maintainer"
    props:
      github: "rcannood"
      orcid: "0000-0003-3641-729X"
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--input"
    alternatives: []
    description: "Output directory from a Cell Ranger count run."
    example:
    - "input_dir"
    default: []
    must_exist: false
    required: true
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--filtered_h5"
    alternatives: []
    example:
    - "filtered_feature_bc_matrix.h5"
    default: []
    must_exist: false
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--metrics_summary"
    alternatives: []
    example:
    - "metrics_summary.csv"
    default: []
    must_exist: false
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--molecule_info"
    alternatives: []
    example:
    - "molecule_info.h5"
    default: []
    must_exist: false
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--bam"
    alternatives: []
    example:
    - "possorted_genome_bam.bam"
    default: []
    must_exist: false
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--bai"
    alternatives: []
    example:
    - "possorted_genome_bam.bam.bai"
    default: []
    must_exist: false
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--raw_h5"
    alternatives: []
    example:
    - "raw_feature_bc_matrix.h5"
    default: []
    must_exist: false
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
  argument_groups: []
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      # cellranger_count_split integration_build
      # 
      # This wrapper script is auto-generated by viash 0.6.0 and is thus a derivative
      # work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
      # Intuitive.
      # 
      # The component may contain files which fall under a different license. The
      # authors of this component should specify the license in the header of such
      # files, or include a separate license file detailing the licenses of all included
      # files.
      # 
      # Component authors:
      #  * Angela Pisco (author) {github: aopisco, orcid: 0000-0003-0142-2355}
      #  * Samuel D'Souza (author) {github: srdsam}
      #  * Robrecht Cannoodt <rcannood@gmail.com> (author, maintainer) {github:
      # rcannood, orcid: 0000-0003-3641-729X}
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TEMP}
        VIASH_TEMP=${VIASH_TEMP:-/tmp}
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      VIASH_LOGCODE_EMERGENCY=0
      VIASH_LOGCODE_ALERT=1
      VIASH_LOGCODE_CRITICAL=2
      VIASH_LOGCODE_ERROR=3
      VIASH_LOGCODE_WARNING=4
      VIASH_LOGCODE_NOTICE=5
      VIASH_LOGCODE_INFO=6
      VIASH_LOGCODE_DEBUG=7
      VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '.
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '.
      function ViashEmergency {
        ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '.
      function ViashAlert {
        ViashLog $VIASH_LOGCODE_ALERT alert "$@"
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '.
      function ViashCritical {
        ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '.
      function ViashError {
        ViashLog $VIASH_LOGCODE_ERROR error "$@"
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '.
      function ViashWarning {
        ViashLog $VIASH_LOGCODE_WARNING warning "$@"
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '.
      function ViashNotice {
        ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '.
      function ViashInfo {
        ViashLog $VIASH_LOGCODE_INFO info "$@"
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '.
      function ViashDebug {
        ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
      }
      
      # find source folder of this component
      VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      # backwards compatibility
      VIASH_RESOURCES_DIR="$VIASH_META_RESOURCES_DIR"
      
      # define meta fields
      VIASH_META_FUNCTIONALITY_NAME="cellranger_count_split"
      VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "cellranger_count_split integration_build"
        echo ""
        echo "Split 10x Cell Ranger output directory into separate output fields."
        echo ""
        echo "Arguments:"
        echo "    --input"
        echo "        type: file, required parameter"
        echo "        example: input_dir"
        echo "        Output directory from a Cell Ranger count run."
        echo ""
        echo "    --filtered_h5"
        echo "        type: file, output"
        echo "        example: filtered_feature_bc_matrix.h5"
        echo ""
        echo "    --metrics_summary"
        echo "        type: file, output"
        echo "        example: metrics_summary.csv"
        echo ""
        echo "    --molecule_info"
        echo "        type: file, output"
        echo "        example: molecule_info.h5"
        echo ""
        echo "    --bam"
        echo "        type: file, output"
        echo "        example: possorted_genome_bam.bam"
        echo ""
        echo "    --bai"
        echo "        type: file, output"
        echo "        example: possorted_genome_bam.bam.bai"
        echo ""
        echo "    --raw_h5"
        echo "        type: file, output"
        echo "        example: raw_feature_bc_matrix.h5"
      }
      ######## Helper functions for setting up Docker images for viash ########
      # expects: ViashDockerBuild
      
      # ViashDockerInstallationCheck: check whether Docker is installed correctly
      #
      # examples:
      #   ViashDockerInstallationCheck
      function ViashDockerInstallationCheck {
        ViashDebug "Checking whether Docker is installed"
        if [ ! command -v docker &> /dev/null ]; then
          ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
          exit 1
        fi
      
        ViashDebug "Checking whether the Docker daemon is running"
        save=$-; set +e
        docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
        out=$?
        [[ $save =~ e ]] && set -e
        if [ $out -ne 0 ]; then
          ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
          ViashCritical "- Try running 'dockerd' in the command line"
          ViashCritical "- See https://docs.docker.com/config/daemon/"
          exit 1
        fi
      }
      
      # ViashDockerRemoteTagCheck: check whether a Docker image is available 
      # on a remote. Assumes `docker login` has been performed, if relevant.
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerRemoteTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerRemoteTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerRemoteTagCheck {
        docker manifest inspect $1 > /dev/null 2> /dev/null
      }
      
      # ViashDockerLocalTagCheck: check whether a Docker image is available locally
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   docker pull python:latest
      #   ViashDockerLocalTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerLocalTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerLocalTagCheck {
        [ -n "$(docker images -q $1)" ]
      }
      
      # ViashDockerPull: pull a Docker image
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerPull python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerPull sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerPull {
        ViashNotice "Checking if Docker image is available at '$1'"
        if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
          docker pull $1 && return 0 || return 1
        else
          save=$-; set +e
          docker pull $1 2> /dev/null > /dev/null
          out=$?
          [[ $save =~ e ]] && set -e
          if [ $out -ne 0 ]; then
            ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
          fi
          return $out
        fi
      }
      
      # ViashDockerPush: push a Docker image
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerPush python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerPush sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerPush {
        ViashNotice "Pushing image to '$1'"
        save=$-; set +e
        if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
          docker push $1
          out=$?
        else
          docker push $1 2> /dev/null > /dev/null
          out=$?
        fi
        [[ $save =~ e ]] && set -e
        if [ $out -eq 0 ]; then
          ViashNotice "Container '$VSHD_ID' push succeeded."
        else
          ViashError "Container '$VSHD_ID' push errored. You might not be logged in or have the necessary permissions."
        fi
        return $out
      }
      
      # ViashDockerPullElseBuild: pull a Docker image, else build it
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerPullElseBuild mynewcomponent
      function ViashDockerPullElseBuild {
        save=$-; set +e
        ViashDockerPull $1
        out=$?
        [[ $save =~ e ]] && set -e
        if [ $out -ne 0 ]; then
          ViashDockerBuild $@
        fi
      }
      
      # ViashDockerSetup: create a Docker image, according to specified docker setup strategy
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # $2                  : docker setup strategy, see DockerSetupStrategy.scala
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerSetup mynewcomponent alwaysbuild
      function ViashDockerSetup {
        VSHD_ID="$1"
        VSHD_STRAT="$2"
        if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
          ViashDockerBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
          ViashDockerPull $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
          ViashDockerBuild $VSHD_ID
        elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
          save=$-; set +e
          ViashDockerLocalTagCheck $VSHD_ID
          outCheck=$?
          [[ $save =~ e ]] && set -e
          if [ $outCheck -eq 0 ]; then
            ViashInfo "Image $VSHD_ID already exists"
          elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
            ViashDockerBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
            ViashDockerBuild $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
            ViashDockerPull $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID
          else
            ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
            exit 1
          fi
        elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
          ViashDockerPush "$VSHD_ID"
        elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
          save=$-; set +e
          ViashDockerRemoteTagCheck $VSHD_ID
          outCheck=$?
          [[ $save =~ e ]] && set -e
          if [ $outCheck -eq 0 ]; then
            ViashNotice "Container '$VSHD_ID' exists, doing nothing."
          else
            ViashNotice "Container '$VSHD_ID' does not yet exist."
            ViashDockerPush "$VSHD_ID"
          fi
        elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
          ViashNotice "Skipping setup."
        else
          ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
          exit 1
        fi
      }
      
      # ViashDockerCheckCommands: Check whether a docker container has the required commands
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # $@                  : commands to verify being present
      # examples:
      #   ViashDockerCheckCommands bash:4.0 bash ps foo
      function ViashDockerCheckCommands {
        tag=$1
        shift 1
        commands="$@"
        save=$-; set +e
        missing=$(docker run --rm --entrypoint=sh $tag -c "for command in $commands; do command -v \$command >/dev/null 2>&1; if [ \$? -ne 0 ]; then echo \$command; exit 1; fi; done")
        outCheck=$?
        [[ $save =~ e ]] && set -e
        if [ $outCheck -ne 0 ]; then
        	ViashError "Docker container '$tag' does not contain command '$missing'."
        	exit 1
        fi
      }
      
      
      ######## End of helper functions for setting up Docker images for viash ########
      
      # ViashDockerFile: print the dockerfile to stdout
      # return : dockerfile required to run this component
      # examples:
      #   ViashDockerFile
      function ViashDockerfile {
        cat << 'VIASHDOCKER'
      FROM ubuntu:jammy
      
      RUN apt update && apt upgrade -y
      LABEL org.opencontainers.image.authors="Angela Pisco (author) {github: aopisco, orcid: 0000-0003-0142-2355}, Samuel D'Souza (author) {github: srdsam}, Robrecht Cannoodt <rcannood@gmail.com> (author, maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}"
      LABEL org.opencontainers.image.description="Companion container for running component mapping cellranger_count_split"
      LABEL org.opencontainers.image.created="2022-09-08T10:27:12Z"
      LABEL org.opencontainers.image.source="https://github.com/openpipelines-bio/openpipeline"
      LABEL org.opencontainers.image.revision="346d4a44c87fff18a2ac36f7859222ada2929c53"
      LABEL org.opencontainers.image.version="integration_build"
      VIASHDOCKER
      }
      
      # ViashDockerBuild: build a docker container
      # $1              : image identifier with format `[registry/]image[:tag]`
      # exit code $?    : whether or not the image was built
      function ViashDockerBuild {
        # create temporary directory to store dockerfile & optional resources in
        tmpdir=$(mktemp -d "$VIASH_TEMP/viashsetupdocker-cellranger_count_split-XXXXXX")
        function clean_up {
          rm -rf "$tmpdir"
        }
        trap clean_up EXIT
      
        # store dockerfile and resources
        ViashDockerfile > $tmpdir/Dockerfile
        cp -r $VIASH_META_RESOURCES_DIR/* $tmpdir
      
        # Build the container
        ViashNotice "Building container '$1' with Dockerfile"
        ViashInfo "Running 'docker build -t $@ $tmpdir'"
        save=$-; set +e
        if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
          docker build -t $@ $tmpdir
        else
          docker build -t $@ $tmpdir &> $tmpdir/docker_build.log
        fi
        out=$?
        [[ $save =~ e ]] && set -e
        if [ $out -ne 0 ]; then
          ViashError "Error occurred while building container '$1'"
          if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
            ViashError "Transcript: --------------------------------"
            cat "$tmpdir/docker_build.log"
            ViashError "End of transcript --------------------------"
          fi
          exit 1
        fi
        ViashDockerCheckCommands "$1" 'bash'
      }
      # ViashAbsolutePath: generate absolute path from relative path
      # borrowed from https://stackoverflow.com/a/21951256
      # $1     : relative filename
      # return : absolute path
      # examples:
      #   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
      #   ViashAbsolutePath /foo/bar/..     # returns /foo
      function ViashAbsolutePath {
        local thePath
        if [[ ! "$1" =~ ^/ ]]; then
          thePath="$PWD/$1"
        else
          thePath="$1"
        fi
        echo "$thePath" | (
          IFS=/
          read -a parr
          declare -a outp
          for i in "${parr[@]}"; do
            case "$i" in
            ''|.) continue ;;
            ..)
              len=${#outp[@]}
              if ((len==0)); then
                continue
              else
                unset outp[$((len-1))]
              fi
              ;;
            *)
              len=${#outp[@]}
              outp[$len]="$i"
            ;;
            esac
          done
          echo /"${outp[*]}"
        )
      }
      # ViashAutodetectMount: auto configuring docker mounts from parameters
      # $1                  : The parameter value
      # returns             : New parameter
      # $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
      # examples:
      #   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
      #   ViashAutodetectMountArg /path/to/bar   # returns '-v /path/to:/viash_automount/path/to'
      function ViashAutodetectMount {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "$mount_target/$base_name"
      }
      function ViashAutodetectMountArg {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "-v \"$mount_source:$mount_target\""
      }
      # ViashExtractFlags: Retain leading flag
      # $1     : string with a possible leading flag
      # return : leading flag
      # examples:
      #   ViashExtractFlags --foo=bar  # returns --foo
      function ViashExtractFlags {
        echo $1 | sed 's/=.*//'
      }
      # initialise variables
      VIASH_EXTRA_MOUNTS=''
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      VIASH_MODE='run'
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              ---v|---verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              ---verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              ---verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "cellranger_count_split integration_build"
                  exit
                  ;;
              --input)
                  [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_INPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --input=*)
                  [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input=*\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --filtered_h5)
                  [ -n "$VIASH_PAR_FILTERED_H5" ] && ViashError Bad arguments for option \'--filtered_h5\': \'$VIASH_PAR_FILTERED_H5\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_FILTERED_H5="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --filtered_h5. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --filtered_h5=*)
                  [ -n "$VIASH_PAR_FILTERED_H5" ] && ViashError Bad arguments for option \'--filtered_h5=*\': \'$VIASH_PAR_FILTERED_H5\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_FILTERED_H5=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --metrics_summary)
                  [ -n "$VIASH_PAR_METRICS_SUMMARY" ] && ViashError Bad arguments for option \'--metrics_summary\': \'$VIASH_PAR_METRICS_SUMMARY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_METRICS_SUMMARY="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --metrics_summary. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --metrics_summary=*)
                  [ -n "$VIASH_PAR_METRICS_SUMMARY" ] && ViashError Bad arguments for option \'--metrics_summary=*\': \'$VIASH_PAR_METRICS_SUMMARY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_METRICS_SUMMARY=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --molecule_info)
                  [ -n "$VIASH_PAR_MOLECULE_INFO" ] && ViashError Bad arguments for option \'--molecule_info\': \'$VIASH_PAR_MOLECULE_INFO\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_MOLECULE_INFO="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --molecule_info. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --molecule_info=*)
                  [ -n "$VIASH_PAR_MOLECULE_INFO" ] && ViashError Bad arguments for option \'--molecule_info=*\': \'$VIASH_PAR_MOLECULE_INFO\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_MOLECULE_INFO=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --bam)
                  [ -n "$VIASH_PAR_BAM" ] && ViashError Bad arguments for option \'--bam\': \'$VIASH_PAR_BAM\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_BAM="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --bam. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --bam=*)
                  [ -n "$VIASH_PAR_BAM" ] && ViashError Bad arguments for option \'--bam=*\': \'$VIASH_PAR_BAM\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_BAM=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --bai)
                  [ -n "$VIASH_PAR_BAI" ] && ViashError Bad arguments for option \'--bai\': \'$VIASH_PAR_BAI\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_BAI="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --bai. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --bai=*)
                  [ -n "$VIASH_PAR_BAI" ] && ViashError Bad arguments for option \'--bai=*\': \'$VIASH_PAR_BAI\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_BAI=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --raw_h5)
                  [ -n "$VIASH_PAR_RAW_H5" ] && ViashError Bad arguments for option \'--raw_h5\': \'$VIASH_PAR_RAW_H5\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_RAW_H5="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --raw_h5. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --raw_h5=*)
                  [ -n "$VIASH_PAR_RAW_H5" ] && ViashError Bad arguments for option \'--raw_h5=*\': \'$VIASH_PAR_RAW_H5\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_PAR_RAW_H5=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              ---setup)
                  VIASH_MODE='docker_setup'
                  VIASH_DOCKER_SETUP_STRATEGY="$2"
                  shift 1
                  ;;
              ---setup=*)
                  VIASH_MODE='docker_setup'
                  VIASH_DOCKER_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
                  shift 2
                  ;;
              ---dockerfile)
                  ViashDockerfile
                  exit 0
                  ;;
              ---v|---volume)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v "$2""
                  shift 2
                  ;;
              ---volume=*)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v $(ViashRemoveFlags "$2")"
                  shift 1
                  ;;
              ---debug)
                  VIASH_MODE='docker_debug'
                  shift 1
                  ;;
              ---n_proc)
                  [ -n "$VIASH_META_N_PROC" ] && ViashError Bad arguments for option \'---n_proc\': \'$VIASH_META_N_PROC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_META_N_PROC="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to ---n_proc. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              ---n_proc=*)
                  [ -n "$VIASH_META_N_PROC" ] && ViashError Bad arguments for option \'---n_proc=*\': \'$VIASH_META_N_PROC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_META_N_PROC=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              ---memory)
                  [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_META_MEMORY="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              ---memory=*)
                  [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
                  VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      ViashDockerInstallationCheck
      if [ $VIASH_MODE == "docker_setup" ]; then
        ViashDockerSetup 'ghcr.io/openpipelines-bio/mapping_cellranger_count_split:integration_build' "$VIASH_DOCKER_SETUP_STRATEGY"
        exit 0
      fi
      ViashDockerSetup 'ghcr.io/openpipelines-bio/mapping_cellranger_count_split:integration_build' ifneedbepullelsecachedbuild
      if [ $VIASH_MODE == "docker_debug" ]; then
        ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/mapping_cellranger_count_split:integration_build'"
        docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/mapping_cellranger_count_split:integration_build'
        exit 0
      fi
      
      # helper function for parsing memory strings
      function ViashMemoryAsBytes {
        local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
        local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
        if [[ $memory =~ $memory_regex ]]; then
          local number=${memory/[^0-9]*/}
          local symbol=${memory/*[0-9]/}
          
          case $symbol in
            b)      memory_b=$number ;;
            kb|k)   memory_b=$(( $number * 1024 )) ;;
            mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
            gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
            tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
            pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
          esac
          echo "$memory_b"
        fi
      }
      # compute memory in different units
      if [ ! -z ${VIASH_META_MEMORY+x} ]; then
        VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
        # do not define other variables if memory_b is an empty string
        if [ ! -z "$VIASH_META_MEMORY_B" ]; then
          VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
          VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
          VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
          VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
          VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
        else
          # unset memory if string is empty
          unset $VIASH_META_MEMORY_B
        fi
      fi
      # unset nproc if string is empty
      if [ -z "$VIASH_META_N_PROC" ]; then
        unset $VIASH_META_N_PROC
      fi
      
      
      
      
      # check whether required parameters exist
      if [ -z ${VIASH_PAR_INPUT+x} ]; then
        ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      
      
      
      # check whether parameters values are of the right type
      
      
      # check whether parameters values are of the right type
      
      
      
      
      
      
      
      
      # detect volumes from file arguments
      if [ ! -z "$VIASH_PAR_INPUT" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_INPUT")"
        VIASH_PAR_INPUT=$(ViashAutodetectMount "$VIASH_PAR_INPUT")
      fi
      if [ ! -z "$VIASH_PAR_FILTERED_H5" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_FILTERED_H5")"
        VIASH_PAR_FILTERED_H5=$(ViashAutodetectMount "$VIASH_PAR_FILTERED_H5")
      fi
      if [ ! -z "$VIASH_PAR_METRICS_SUMMARY" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_METRICS_SUMMARY")"
        VIASH_PAR_METRICS_SUMMARY=$(ViashAutodetectMount "$VIASH_PAR_METRICS_SUMMARY")
      fi
      if [ ! -z "$VIASH_PAR_MOLECULE_INFO" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_MOLECULE_INFO")"
        VIASH_PAR_MOLECULE_INFO=$(ViashAutodetectMount "$VIASH_PAR_MOLECULE_INFO")
      fi
      if [ ! -z "$VIASH_PAR_BAM" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_BAM")"
        VIASH_PAR_BAM=$(ViashAutodetectMount "$VIASH_PAR_BAM")
      fi
      if [ ! -z "$VIASH_PAR_BAI" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_BAI")"
        VIASH_PAR_BAI=$(ViashAutodetectMount "$VIASH_PAR_BAI")
      fi
      if [ ! -z "$VIASH_PAR_RAW_H5" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_RAW_H5")"
        VIASH_PAR_RAW_H5=$(ViashAutodetectMount "$VIASH_PAR_RAW_H5")
      fi
      
      # Always mount the resource directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_META_RESOURCES_DIR")"
      VIASH_META_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_META_RESOURCES_DIR")
      VIASH_META_EXECUTABLE=$(ViashAutodetectMount "$VIASH_META_EXECUTABLE")
      
      # Always mount the VIASH_TEMP directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_TEMP")"
      VIASH_TEMP=$(ViashAutodetectMount "$VIASH_TEMP")
      # change file ownership
      function ViashPerformChown {
        
        if [ ! -z "$VIASH_PAR_FILTERED_H5" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/openpipelines-bio/mapping_cellranger_count_split:integration_build "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_FILTERED_H5"
        fi
        if [ ! -z "$VIASH_PAR_METRICS_SUMMARY" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/openpipelines-bio/mapping_cellranger_count_split:integration_build "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_METRICS_SUMMARY"
        fi
        if [ ! -z "$VIASH_PAR_MOLECULE_INFO" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/openpipelines-bio/mapping_cellranger_count_split:integration_build "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_MOLECULE_INFO"
        fi
        if [ ! -z "$VIASH_PAR_BAM" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/openpipelines-bio/mapping_cellranger_count_split:integration_build "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_BAM"
        fi
        if [ ! -z "$VIASH_PAR_BAI" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/openpipelines-bio/mapping_cellranger_count_split:integration_build "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_BAI"
        fi
        if [ ! -z "$VIASH_PAR_RAW_H5" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/openpipelines-bio/mapping_cellranger_count_split:integration_build "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_RAW_H5"
        fi
      }
      trap ViashPerformChown EXIT
      
      # helper function for filling in extra docker args
      VIASH_EXTRA_DOCKER_ARGS=""
      if [ ! -z "$VIASH_META_MEMORY_MB" ]; then
        VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --memory=${VIASH_META_MEMORY_MB}m"
      fi
      if [ ! -z "$VIASH_META_N_PROC" ]; then
        VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --cpus=${VIASH_META_N_PROC}"
      fi
      
      cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm $VIASH_EXTRA_MOUNTS $VIASH_EXTRA_DOCKER_ARGS ghcr.io/openpipelines-bio/mapping_cellranger_count_split:integration_build
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-cellranger_count_split-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      function interrupt {
        echo -e "\nCTRL-C Pressed..."
        exit 1
      }
      trap clean_up EXIT
      trap interrupt INT SIGINT
      cat > "\$tempscript" << 'VIASHMAIN'
      
      #!/bin/bash
      
      ## VIASH START
      # The following code has been auto-generated by Viash.
      $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "par_input='${VIASH_PAR_INPUT//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_PAR_FILTERED_H5+x} ]; then echo "par_filtered_h5='${VIASH_PAR_FILTERED_H5//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_PAR_METRICS_SUMMARY+x} ]; then echo "par_metrics_summary='${VIASH_PAR_METRICS_SUMMARY//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_PAR_MOLECULE_INFO+x} ]; then echo "par_molecule_info='${VIASH_PAR_MOLECULE_INFO//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_PAR_BAM+x} ]; then echo "par_bam='${VIASH_PAR_BAM//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_PAR_BAI+x} ]; then echo "par_bai='${VIASH_PAR_BAI//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_PAR_RAW_H5+x} ]; then echo "par_raw_h5='${VIASH_PAR_RAW_H5//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "meta_functionality_name='${VIASH_META_FUNCTIONALITY_NAME//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "meta_resources_dir='${VIASH_META_RESOURCES_DIR//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "meta_executable='${VIASH_META_EXECUTABLE//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_TEMP+x} ]; then echo "meta_temp_dir='${VIASH_TEMP//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_N_PROC+x} ]; then echo "meta_n_proc='${VIASH_META_N_PROC//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "meta_memory_b='${VIASH_META_MEMORY_B//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "meta_memory_kb='${VIASH_META_MEMORY_KB//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "meta_memory_mb='${VIASH_META_MEMORY_MB//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "meta_memory_gb='${VIASH_META_MEMORY_GB//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "meta_memory_tb='${VIASH_META_MEMORY_TB//\'/\'\"\'\"\'}'"; fi )
      $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "meta_memory_pb='${VIASH_META_MEMORY_PB//\'/\'\"\'\"\'}'"; fi )
      resources_dir="$VIASH_META_RESOURCES_DIR"
      
      ## VIASH END
      
      filtered_h5="\$par_input/filtered_feature_bc_matrix.h5"
      if [ -f "\$filtered_h5" ] && [ ! -z "\$par_filtered_h5" ]; then
        echo "+ cp \$filtered_h5 \$par_filtered_h5"
        cp "\$filtered_h5" "\$par_filtered_h5"
      fi
      
      metrics_summary="\$par_input/metrics_summary.csv"
      if [ -f "\$metrics_summary" ] && [ ! -z "\$par_metrics_summary" ]; then
        echo "+ cp \$metrics_summary \$par_metrics_summary"
        cp "\$metrics_summary" "\$par_metrics_summary"
      fi
      
      molecule_info="\$par_input/molecule_info.h5"
      if [ -f "\$molecule_info" ] && [ ! -z "\$par_molecule_info" ]; then
        echo "+ cp \$molecule_info \$par_molecule_info"
        cp "\$molecule_info" "\$par_molecule_info"
      fi
      
      bam="\$par_input/possorted_genome_bam.bam"
      if [ -f "\$bam" ] && [ ! -z "\$par_bam" ]; then
        echo "cp \$bam \$par_bam"
        cp "\$bam" "\$par_bam"
      fi
      
      raw_h5="\$par_input/raw_feature_bc_matrix.h5"
      if [ -f "\$raw_h5" ] && [ ! -z "\$par_raw_h5" ]; then
        echo "+ cp \$raw_h5 \$par_raw_h5"
        cp "\$raw_h5" "\$par_raw_h5"
      fi
      
      bai="\$par_input/possorted_genome_bam.bam.bai"
      if [ -f "\$bai" ] && [ ! -z "\$par_bai" ]; then
        echo "+ cp \$bai \$par_bai"
        cp "\$bai" "\$par_bai"
      fi
      
      VIASHMAIN
      bash "\$tempscript" &
      wait "\$!"
      
      VIASHEOF
      

    dest: "cellranger_count_split"
    is_executable: true
  description: "Split 10x Cell Ranger output directory into separate output fields."
  test_resources: []
  info: {}
  status: "enabled"
  requirements:
    commands: []
  dummy_arguments: []
  set_wd_to_resources_dir: false
platform:
  type: "docker"
  id: "docker"
  image: "ubuntu:jammy"
  target_organization: "openpipelines-bio"
  target_registry: "ghcr.io"
  namespace_separator: "_"
  resolve_volume: "Automatic"
  chown: true
  port: []
  setup_strategy: "ifneedbepullelsecachedbuild"
  privileged: false
  run_args: []
  target_image_source: "https://github.com/openpipelines-bio/openpipeline"
  setup:
  - type: "docker"
    resources: []
    label: []
    add: []
    copy: []
    run:
    - "apt update && apt upgrade -y"
    build_args: []
    env: []
  test_setup: []
platforms: []
info:
  config: "src/mapping/cellranger_count_split/config.vsh.yaml"
  platform: "docker"
  output: "target/docker/mapping/cellranger_count_split"
  executable: "target/docker/mapping/cellranger_count_split/cellranger_count_split"
  viash_version: "0.6.0"
  git_commit: "346d4a44c87fff18a2ac36f7859222ada2929c53"
  git_remote: "https://github.com/openpipelines-bio/openpipeline"
