functionality:
  name: "bd_rhapsody_wta"
  namespace: "mapping"
  version: "main_build"
  authors:
  - name: "Robrecht Cannoodt"
    email: "rcannood@gmail.com"
    roles:
    - "maintainer"
    props:
      github: "rcannood"
      orcid: "0000-0003-3641-729X"
  arguments:
  - type: "file"
    name: "--input"
    alternatives:
    - "-i"
    description: "Path to your read files in the FASTQ.GZ format. You may specify\
      \ as many R1/R2 read pairs as you want."
    example: "input.fastq.gz"
    must_exist: false
    required: true
    direction: "Input"
    multiple: true
    multiple_sep: ":"
  - type: "file"
    name: "--output"
    alternatives:
    - "-o"
    description: "Output folder. Output still needs to be processed further."
    example: "output_dir"
    must_exist: false
    required: true
    direction: "Output"
    multiple: false
    multiple_sep: ":"
  - type: "double"
    name: "--subsample"
    alternatives: []
    description: "A number >1 or fraction (0 < n < 1) to indicate the number or percentage\
      \ of reads to subsample."
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--reference_genome"
    alternatives:
    - "-r"
    description: "Path to STAR index as a tar.gz file."
    must_exist: false
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--transcriptome_annotation"
    alternatives:
    - "-t"
    description: "Path to GTF annotation file."
    must_exist: false
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--exact_cell_count"
    alternatives: []
    description: "Exact cell count - Set a specific number (>=1) of cells as putative,\
      \ based on those with the highest error-corrected read count"
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "boolean"
    name: "--disable_putative_calling"
    alternatives: []
    description: "Disable Refined Putative Cell Calling - Determine putative cells\
      \ using only the basic algorithm (minimum second derivative along the cumulative\
      \ reads curve). The refined algorithm attempts to remove false positives and\
      \ recover false negatives, but may not be ideal for certain complex mixtures\
      \ of cell types. Does not apply if Exact Cell Count is set."
    required: false
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "boolean_true"
    name: "--parallel"
    alternatives: []
    description: "[experimental] Run jobs in parallel."
    direction: "Input"
  - type: "boolean_true"
    name: "--timestamps"
    alternatives: []
    description: "Add timestamps to the errors, warnings, and notifications."
    direction: "Input"
  - type: "file"
    name: "--abseq_reference"
    alternatives:
    - "-a"
    description: "Path to the AbSeq reference file in FASTA format. Only needed if\
      \ BD AbSeq Ab-Oligos are used."
    must_exist: false
    required: false
    direction: "Input"
    multiple: true
    multiple_sep: ":"
  - type: "file"
    name: "--supplemental_reference"
    alternatives:
    - "-s"
    description: "Path to the supplemental reference file in FASTA format. Only needed\
      \ if there are additional transgene sequences used in the experiment."
    must_exist: false
    required: false
    direction: "Input"
    multiple: true
    multiple_sep: ":"
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      ####################################
      #    bd_rhapsody_wta main_build    #
      ####################################
      
      # This wrapper script is auto-generated by viash 0.5.10.1 and is thus a
      # derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
      # Data Intuitive.  The component may contain files which fall under a different
      # license. The authors of this component should specify the license in the
      # header of such files, or include a separate license file detailing the
      # licenses of all included files.
      #
      # Component authors:
      # * Robrecht Cannoodt <rcannood@gmail.com> (maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=/tmp
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      VIASH_LOGCODE_EMERGENCY=0
      VIASH_LOGCODE_ALERT=1
      VIASH_LOGCODE_CRITICAL=2
      VIASH_LOGCODE_ERROR=3
      VIASH_LOGCODE_WARNING=4
      VIASH_LOGCODE_NOTICE=5
      VIASH_LOGCODE_INFO=6
      VIASH_LOGCODE_DEBUG=7
      VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '.
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '.
      function ViashEmergency {
        ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '.
      function ViashAlert {
        ViashLog $VIASH_LOGCODE_ALERT alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '.
      function ViashCritical {
        ViashLog $VIASH_LOGCODE_CRITICAL critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '.
      function ViashError {
        ViashLog $VIASH_LOGCODE_ERROR error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '.
      function ViashWarning {
        ViashLog $VIASH_LOGCODE_WARNING warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '.
      function ViashNotice {
        ViashLog $VIASH_LOGCODE_NOTICE notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '.
      function ViashInfo {
        ViashLog $VIASH_LOGCODE_INFO info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '.
      function ViashDebug {
        ViashLog $VIASH_LOGCODE_DEBUG debug $@
      }
      
      # find source folder of this component
      VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      # define meta fields
      VIASH_META_FUNCTIONALITY_NAME="bd_rhapsody_wta"
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "bd_rhapsody_wta main_build"
        echo "A viash component for the BD Rhapsody Analysis CWL pipeline."
        echo ""
        echo "The CWL pipeline file is obtained by cloning 'https://bitbucket.org/CRSwDev/cwl/src/master/' and removing all objects with class 'DockerRequirement' from the JSON."
        echo ""
        echo "The reference_genome and transcriptome_annotation files can be downloaded from these locations:"
        echo "  - Human: http://bd-rhapsody-public.s3-website-us-east-1.amazonaws.com/Rhapsody-WTA/GRCh38-PhiX-gencodev29/"
        echo "  - Mouse: http://bd-rhapsody-public.s3-website-us-east-1.amazonaws.com/Rhapsody-WTA/GRCm38-PhiX-gencodevM19/"
        echo
        echo "Options:"
      
        echo "   -i, --input"
        echo "        type: file, required parameter, multiple values allowed"
        echo "        example: input.fastq.gz"
        echo "        Path to your read files in the FASTQ.GZ format. You may specify as many R1/R2 read pairs as you want."
        echo ""
      
      
        echo "   -o, --output"
        echo "        type: file, required parameter, output"
        echo "        example: output_dir"
        echo "        Output folder. Output still needs to be processed further."
        echo ""
      
      
        echo "   --subsample"
        echo "        type: double"
        echo "        A number >1 or fraction (0 < n < 1) to indicate the number or percentage of reads to subsample."
        echo ""
      
      
        echo "   -r, --reference_genome"
        echo "        type: file, required parameter"
        echo "        Path to STAR index as a tar.gz file."
        echo ""
      
      
        echo "   -t, --transcriptome_annotation"
        echo "        type: file, required parameter"
        echo "        Path to GTF annotation file."
        echo ""
      
      
        echo "   --exact_cell_count"
        echo "        type: integer"
        echo "        Exact cell count - Set a specific number (>=1) of cells as putative, based on those with the highest error-corrected read count"
        echo ""
      
      
        echo "   --disable_putative_calling"
        echo "        type: boolean"
        echo "        Disable Refined Putative Cell Calling - Determine putative cells using only the basic algorithm (minimum second derivative along the cumulative reads curve). The refined algorithm attempts to remove false positives and recover false negatives, but may not be ideal for certain complex mixtures of cell types. Does not apply if Exact Cell Count is set."
        echo ""
      
      
        echo "   --parallel"
        echo "        type: boolean_true"
        echo "        [experimental] Run jobs in parallel."
        echo ""
      
      
        echo "   --timestamps"
        echo "        type: boolean_true"
        echo "        Add timestamps to the errors, warnings, and notifications."
        echo ""
      
      
        echo "   -a, --abseq_reference"
        echo "        type: file, multiple values allowed"
        echo "        Path to the AbSeq reference file in FASTA format. Only needed if BD AbSeq Ab-Oligos are used."
        echo ""
      
      
        echo "   -s, --supplemental_reference"
        echo "        type: file, multiple values allowed"
        echo "        Path to the supplemental reference file in FASTA format. Only needed if there are additional transgene sequences used in the experiment."
        echo ""
      
      }
      ######## Helper functions for setting up Docker images for viash ########
      # expects: ViashDockerBuild
      
      # ViashDockerInstallationCheck: check whether Docker is installed correctly
      #
      # examples:
      #   ViashDockerInstallationCheck
      function ViashDockerInstallationCheck {
        ViashDebug "Checking whether Docker is installed"
        if [ ! command -v docker &> /dev/null ]; then
          ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
          exit 1
        fi
      
        ViashDebug "Checking whether the Docker daemon is running"
        save=$-; set +e
        docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
        out=$?
        [[ $save =~ e ]] && set -e
        if [ $out -ne 0 ]; then
          ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
          ViashCritical "- Try running 'dockerd' in the command line"
          ViashCritical "- See https://docs.docker.com/config/daemon/"
          exit 1
        fi
      }
      
      # ViashDockerRemoteTagCheck: check whether a Docker image is available 
      # on a remote. Assumes `docker login` has been performed, if relevant.
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerRemoteTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerRemoteTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerRemoteTagCheck {
        docker manifest inspect $1 > /dev/null 2> /dev/null
      }
      
      # ViashDockerLocalTagCheck: check whether a Docker image is available locally
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   docker pull python:latest
      #   ViashDockerLocalTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerLocalTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerLocalTagCheck {
        [ -n "$(docker images -q $1)" ]
      }
      
      # ViashDockerPull: pull a Docker image
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerPull python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerPull sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerPull {
        ViashNotice "Checking if Docker image is available at '$1'"
        if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
          docker pull $1 && return 0 || return 1
        else
          save=$-; set +e
          docker pull $1 2> /dev/null > /dev/null
          out=$?
          [[ $save =~ e ]] && set -e
          if [ $out -ne 0 ]; then
            ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
          fi
          return $out
        fi
      }
      
      # ViashDockerPush: push a Docker image
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerPush python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerPush sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerPush {
        ViashNotice "Pushing image to '$1'"
        save=$-; set +e
        if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
          docker push $1
          out=$?
        else
          docker push $1 2> /dev/null > /dev/null
          out=$?
        fi
        [[ $save =~ e ]] && set -e
        if [ $out -eq 0 ]; then
          ViashNotice "Container '$VSHD_ID' push succeeded."
        else
          ViashError "Container '$VSHD_ID' push errored. You might not be logged in or have the necessary permissions."
        fi
        return $out
      }
      
      # ViashDockerPullElseBuild: pull a Docker image, else build it
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerPullElseBuild mynewcomponent
      function ViashDockerPullElseBuild {
        save=$-; set +e
        ViashDockerPull $1
        out=$?
        [[ $save =~ e ]] && set -e
        if [ $out -ne 0 ]; then
          ViashDockerBuild $@
        fi
      }
      
      # ViashDockerSetup: create a Docker image, according to specified docker setup strategy
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # $2                  : docker setup strategy, see DockerSetupStrategy.scala
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerSetup mynewcomponent alwaysbuild
      function ViashDockerSetup {
        VSHD_ID="$1"
        VSHD_STRAT="$2"
        if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
          ViashDockerBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
          ViashDockerPull $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
          ViashDockerBuild $VSHD_ID
        elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
          save=$-; set +e
          ViashDockerLocalTagCheck $VSHD_ID
          outCheck=$?
          [[ $save =~ e ]] && set -e
          if [ $outCheck -eq 0 ]; then
            ViashInfo "Image $VSHD_ID already exists"
          elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
            ViashDockerBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
            ViashDockerBuild $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
            ViashDockerPull $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID
          else
            ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
            exit 1
          fi
        elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
          ViashDockerPush "$VSHD_ID"
        elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
          save=$-; set +e
          ViashDockerRemoteTagCheck $VSHD_ID
          outCheck=$?
          [[ $save =~ e ]] && set -e
          if [ $outCheck -eq 0 ]; then
            ViashNotice "Container '$VSHD_ID' exists, doing nothing."
          else
            ViashNotice "Container '$VSHD_ID' does not yet exist."
            ViashDockerPush "$VSHD_ID"
          fi
        elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
          ViashNotice "Skipping setup."
        else
          ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
          exit 1
        fi
      }
      
      
      ######## End of helper functions for setting up Docker images for viash ########
      
      # ViashDockerFile: print the dockerfile to stdout
      # return : dockerfile required to run this component
      # examples:
      #   ViashDockerFile
      function ViashDockerfile {
        cat << 'VIASHDOCKER'
      FROM bdgenomics/rhapsody:1.9.1
      
      LABEL authors="Robrecht Cannoodt <rcannood@gmail.com> (maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}"
      LABEL org.opencontainers.image.description="Companion container for running component mapping bd_rhapsody_wta"
      LABEL org.opencontainers.image.source="https://github.com/openpipelines-bio/openpipeline"
      RUN apt-get --allow-releaseinfo-change update
      RUN apt-get update && \
        DEBIAN_FRONTEND=noninteractive apt-get install -y cwltool && \
        rm -rf /var/lib/apt/lists/*
      
      VIASHDOCKER
      }
      
      # ViashDockerBuild: build a docker container
      # $1              : image identifier with format `[registry/]image[:tag]`
      # exit code $?    : whether or not the image was built
      function ViashDockerBuild {
        # create temporary directory to store dockerfile & optional resources in
        tmpdir=$(mktemp -d "$VIASH_TEMP/viashsetupdocker-bd_rhapsody_wta-XXXXXX")
        function clean_up {
          rm -rf "$tmpdir"
        }
        trap clean_up EXIT
      
        # store dockerfile and resources
        ViashDockerfile > $tmpdir/Dockerfile
        cp -r $VIASH_RESOURCES_DIR/* $tmpdir
      
        # Build the container
        ViashNotice "Building container '$1' with Dockerfile"
        ViashInfo "Running 'docker build -t $@ $tmpdir'"
        save=$-; set +e
        if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
          docker build -t $@ $tmpdir
        else
          docker build -t $@ $tmpdir &> $tmpdir/docker_build.log
        fi
        out=$?
        [[ $save =~ e ]] && set -e
        if [ $out -ne 0 ]; then
          ViashError "Error occurred while building container '$1'"
          if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
            ViashError "Transcript: --------------------------------"
            cat "$tmpdir/docker_build.log"
            ViashError "End of transcript --------------------------"
          fi
          exit 1
        fi
      }
      # ViashAbsolutePath: generate absolute path from relative path
      # borrowed from https://stackoverflow.com/a/21951256
      # $1     : relative filename
      # return : absolute path
      # examples:
      #   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
      #   ViashAbsolutePath /foo/bar/..     # returns /foo
      function ViashAbsolutePath {
        local thePath
        if [[ ! "$1" =~ ^/ ]]; then
          thePath="$PWD/$1"
        else
          thePath="$1"
        fi
        echo "$thePath" | (
          IFS=/
          read -a parr
          declare -a outp
          for i in "${parr[@]}"; do
            case "$i" in
            ''|.) continue ;;
            ..)
              len=${#outp[@]}
              if ((len==0)); then
                continue
              else
                unset outp[$((len-1))]
              fi
              ;;
            *)
              len=${#outp[@]}
              outp[$len]="$i"
            ;;
            esac
          done
          echo /"${outp[*]}"
        )
      }
      # ViashAutodetectMount: auto configuring docker mounts from parameters
      # $1                  : The parameter value
      # returns             : New parameter
      # $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
      # examples:
      #   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
      #   ViashAutodetectMountArg /path/to/bar   # returns '-v /path/to:/viash_automount/path/to'
      function ViashAutodetectMount {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "$mount_target/$base_name"
      }
      function ViashAutodetectMountArg {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "-v \"$mount_source:$mount_target\""
      }
      # ViashExtractFlags: Retain leading flag
      # $1     : string with a possible leading flag
      # return : leading flag
      # examples:
      #   ViashExtractFlags --foo=bar  # returns --foo
      function ViashExtractFlags {
        echo $1 | sed 's/=.*//'
      }
      # initialise variables
      VIASH_EXTRA_MOUNTS=''
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      VIASH_MODE='run'
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              ---v|---verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              ---verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              ---verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "bd_rhapsody_wta main_build"
                  exit
                  ;;
              --input)
                  if [ -z "$VIASH_PAR_INPUT" ]; then
                    VIASH_PAR_INPUT="$2"
                  else
                    VIASH_PAR_INPUT="$VIASH_PAR_INPUT:""$2"
                  fi
                  shift 2
                  ;;
              --input=*)
                  if [ -z "$VIASH_PAR_INPUT" ]; then
                    VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
                  else
                    VIASH_PAR_INPUT="$VIASH_PAR_INPUT:"$(ViashRemoveFlags "$1")
                  fi
                  shift 1
                  ;;
              -i)
                  if [ -z "$VIASH_PAR_INPUT" ]; then
                    VIASH_PAR_INPUT="$2"
                  else
                    VIASH_PAR_INPUT="$VIASH_PAR_INPUT:""$2"
                  fi
                  shift 2
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -o)
                  VIASH_PAR_OUTPUT="$2"
                  shift 2
                  ;;
              --subsample)
                  VIASH_PAR_SUBSAMPLE="$2"
                  shift 2
                  ;;
              --subsample=*)
                  VIASH_PAR_SUBSAMPLE=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --reference_genome)
                  VIASH_PAR_REFERENCE_GENOME="$2"
                  shift 2
                  ;;
              --reference_genome=*)
                  VIASH_PAR_REFERENCE_GENOME=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -r)
                  VIASH_PAR_REFERENCE_GENOME="$2"
                  shift 2
                  ;;
              --transcriptome_annotation)
                  VIASH_PAR_TRANSCRIPTOME_ANNOTATION="$2"
                  shift 2
                  ;;
              --transcriptome_annotation=*)
                  VIASH_PAR_TRANSCRIPTOME_ANNOTATION=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -t)
                  VIASH_PAR_TRANSCRIPTOME_ANNOTATION="$2"
                  shift 2
                  ;;
              --exact_cell_count)
                  VIASH_PAR_EXACT_CELL_COUNT="$2"
                  shift 2
                  ;;
              --exact_cell_count=*)
                  VIASH_PAR_EXACT_CELL_COUNT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --disable_putative_calling)
                  VIASH_PAR_DISABLE_PUTATIVE_CALLING="$2"
                  shift 2
                  ;;
              --disable_putative_calling=*)
                  VIASH_PAR_DISABLE_PUTATIVE_CALLING=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --parallel)
                  VIASH_PAR_PARALLEL=true
                  shift 1
                  ;;
              --timestamps)
                  VIASH_PAR_TIMESTAMPS=true
                  shift 1
                  ;;
              --abseq_reference)
                  if [ -z "$VIASH_PAR_ABSEQ_REFERENCE" ]; then
                    VIASH_PAR_ABSEQ_REFERENCE="$2"
                  else
                    VIASH_PAR_ABSEQ_REFERENCE="$VIASH_PAR_ABSEQ_REFERENCE:""$2"
                  fi
                  shift 2
                  ;;
              --abseq_reference=*)
                  if [ -z "$VIASH_PAR_ABSEQ_REFERENCE" ]; then
                    VIASH_PAR_ABSEQ_REFERENCE=$(ViashRemoveFlags "$1")
                  else
                    VIASH_PAR_ABSEQ_REFERENCE="$VIASH_PAR_ABSEQ_REFERENCE:"$(ViashRemoveFlags "$1")
                  fi
                  shift 1
                  ;;
              -a)
                  if [ -z "$VIASH_PAR_ABSEQ_REFERENCE" ]; then
                    VIASH_PAR_ABSEQ_REFERENCE="$2"
                  else
                    VIASH_PAR_ABSEQ_REFERENCE="$VIASH_PAR_ABSEQ_REFERENCE:""$2"
                  fi
                  shift 2
                  ;;
              --supplemental_reference)
                  if [ -z "$VIASH_PAR_SUPPLEMENTAL_REFERENCE" ]; then
                    VIASH_PAR_SUPPLEMENTAL_REFERENCE="$2"
                  else
                    VIASH_PAR_SUPPLEMENTAL_REFERENCE="$VIASH_PAR_SUPPLEMENTAL_REFERENCE:""$2"
                  fi
                  shift 2
                  ;;
              --supplemental_reference=*)
                  if [ -z "$VIASH_PAR_SUPPLEMENTAL_REFERENCE" ]; then
                    VIASH_PAR_SUPPLEMENTAL_REFERENCE=$(ViashRemoveFlags "$1")
                  else
                    VIASH_PAR_SUPPLEMENTAL_REFERENCE="$VIASH_PAR_SUPPLEMENTAL_REFERENCE:"$(ViashRemoveFlags "$1")
                  fi
                  shift 1
                  ;;
              -s)
                  if [ -z "$VIASH_PAR_SUPPLEMENTAL_REFERENCE" ]; then
                    VIASH_PAR_SUPPLEMENTAL_REFERENCE="$2"
                  else
                    VIASH_PAR_SUPPLEMENTAL_REFERENCE="$VIASH_PAR_SUPPLEMENTAL_REFERENCE:""$2"
                  fi
                  shift 2
                  ;;
              ---setup)
                  VIASH_MODE='docker_setup'
                  VIASH_DOCKER_SETUP_STRATEGY="$2"
                  shift 1
                  ;;
              ---setup=*)
                  VIASH_MODE='docker_setup'
                  VIASH_DOCKER_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
                  shift 2
                  ;;
              ---dockerfile)
                  ViashDockerfile
                  exit 0
                  ;;
              ---v|---volume)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v "$2""
                  shift 2
                  ;;
              ---volume=*)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v $(ViashRemoveFlags "$2")"
                  shift 1
                  ;;
              ---debug)
                  VIASH_MODE='docker_debug'
                  shift 1
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      ViashDockerInstallationCheck
      if [ $VIASH_MODE == "docker_setup" ]; then
        ViashDockerSetup 'ghcr.io/openpipelines-bio/mapping_bd_rhapsody_wta:main_build' "$VIASH_DOCKER_SETUP_STRATEGY"
        exit 0
      fi
      ViashDockerSetup 'ghcr.io/openpipelines-bio/mapping_bd_rhapsody_wta:main_build' ifneedbepullelsecachedbuild
      if [ $VIASH_MODE == "docker_debug" ]; then
        ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/mapping_bd_rhapsody_wta:main_build'"
        docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/mapping_bd_rhapsody_wta:main_build'
        exit 0
      fi
      
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_INPUT" ]; then
        ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT" ]; then
        ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_REFERENCE_GENOME" ]; then
        ViashError '--reference_genome' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_TRANSCRIPTOME_ANNOTATION" ]; then
        ViashError '--transcriptome_annotation' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_PARALLEL" ]; then
        VIASH_PAR_PARALLEL="false"
      fi
      if [ -z "$VIASH_PAR_TIMESTAMPS" ]; then
        VIASH_PAR_TIMESTAMPS="false"
      fi
      
      
      # detect volumes from file arguments
      if [ ! -z "$VIASH_PAR_INPUT" ]; then
        IFS=":"
        for var in $VIASH_PAR_INPUT; do
          unset IFS
          VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$var")"
          if [ -z "$VIASH_TEST_INPUT" ]; then
            VIASH_TEST_INPUT="$(ViashAutodetectMount "$var")"
          else
            VIASH_TEST_INPUT="$VIASH_TEST_INPUT:""$(ViashAutodetectMount "$var")"
          fi
        done
        VIASH_PAR_INPUT="$VIASH_TEST_INPUT"
      fi
      if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT")"
        VIASH_PAR_OUTPUT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT")
      fi
      if [ ! -z "$VIASH_PAR_REFERENCE_GENOME" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_REFERENCE_GENOME")"
        VIASH_PAR_REFERENCE_GENOME=$(ViashAutodetectMount "$VIASH_PAR_REFERENCE_GENOME")
      fi
      if [ ! -z "$VIASH_PAR_TRANSCRIPTOME_ANNOTATION" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_TRANSCRIPTOME_ANNOTATION")"
        VIASH_PAR_TRANSCRIPTOME_ANNOTATION=$(ViashAutodetectMount "$VIASH_PAR_TRANSCRIPTOME_ANNOTATION")
      fi
      if [ ! -z "$VIASH_PAR_ABSEQ_REFERENCE" ]; then
        IFS=":"
        for var in $VIASH_PAR_ABSEQ_REFERENCE; do
          unset IFS
          VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$var")"
          if [ -z "$VIASH_TEST_ABSEQ_REFERENCE" ]; then
            VIASH_TEST_ABSEQ_REFERENCE="$(ViashAutodetectMount "$var")"
          else
            VIASH_TEST_ABSEQ_REFERENCE="$VIASH_TEST_ABSEQ_REFERENCE:""$(ViashAutodetectMount "$var")"
          fi
        done
        VIASH_PAR_ABSEQ_REFERENCE="$VIASH_TEST_ABSEQ_REFERENCE"
      fi
      if [ ! -z "$VIASH_PAR_SUPPLEMENTAL_REFERENCE" ]; then
        IFS=":"
        for var in $VIASH_PAR_SUPPLEMENTAL_REFERENCE; do
          unset IFS
          VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$var")"
          if [ -z "$VIASH_TEST_SUPPLEMENTAL_REFERENCE" ]; then
            VIASH_TEST_SUPPLEMENTAL_REFERENCE="$(ViashAutodetectMount "$var")"
          else
            VIASH_TEST_SUPPLEMENTAL_REFERENCE="$VIASH_TEST_SUPPLEMENTAL_REFERENCE:""$(ViashAutodetectMount "$var")"
          fi
        done
        VIASH_PAR_SUPPLEMENTAL_REFERENCE="$VIASH_TEST_SUPPLEMENTAL_REFERENCE"
      fi
      
      # Always mount the resource directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_RESOURCES_DIR")"
      VIASH_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_RESOURCES_DIR")
      
      # Always mount the VIASH_TEMP directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_TEMP")"
      VIASH_TEMP=$(ViashAutodetectMount "$VIASH_TEMP")
      # change file ownership
      function ViashPerformChown {
        
        if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/openpipelines-bio/mapping_bd_rhapsody_wta:main_build "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT"
        fi
      }
      trap ViashPerformChown EXIT
      
      
      cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/openpipelines-bio/mapping_bd_rhapsody_wta:main_build
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-bd_rhapsody_wta-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      function interrupt {
        echo -e "\nCTRL-C Pressed..."
        exit 1
      }
      trap clean_up EXIT
      trap interrupt INT SIGINT
      cat > "\$tempscript" << 'VIASHMAIN'
      ## VIASH START
      # The following code has been auto-generated by Viash.
      $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "par_input='$VIASH_PAR_INPUT'"; fi )
      $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "par_output='$VIASH_PAR_OUTPUT'"; fi )
      $( if [ ! -z ${VIASH_PAR_SUBSAMPLE+x} ]; then echo "par_subsample='$VIASH_PAR_SUBSAMPLE'"; fi )
      $( if [ ! -z ${VIASH_PAR_REFERENCE_GENOME+x} ]; then echo "par_reference_genome='$VIASH_PAR_REFERENCE_GENOME'"; fi )
      $( if [ ! -z ${VIASH_PAR_TRANSCRIPTOME_ANNOTATION+x} ]; then echo "par_transcriptome_annotation='$VIASH_PAR_TRANSCRIPTOME_ANNOTATION'"; fi )
      $( if [ ! -z ${VIASH_PAR_EXACT_CELL_COUNT+x} ]; then echo "par_exact_cell_count='$VIASH_PAR_EXACT_CELL_COUNT'"; fi )
      $( if [ ! -z ${VIASH_PAR_DISABLE_PUTATIVE_CALLING+x} ]; then echo "par_disable_putative_calling='$VIASH_PAR_DISABLE_PUTATIVE_CALLING'"; fi )
      $( if [ ! -z ${VIASH_PAR_PARALLEL+x} ]; then echo "par_parallel='$VIASH_PAR_PARALLEL'"; fi )
      $( if [ ! -z ${VIASH_PAR_TIMESTAMPS+x} ]; then echo "par_timestamps='$VIASH_PAR_TIMESTAMPS'"; fi )
      $( if [ ! -z ${VIASH_PAR_ABSEQ_REFERENCE+x} ]; then echo "par_abseq_reference='$VIASH_PAR_ABSEQ_REFERENCE'"; fi )
      $( if [ ! -z ${VIASH_PAR_SUPPLEMENTAL_REFERENCE+x} ]; then echo "par_supplemental_reference='$VIASH_PAR_SUPPLEMENTAL_REFERENCE'"; fi )
      meta_functionality_name='$VIASH_META_FUNCTIONALITY_NAME'
      meta_resources_dir='$VIASH_RESOURCES_DIR'
      resources_dir="$VIASH_RESOURCES_DIR"
      
      ## VIASH END
      #!/bin/bash
      
      mkdir -p \$par_output
      
      cat > \$par_output/config.yml << HERE
      #!/usr/bin/env cwl-runner
      
      cwl:tool: rhapsody
      
      # This is a YML file used to specify the inputs for a BD Genomics WTA Rhapsody Analysis pipeline run. See the
      # BD Genomics Analysis Setup User Guide (Doc ID: 47383) for more details.
      
      ## Reference_Genome (required) - Path to STAR index for tar.gz format. See Doc ID: 47383 for instructions to obtain pre-built STAR index file.
      Reference_Genome:
         class: File
         location: "\$(realpath --no-symlinks \$par_reference_genome)"
      
      ## Transcriptome_Annotation (required) - Path to GTF annotation file
      Transcriptome_Annotation:
         class: File
         location: "\$(realpath --no-symlinks \$par_transcriptome_annotation)"
      
      ## Reads (required) - Path to your read files in the FASTQ.GZ format. You may specify as many R1/R2 read pairs as you want.
      Reads:
      HERE
      
      # process fastq files
      IFS=:
      set -f
      for val in \$par_input; do
        unset IFS
        cat >> \$par_output/config.yml << HERE
       - class: File
         location: "\$(realpath --no-symlinks \$val)"
      HERE
      done
      set +f
      
      # Add abseq reference, if specified
      if [ ! -z "\$par_abseq_reference" ]; then
        cat >> \$par_output/config.yml << HERE
      
      ## AbSeq_Reference (optional) - Path to the AbSeq reference file in FASTA format.  Only needed if BD AbSeq Ab-Oligos are used.
      AbSeq_Reference:
      HERE
      
        # process abseq reference files
        IFS=:
        set -f
        for val in \$par_abseq_reference; do
          unset IFS
      
          cat >> \$par_output/config.yml << HERE
       - class: File
         location: "\$(realpath --no-symlinks \$val)"
      HERE
        done
        set +f
      fi
      
      # Add supplemental reference, if specified
      if [ ! -z "\$par_supplemental_reference" ]; then
        cat >> \$par_output/config.yml << HERE
      
      # Supplemental_Reference (optional) - Path to the supplemental reference file in FASTA format.  Only needed if there are additional transgene sequences used in the experiment.
      Supplemental_Reference:
      HERE
      
        # process supplemental reference files
        IFS=:
        set -f
        for val in \$par_supplemental_reference; do
          unset IFS
      
          cat >> \$par_output/config.yml << HERE
       - class: File
         location: "\$(realpath --no-symlinks \$val)"
      HERE
        done
        set +f
      fi
      
      # Add exact cell count, if specified
      if [ ! -z "\$par_exact_cell_count" ]; then
        cat >> \$par_output/config.yml << HERE
      
      ## Exact cell count - Set a specific number (>=1) of cells as putative, based on those with the highest error-corrected read count
      Exact_Cell_Count: \$par_exact_cell_count
      HERE
      fi
      
      # Add Disable Refined Putative Cell Calling, if specified
      if [ ! -z "\$par_disable_putative_calling" ]; then
        cat >> \$par_output/config.yml << HERE
      
      ## Disable Refined Putative Cell Calling - Determine putative cells using only the basic algorithm (minimum second derivative along the cumulative reads curve).
      ## The refined algorithm attempts to remove false positives and recover false negatives, but may not be ideal for certain complex mixtures of cell types.
      ## Does not apply if Exact Cell Count is set. Values can be true or false.
      Basic_Algo_Only: \$par_disable_putative_calling
      HERE
      fi
      
      # add subsample, if specified
      if [ ! -z "\$par_subsample" ]; then
        cat >> \$par_output/config.yml << HERE
      
      ## Subsample (optional) - A number >1 or fraction (0 < n < 1) to indicate the number or percentage of reads to subsample.
      Subsample: \$par_subsample
      HERE
      fi
      
      if [ "\$par_parallel" == "true" ]; then
        pars="\$pars --parallel"
      fi
      if [ "\$par_timestamps" == "true" ]; then
        pars="\$pars --timestamps"
      fi
      
      cd \$par_output
      
      # enable tempdir
      export TMPDIR=\$(mktemp -d "$VIASH_TEMP/cwl-bd_rhapsody_wta-XXXXXX")
      # remove tempdir after execution
      function clean_up {
        [[ -d "\$TMPDIR" ]] && rm -r "\$TMPDIR"
      }
      trap clean_up EXIT
      
      echo "> cwl-runner\$pars --no-container \\"\$resources_dir/rhapsody_wta_1.9.1_nodocker.cwl\\" config.yml"
      eval cwl-runner\$pars --no-container "\$resources_dir/rhapsody_wta_1.9.1_nodocker.cwl" config.yml
      VIASHMAIN
      bash "\$tempscript" &
      wait "\$!"
      
      VIASHEOF
      

    dest: "bd_rhapsody_wta"
    is_executable: true
  - type: "file"
    path: "rhapsody_wta_1.9.1_nodocker.cwl"
  description: "A viash component for the BD Rhapsody Analysis CWL pipeline.\n\nThe\
    \ CWL pipeline file is obtained by cloning 'https://bitbucket.org/CRSwDev/cwl/src/master/'\
    \ and removing all objects with class 'DockerRequirement' from the JSON.\n\nThe\
    \ reference_genome and transcriptome_annotation files can be downloaded from these\
    \ locations:\n  - Human: http://bd-rhapsody-public.s3-website-us-east-1.amazonaws.com/Rhapsody-WTA/GRCh38-PhiX-gencodev29/\n\
    \  - Mouse: http://bd-rhapsody-public.s3-website-us-east-1.amazonaws.com/Rhapsody-WTA/GRCm38-PhiX-gencodevM19/\n"
  tests: []
  info: {}
  dummy_arguments: []
  set_wd_to_resources_dir: false
  add_resources_to_path: false
platform:
  type: "docker"
  id: "docker"
  image: "bdgenomics/rhapsody:1.9.1"
  target_organization: "openpipelines-bio"
  target_registry: "ghcr.io"
  namespace_separator: "_"
  resolve_volume: "Automatic"
  chown: true
  port: []
  setup_strategy: "ifneedbepullelsecachedbuild"
  privileged: false
  run_args: []
  target_image_source: "https://github.com/openpipelines-bio/openpipeline"
  setup:
  - type: "docker"
    resources: []
    label: []
    add: []
    copy: []
    run:
    - "apt-get --allow-releaseinfo-change update"
    build_args: []
    env: []
  - type: "apt"
    packages:
    - "cwltool"
    interactive: false
platforms: []
info:
  config: "src/mapping/bd_rhapsody_wta/config.vsh.yaml"
  platform: "docker"
  output: "target/docker/mapping/bd_rhapsody_wta"
  executable: "target/docker/mapping/bd_rhapsody_wta/bd_rhapsody_wta"
  viash_version: "0.5.10.1"
  git_commit: "dfc0aede0bb1b1ef0626642f2da2e8209919f9a2"
  git_remote: "https://github.com/openpipelines-bio/openpipeline"
