#!/usr/bin/env bash

# cellbender_remove_background main_build
# 
# This wrapper script is auto-generated by viash 0.6.1 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="cellbender_remove_background"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "cellbender_remove_background main_build"
  echo ""
  echo "Eliminating technical artifacts from high-throughput single-cell RNA sequencing"
  echo "data."
  echo ""
  echo "This module removes counts due to ambient RNA molecules and random barcode"
  echo "swapping from (raw) UMI-based scRNA-seq count matrices."
  echo "At the moment, only the count matrices produced by the CellRanger count pipeline"
  echo "is supported. Support for additional tools and protocols"
  echo "will be added in the future. A quick start tutorial can be found here."
  echo ""
  echo " Fleming et al. 2022, bioRxiv."
  echo ""
  echo "Inputs:"
  echo "    -i, --input"
  echo "        type: file, required parameter"
  echo "        example: input.h5"
  echo "        Input file."
  echo ""
  echo "Outputs:"
  echo "    --output"
  echo "        type: file, required parameter, output"
  echo "        example: output.h5"
  echo "        Full count matrix as an h5 file, with background RNA removed. This file"
  echo "        contains all the original droplet barcodes."
  echo ""
  echo "    --output_filtered"
  echo "        type: file, required parameter, output"
  echo "        example: output_filtered.h5"
  echo "        Filtered count matrix as an h5 file, with background RNA removed. The"
  echo "        word \"filtered\" means that this file contains only the droplets which"
  echo "        were determined to have a > 50% posterior probability of containing"
  echo "        cells."
  echo ""
  echo "    --output_report"
  echo "        type: file, output"
  echo "        example: report.pdf"
  echo "        PDF file that provides a standard graphical summary of the inference"
  echo "        procedure."
  echo ""
  echo "    --output_cell_barcodes"
  echo "        type: file, output"
  echo "        example: output.csv"
  echo "        CSV file containing all the droplet barcodes which were determined to"
  echo "        have a > 50% posterior probability of containing cells. Barcodes are"
  echo "        written in plain text. This information is also contained in each of the"
  echo "        above outputs, but is included as a separate output for convenient use"
  echo "        in certain downstream applications."
  echo ""
  echo "Arguments:"
  echo "    --model"
  echo "        type: string"
  echo "        choices: [ simple, ambient, swapping, full ]"
  echo "        Which model is being used for count data. 'simple'"
  echo "        does not model either ambient RNA or random barcode"
  echo "        swapping (for debugging purposes -- not recommended)."
  echo "        'ambient' assumes background RNA is incorporated into"
  echo "        droplets. 'swapping' assumes background RNA comes from"
  echo "        random barcode swapping. 'full' uses a combined"
  echo "        ambient and swapping model. Defaults to 'full'."
  echo ""
  echo "    --total_droplets_included"
  echo "        type: integer"
  echo "        example: 50000"
  echo "        The number of droplets from the rank-ordered UMI plot"
  echo "        that will be analyzed. The largest 'total_droplets'"
  echo "        droplets will have their cell probabilities inferred"
  echo "        as an output."
  echo ""
  echo "    --epochs"
  echo "        type: integer"
  echo "        example: 150"
  echo "        Number of epochs to train"
  echo ""
  echo "    --fpr"
  echo "        type: double"
  echo "        example: 0.01"
  echo "        Target false positive rate in (0, 1). A false positive"
  echo "        is a true signal count that is erroneously removed."
  echo "        More background removal is accompanied by more signal"
  echo "        removal at high values of FPR. You can specify"
  echo "        multiple values, which will create multiple output"
  echo "        files."
  echo ""
  echo "    --exclude_antibody_capture"
  echo "        type: boolean_true"
  echo "        Including the flag --exclude-antibody-capture will"
  echo "        cause remove-background to operate on gene counts"
  echo "        only, ignoring other features."
  echo ""
  echo "    --learning_rate"
  echo "        type: double"
  echo "        example: 1.0E-4"
  echo "        Training detail: lower learning rate for inference. A"
  echo "        OneCycle learning rate schedule is used, where the"
  echo "        upper learning rate is ten times this value. (For this"
  echo "        value, probably do not exceed 1e-3)."
  echo ""
  echo "    --cuda"
  echo "        type: boolean_true"
  echo "        Including the flag --cuda will run the inference on a"
  echo "        GPU."
}
######## Helper functions for setting up Docker images for viash ########
# expects: ViashDockerBuild

# ViashDockerInstallationCheck: check whether Docker is installed correctly
#
# examples:
#   ViashDockerInstallationCheck
function ViashDockerInstallationCheck {
  ViashDebug "Checking whether Docker is installed"
  if [ ! command -v docker &> /dev/null ]; then
    ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
    exit 1
  fi

  ViashDebug "Checking whether the Docker daemon is running"
  save=$-; set +e
  docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
    ViashCritical "- Try running 'dockerd' in the command line"
    ViashCritical "- See https://docs.docker.com/config/daemon/"
    exit 1
  fi
}

# ViashDockerRemoteTagCheck: check whether a Docker image is available 
# on a remote. Assumes `docker login` has been performed, if relevant.
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerRemoteTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerRemoteTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerRemoteTagCheck {
  docker manifest inspect $1 > /dev/null 2> /dev/null
}

# ViashDockerLocalTagCheck: check whether a Docker image is available locally
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   docker pull python:latest
#   ViashDockerLocalTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerLocalTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerLocalTagCheck {
  [ -n "$(docker images -q $1)" ]
}

# ViashDockerPull: pull a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPull python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPull sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPull {
  ViashNotice "Checking if Docker image is available at '$1'"
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker pull $1 && return 0 || return 1
  else
    save=$-; set +e
    docker pull $1 2> /dev/null > /dev/null
    out=$?
    [[ $save =~ e ]] && set -e
    if [ $out -ne 0 ]; then
      ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
    fi
    return $out
  fi
}

# ViashDockerPush: push a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPush python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPush sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPush {
  ViashNotice "Pushing image to '$1'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker push $1
    out=$?
  else
    docker push $1 2> /dev/null > /dev/null
    out=$?
  fi
  [[ $save =~ e ]] && set -e
  if [ $out -eq 0 ]; then
    ViashNotice "Container '$VSHD_ID' push succeeded."
  else
    ViashError "Container '$VSHD_ID' push errored. You might not be logged in or have the necessary permissions."
  fi
  return $out
}

# ViashDockerPullElseBuild: pull a Docker image, else build it
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerPullElseBuild mynewcomponent
function ViashDockerPullElseBuild {
  save=$-; set +e
  ViashDockerPull $1
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashDockerBuild $@
  fi
}

# ViashDockerSetup: create a Docker image, according to specified docker setup strategy
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $2                  : docker setup strategy, see DockerSetupStrategy.scala
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerSetup mynewcomponent alwaysbuild
function ViashDockerSetup {
  VSHD_ID="$1"
  VSHD_STRAT="$2"
  if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
    ViashDockerBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
    ViashDockerPull $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
    ViashDockerBuild $VSHD_ID
  elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
    save=$-; set +e
    ViashDockerLocalTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashInfo "Image $VSHD_ID already exists"
    elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
      ViashDockerBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
      ViashDockerBuild $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
      ViashDockerPull $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID
    else
      ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
      exit 1
    fi
  elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
    ViashDockerPush "$VSHD_ID"
  elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
    save=$-; set +e
    ViashDockerRemoteTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashNotice "Container '$VSHD_ID' exists, doing nothing."
    else
      ViashNotice "Container '$VSHD_ID' does not yet exist."
      ViashDockerPush "$VSHD_ID"
    fi
  elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
    ViashNotice "Skipping setup."
  else
    ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
    exit 1
  fi
}

# ViashDockerCheckCommands: Check whether a docker container has the required commands
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $@                  : commands to verify being present
# examples:
#   ViashDockerCheckCommands bash:4.0 bash ps foo
function ViashDockerCheckCommands {
  tag=$1
  shift 1
  commands="$@"
  save=$-; set +e
  missing=$(docker run --rm --entrypoint=sh $tag -c "for command in $commands; do command -v \$command >/dev/null 2>&1; if [ \$? -ne 0 ]; then echo \$command; exit 1; fi; done")
  outCheck=$?
  [[ $save =~ e ]] && set -e
  if [ $outCheck -ne 0 ]; then
  	ViashError "Docker container '$tag' does not contain command '$missing'."
  	exit 1
  fi
}


######## End of helper functions for setting up Docker images for viash ########

# ViashDockerFile: print the dockerfile to stdout
# return : dockerfile required to run this component
# examples:
#   ViashDockerFile
function ViashDockerfile {
  cat << 'VIASHDOCKER'
FROM us.gcr.io/broad-dsde-methods/cellbender:latest

RUN :
LABEL org.opencontainers.image.description="Companion container for running component correction cellbender_remove_background"
LABEL org.opencontainers.image.created="2022-10-03T15:13:56Z"
LABEL org.opencontainers.image.source="https://github.com/openpipelines-bio/openpipeline"
LABEL org.opencontainers.image.revision="796cc8e59a6155d99d50ba3b734fa8a0af03fc40"
LABEL org.opencontainers.image.version="main_build"
VIASHDOCKER
}

# ViashDockerBuild: build a docker container
# $1              : image identifier with format `[registry/]image[:tag]`
# exit code $?    : whether or not the image was built
function ViashDockerBuild {
  # create temporary directory to store dockerfile & optional resources in
  tmpdir=$(mktemp -d "$VIASH_META_TEMP_DIR/dockerbuild-cellbender_remove_background-XXXXXX")
  dockerfile="$tmpdir/Dockerfile"
  function clean_up {
    rm -rf "$tmpdir"
  }
  trap clean_up EXIT

  # store dockerfile and resources
  ViashDockerfile > $dockerfile

  # Build the container
  ViashNotice "Building container '$1' with Dockerfile"
  ViashInfo "Running 'docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile
  else
    docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile &> $tmpdir/docker_build.log
  fi
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashError "Error occurred while building container '$1'"
    if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
      ViashError "Transcript: --------------------------------"
      cat "$tmpdir/docker_build.log"
      ViashError "End of transcript --------------------------"
    fi
    exit 1
  fi
  ViashDockerCheckCommands "$1" 'bash'
}
# ViashAbsolutePath: generate absolute path from relative path
# borrowed from https://stackoverflow.com/a/21951256
# $1     : relative filename
# return : absolute path
# examples:
#   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
#   ViashAbsolutePath /foo/bar/..     # returns /foo
function ViashAbsolutePath {
  local thePath
  if [[ ! "$1" =~ ^/ ]]; then
    thePath="$PWD/$1"
  else
    thePath="$1"
  fi
  echo "$thePath" | (
    IFS=/
    read -a parr
    declare -a outp
    for i in "${parr[@]}"; do
      case "$i" in
      ''|.) continue ;;
      ..)
        len=${#outp[@]}
        if ((len==0)); then
          continue
        else
          unset outp[$((len-1))]
        fi
        ;;
      *)
        len=${#outp[@]}
        outp[$len]="$i"
      ;;
      esac
    done
    echo /"${outp[*]}"
  )
}
# ViashAutodetectMount: auto configuring docker mounts from parameters
# $1                  : The parameter value
# returns             : New parameter
# $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
# examples:
#   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
#   ViashAutodetectMountArg /path/to/bar   # returns '-v /path/to:/viash_automount/path/to'
function ViashAutodetectMount {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  echo "$mount_target/$base_name"
}
function ViashAutodetectMountArg {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  echo "-v \"$mount_source:$mount_target\""
}
# ViashExtractFlags: Retain leading flag
# $1     : string with a possible leading flag
# return : leading flag
# examples:
#   ViashExtractFlags --foo=bar  # returns --foo
function ViashExtractFlags {
  echo $1 | sed 's/=.*//'
}
# initialise variables
VIASH_EXTRA_MOUNTS=''

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "cellbender_remove_background main_build"
            exit
            ;;
        --input)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input=*)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'--input=*\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -i)
            [ -n "$VIASH_PAR_INPUT" ] && ViashError Bad arguments for option \'-i\': \'$VIASH_PAR_INPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to -i. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output=*)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output=*\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_filtered)
            [ -n "$VIASH_PAR_OUTPUT_FILTERED" ] && ViashError Bad arguments for option \'--output_filtered\': \'$VIASH_PAR_OUTPUT_FILTERED\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_FILTERED="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_filtered. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_filtered=*)
            [ -n "$VIASH_PAR_OUTPUT_FILTERED" ] && ViashError Bad arguments for option \'--output_filtered=*\': \'$VIASH_PAR_OUTPUT_FILTERED\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_FILTERED=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_report)
            [ -n "$VIASH_PAR_OUTPUT_REPORT" ] && ViashError Bad arguments for option \'--output_report\': \'$VIASH_PAR_OUTPUT_REPORT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_REPORT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_report. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_report=*)
            [ -n "$VIASH_PAR_OUTPUT_REPORT" ] && ViashError Bad arguments for option \'--output_report=*\': \'$VIASH_PAR_OUTPUT_REPORT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_REPORT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_cell_barcodes)
            [ -n "$VIASH_PAR_OUTPUT_CELL_BARCODES" ] && ViashError Bad arguments for option \'--output_cell_barcodes\': \'$VIASH_PAR_OUTPUT_CELL_BARCODES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_CELL_BARCODES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_cell_barcodes. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_cell_barcodes=*)
            [ -n "$VIASH_PAR_OUTPUT_CELL_BARCODES" ] && ViashError Bad arguments for option \'--output_cell_barcodes=*\': \'$VIASH_PAR_OUTPUT_CELL_BARCODES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_CELL_BARCODES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --model)
            [ -n "$VIASH_PAR_MODEL" ] && ViashError Bad arguments for option \'--model\': \'$VIASH_PAR_MODEL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODEL="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --model. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --model=*)
            [ -n "$VIASH_PAR_MODEL" ] && ViashError Bad arguments for option \'--model=*\': \'$VIASH_PAR_MODEL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODEL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --total_droplets_included)
            [ -n "$VIASH_PAR_TOTAL_DROPLETS_INCLUDED" ] && ViashError Bad arguments for option \'--total_droplets_included\': \'$VIASH_PAR_TOTAL_DROPLETS_INCLUDED\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TOTAL_DROPLETS_INCLUDED="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --total_droplets_included. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --total_droplets_included=*)
            [ -n "$VIASH_PAR_TOTAL_DROPLETS_INCLUDED" ] && ViashError Bad arguments for option \'--total_droplets_included=*\': \'$VIASH_PAR_TOTAL_DROPLETS_INCLUDED\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TOTAL_DROPLETS_INCLUDED=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --epochs)
            [ -n "$VIASH_PAR_EPOCHS" ] && ViashError Bad arguments for option \'--epochs\': \'$VIASH_PAR_EPOCHS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EPOCHS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --epochs. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --epochs=*)
            [ -n "$VIASH_PAR_EPOCHS" ] && ViashError Bad arguments for option \'--epochs=*\': \'$VIASH_PAR_EPOCHS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EPOCHS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --fpr)
            [ -n "$VIASH_PAR_FPR" ] && ViashError Bad arguments for option \'--fpr\': \'$VIASH_PAR_FPR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FPR="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --fpr. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --fpr=*)
            [ -n "$VIASH_PAR_FPR" ] && ViashError Bad arguments for option \'--fpr=*\': \'$VIASH_PAR_FPR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FPR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --exclude_antibody_capture)
            [ -n "$VIASH_PAR_EXCLUDE_ANTIBODY_CAPTURE" ] && ViashError Bad arguments for option \'--exclude_antibody_capture\': \'$VIASH_PAR_EXCLUDE_ANTIBODY_CAPTURE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EXCLUDE_ANTIBODY_CAPTURE=true
            shift 1
            ;;
        --learning_rate)
            [ -n "$VIASH_PAR_LEARNING_RATE" ] && ViashError Bad arguments for option \'--learning_rate\': \'$VIASH_PAR_LEARNING_RATE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LEARNING_RATE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --learning_rate. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --learning_rate=*)
            [ -n "$VIASH_PAR_LEARNING_RATE" ] && ViashError Bad arguments for option \'--learning_rate=*\': \'$VIASH_PAR_LEARNING_RATE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LEARNING_RATE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --cuda)
            [ -n "$VIASH_PAR_CUDA" ] && ViashError Bad arguments for option \'--cuda\': \'$VIASH_PAR_CUDA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_CUDA=true
            shift 1
            ;;
        ---setup)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$2"
            shift 1
            ;;
        ---setup=*)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
            shift 2
            ;;
        ---dockerfile)
            ViashDockerfile
            exit 0
            ;;
        ---v|---volume)
            VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v "$2""
            shift 2
            ;;
        ---volume=*)
            VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v $(ViashRemoveFlags "$2")"
            shift 1
            ;;
        ---debug)
            VIASH_MODE='docker_debug'
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


ViashDockerInstallationCheck
if [ $VIASH_MODE == "docker_setup" ]; then
  ViashDockerSetup 'ghcr.io/openpipelines-bio/correction_cellbender_remove_background:main_build' "$VIASH_DOCKER_SETUP_STRATEGY"
  exit 0
fi
ViashDockerSetup 'ghcr.io/openpipelines-bio/correction_cellbender_remove_background:main_build' ifneedbepullelsecachedbuild
if [ $VIASH_MODE == "docker_debug" ]; then
  ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/correction_cellbender_remove_background:main_build'"
  docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/correction_cellbender_remove_background:main_build'
  exit 0
fi

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


if [[ $# -gt 0 ]]; then
  VIASH_META_FUNCTIONALITY_NAME="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_RESOURCES_DIR="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_EXECUTABLE="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_TEMP_DIR="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_CPUS="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_B="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_KB="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_MB="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_GB="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_TB="$1"
  shift 1
fi
if [[ $# -gt 0 ]]; then
  VIASH_META_MEMORY_PB="$1"
  shift 1
fi

# check whether required parameters exist
if [ -z ${VIASH_PAR_INPUT+x} ]; then
  ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_OUTPUT+x} ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_OUTPUT_FILTERED+x} ]; then
  ViashError '--output_filtered' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_EXCLUDE_ANTIBODY_CAPTURE+x} ]; then
  VIASH_PAR_EXCLUDE_ANTIBODY_CAPTURE="false"
fi
if [ -z ${VIASH_PAR_CUDA+x} ]; then
  VIASH_PAR_CUDA="false"
fi


# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_TOTAL_DROPLETS_INCLUDED" ]]; then
  if ! [[ "$VIASH_PAR_TOTAL_DROPLETS_INCLUDED" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--total_droplets_included' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_PAR_EPOCHS" ]]; then
  if ! [[ "$VIASH_PAR_EPOCHS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--epochs' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_PAR_FPR" ]]; then
  if ! [[ "$VIASH_PAR_FPR" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--fpr' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_PAR_EXCLUDE_ANTIBODY_CAPTURE" ]]; then
  if ! [[ "$VIASH_PAR_EXCLUDE_ANTIBODY_CAPTURE" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--exclude_antibody_capture' has to be a boolean_true. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_PAR_LEARNING_RATE" ]]; then
  if ! [[ "$VIASH_PAR_LEARNING_RATE" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--learning_rate' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_PAR_CUDA" ]]; then
  if ! [[ "$VIASH_PAR_CUDA" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--cuda' has to be a boolean_true. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi


# check whether parameters values are of the right type





if [ ! -z "$VIASH_PAR_MODEL" ]; then
  VIASH_PAR_MODEL_CHOICES=("simple:ambient:swapping:full")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_MODEL_CHOICES[*]}:" =~ ":$VIASH_PAR_MODEL:" ]]; then
    ViashError '--model' specified value of \'$VIASH_PAR_MODEL\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi



















# detect volumes from file arguments
if [ ! -z "$VIASH_PAR_INPUT" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_INPUT")"
  VIASH_PAR_INPUT=$(ViashAutodetectMount "$VIASH_PAR_INPUT")
fi
if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT")"
  VIASH_PAR_OUTPUT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT")
fi
if [ ! -z "$VIASH_PAR_OUTPUT_FILTERED" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT_FILTERED")"
  VIASH_PAR_OUTPUT_FILTERED=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT_FILTERED")
fi
if [ ! -z "$VIASH_PAR_OUTPUT_REPORT" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT_REPORT")"
  VIASH_PAR_OUTPUT_REPORT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT_REPORT")
fi
if [ ! -z "$VIASH_PAR_OUTPUT_CELL_BARCODES" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT_CELL_BARCODES")"
  VIASH_PAR_OUTPUT_CELL_BARCODES=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT_CELL_BARCODES")
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_META_RESOURCES_DIR")"
  VIASH_META_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_META_EXECUTABLE")"
  VIASH_META_EXECUTABLE=$(ViashAutodetectMount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_META_TEMP_DIR")"
  VIASH_META_TEMP_DIR=$(ViashAutodetectMount "$VIASH_META_TEMP_DIR")
fi
# change file ownership
function ViashPerformChown {
  
  if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
    eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/openpipelines-bio/correction_cellbender_remove_background:main_build "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT"
  fi
  if [ ! -z "$VIASH_PAR_OUTPUT_FILTERED" ]; then
    eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/openpipelines-bio/correction_cellbender_remove_background:main_build "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT_FILTERED"
  fi
  if [ ! -z "$VIASH_PAR_OUTPUT_REPORT" ]; then
    eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/openpipelines-bio/correction_cellbender_remove_background:main_build "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT_REPORT"
  fi
  if [ ! -z "$VIASH_PAR_OUTPUT_CELL_BARCODES" ]; then
    eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/openpipelines-bio/correction_cellbender_remove_background:main_build "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT_CELL_BARCODES"
  fi
}
trap ViashPerformChown EXIT

# helper function for filling in extra docker args
VIASH_EXTRA_DOCKER_ARGS=""
if [ ! -z "$VIASH_META_MEMORY_MB" ]; then
  VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --memory=${VIASH_META_MEMORY_MB}m"
fi
if [ ! -z "$VIASH_META_CPUS" ]; then
  VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --cpus=${VIASH_META_CPUS}"
fi

cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm $VIASH_EXTRA_MOUNTS $VIASH_EXTRA_DOCKER_ARGS ghcr.io/openpipelines-bio/correction_cellbender_remove_background:main_build
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-cellbender_remove_background-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'


#!/bin/bash

## VIASH START
# The following code has been auto-generated by Viash.
$( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "${VIASH_PAR_INPUT}" | sed "s#'#'\"'\"'#g" | sed "s#.*#par_input='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "${VIASH_PAR_OUTPUT}" | sed "s#'#'\"'\"'#g" | sed "s#.*#par_output='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_OUTPUT_FILTERED+x} ]; then echo "${VIASH_PAR_OUTPUT_FILTERED}" | sed "s#'#'\"'\"'#g" | sed "s#.*#par_output_filtered='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_OUTPUT_REPORT+x} ]; then echo "${VIASH_PAR_OUTPUT_REPORT}" | sed "s#'#'\"'\"'#g" | sed "s#.*#par_output_report='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_OUTPUT_CELL_BARCODES+x} ]; then echo "${VIASH_PAR_OUTPUT_CELL_BARCODES}" | sed "s#'#'\"'\"'#g" | sed "s#.*#par_output_cell_barcodes='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_MODEL+x} ]; then echo "${VIASH_PAR_MODEL}" | sed "s#'#'\"'\"'#g" | sed "s#.*#par_model='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_TOTAL_DROPLETS_INCLUDED+x} ]; then echo "${VIASH_PAR_TOTAL_DROPLETS_INCLUDED}" | sed "s#'#'\"'\"'#g" | sed "s#.*#par_total_droplets_included='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_EPOCHS+x} ]; then echo "${VIASH_PAR_EPOCHS}" | sed "s#'#'\"'\"'#g" | sed "s#.*#par_epochs='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_FPR+x} ]; then echo "${VIASH_PAR_FPR}" | sed "s#'#'\"'\"'#g" | sed "s#.*#par_fpr='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_EXCLUDE_ANTIBODY_CAPTURE+x} ]; then echo "${VIASH_PAR_EXCLUDE_ANTIBODY_CAPTURE}" | sed "s#'#'\"'\"'#g" | sed "s#.*#par_exclude_antibody_capture='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_LEARNING_RATE+x} ]; then echo "${VIASH_PAR_LEARNING_RATE}" | sed "s#'#'\"'\"'#g" | sed "s#.*#par_learning_rate='&'#" ; fi )
$( if [ ! -z ${VIASH_PAR_CUDA+x} ]; then echo "${VIASH_PAR_CUDA}" | sed "s#'#'\"'\"'#g" | sed "s#.*#par_cuda='&'#" ; fi )
$( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "${VIASH_META_FUNCTIONALITY_NAME}" | sed "s#'#'\"'\"'#g" | sed "s#.*#meta_functionality_name='&'#" ; fi )
$( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "${VIASH_META_RESOURCES_DIR}" | sed "s#'#'\"'\"'#g" | sed "s#.*#meta_resources_dir='&'#" ; fi )
$( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "${VIASH_META_EXECUTABLE}" | sed "s#'#'\"'\"'#g" | sed "s#.*#meta_executable='&'#" ; fi )
$( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo "${VIASH_META_TEMP_DIR}" | sed "s#'#'\"'\"'#g" | sed "s#.*#meta_temp_dir='&'#" ; fi )
$( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo "${VIASH_META_CPUS}" | sed "s#'#'\"'\"'#g" | sed "s#.*#meta_cpus='&'#" ; fi )
$( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "${VIASH_META_MEMORY_B}" | sed "s#'#'\"'\"'#g" | sed "s#.*#meta_memory_b='&'#" ; fi )
$( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "${VIASH_META_MEMORY_KB}" | sed "s#'#'\"'\"'#g" | sed "s#.*#meta_memory_kb='&'#" ; fi )
$( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "${VIASH_META_MEMORY_MB}" | sed "s#'#'\"'\"'#g" | sed "s#.*#meta_memory_mb='&'#" ; fi )
$( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "${VIASH_META_MEMORY_GB}" | sed "s#'#'\"'\"'#g" | sed "s#.*#meta_memory_gb='&'#" ; fi )
$( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "${VIASH_META_MEMORY_TB}" | sed "s#'#'\"'\"'#g" | sed "s#.*#meta_memory_tb='&'#" ; fi )
$( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "${VIASH_META_MEMORY_PB}" | sed "s#'#'\"'\"'#g" | sed "s#.*#meta_memory_pb='&'#" ; fi )

## VIASH END


extra_params=( )

[ ! -z \$par_model ] && extra_params+=( "--model" "\$par_model" )
[ ! -z \$par_total_droplets_included ] && extra_params+=( "--total-droplets-included" "\$par_total_droplets_included" )
[ ! -z \$par_epochs ] && extra_params+=( "--epochs" "\$par_epochs" )
[ ! -z \$par_fdr ] && extra_params+=( "--fdr" "\$par_fdr" )
[ \$par_exclude_antibody_capture == "true" ] && extra_params+=( "--exclude-antibody-capture" )
[ ! -z \$par_learning_rate ] && extra_params+=( "--learning-rate" "\$par_learning_rate" )
[ \$par_cuda == "true" ] && extra_params+=( "--cuda" )

cellbender \\
  remove-background \\
  --input "\$par_input" \\
  --output "\$par_output" \\
  "\${extra_params[@]}"

[ ! -z "\$par_output_report" ] && mv "\${par_output%.h5}.pdf" "\$par_output_report"
[ ! -z "\$par_output_cell_barcodes" ] && mv "\${par_output%.h5}_cell_barcodes.csv" "\$par_output_cell_barcodes"
[ ! -z "\$par_output_filtered" ] && mv "\${par_output%.h5}_filtered.h5" "\$par_output_filtered"

VIASHMAIN
bash "\$tempscript" &
wait "\$!"

VIASHEOF
