#!/usr/bin/env bash

# cellxgene_census main_build
# 
# This wrapper script is auto-generated by viash 0.7.4 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.
# 
# Component authors:
#  * Matthias Beyens (author)

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="cellxgene_census"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"

# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "cellxgene_census main_build"
  echo ""
  echo "Query CellxGene Census or user-specified TileDBSoma object, and eventually fetch"
  echo "cell and gene metadata or/and expression counts."
  echo ""
  echo "Inputs:"
  echo "    Arguments related to the input (aka query) dataset."
  echo ""
  echo "    --input_database"
  echo "        type: string"
  echo "        default: CellxGene"
  echo "        example: s3://"
  echo "        Full input database S3 prefix URL. Default: CellxGene Census"
  echo ""
  echo "    --modality"
  echo "        type: string"
  echo "        default: rna"
  echo "        Which modality to store the output in."
  echo ""
  echo "    --cellxgene_release"
  echo "        type: string"
  echo "        default: 2023-05-15"
  echo "        CellxGene Census release date. More information:"
  echo "       "
  echo "https://chanzuckerberg.github.io/cellxgene-census/cellxgene_census_docsite_data_release_info.html"
  echo ""
  echo "Query:"
  echo "    Arguments related to the query."
  echo ""
  echo "    --species"
  echo "        type: string"
  echo "        default: homo_sapiens"
  echo "        example: homo_sapiens"
  echo "        choices: [ homo_sapiens, mus_musculus ]"
  echo "        Specie(s) of interest. If not specified, Homo Sapiens will be queried."
  echo ""
  echo "    --cell_type"
  echo "        type: string, multiple values allowed"
  echo "        example: mesothelial fibroblast"
  echo "        Cell type(s) of interest. Cell type should be one of the Cell Ontology"
  echo "        terms. If not specified, all cell types will be queried."
  echo ""
  echo "    --tissue"
  echo "        type: string, multiple values allowed"
  echo "        example: lung"
  echo "        Tissue(s) of interest. If not specified, all tissues will be queried."
  echo ""
  echo "    --technology"
  echo "        type: string, multiple values allowed"
  echo "        example: 10x 3' v3"
  echo "        choices: [ 10x 3' v1, 10x 3' v2, 10x 3' v3, 10x 5' v1, 10x 5' v2 ]"
  echo "        Technology(ies) of interest. If not specified, all technologies will be"
  echo "        queried."
  echo ""
  echo "    --suspension"
  echo "        type: string, multiple values allowed"
  echo "        example: cell"
  echo "        choices: [ cell, nucleus ]"
  echo "        Suspension(s) of interest. If not specified, all suspensions will be"
  echo "        queried."
  echo ""
  echo "    --is_primary_data"
  echo "        type: boolean"
  echo "        default: true"
  echo "        Allow only primary data in the query in order to prevent of data"
  echo "        duplication."
  echo ""
  echo "    --obs_column_names"
  echo "        type: string, multiple values allowed"
  echo "        obs columns of interest. If not specified, all columns will be returned."
  echo ""
  echo "    --metadata_only"
  echo "        type: boolean"
  echo "        default: true"
  echo "        By default only returns metadata of obs layer of query. If False,"
  echo "        returns metadata of obs layer and gene expression matrix of query"
  echo ""
  echo "Outputs:"
  echo "    Output arguments."
  echo ""
  echo "    --output"
  echo "        type: file, required parameter, output, file must exist"
  echo "        example: output.h5mu"
  echo "        Output h5mu file."
  echo ""
  echo "    --output_compression"
  echo "        type: string"
  echo "        example: gzip"
  echo "        choices: [ gzip, lzf ]"
}

######## Helper functions for setting up Docker images for viash ########
# expects: ViashDockerBuild

# ViashDockerInstallationCheck: check whether Docker is installed correctly
#
# examples:
#   ViashDockerInstallationCheck
function ViashDockerInstallationCheck {
  ViashDebug "Checking whether Docker is installed"
  if [ ! command -v docker &> /dev/null ]; then
    ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
    exit 1
  fi

  ViashDebug "Checking whether the Docker daemon is running"
  save=$-; set +e
  docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
    ViashCritical "- Try running 'dockerd' in the command line"
    ViashCritical "- See https://docs.docker.com/config/daemon/"
    exit 1
  fi
}

# ViashDockerRemoteTagCheck: check whether a Docker image is available 
# on a remote. Assumes `docker login` has been performed, if relevant.
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerRemoteTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerRemoteTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerRemoteTagCheck {
  docker manifest inspect $1 > /dev/null 2> /dev/null
}

# ViashDockerLocalTagCheck: check whether a Docker image is available locally
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   docker pull python:latest
#   ViashDockerLocalTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerLocalTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerLocalTagCheck {
  [ -n "$(docker images -q $1)" ]
}

# ViashDockerPull: pull a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPull python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPull sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPull {
  ViashNotice "Checking if Docker image is available at '$1'"
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker pull $1 && return 0 || return 1
  else
    save=$-; set +e
    docker pull $1 2> /dev/null > /dev/null
    out=$?
    [[ $save =~ e ]] && set -e
    if [ $out -ne 0 ]; then
      ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
    fi
    return $out
  fi
}

# ViashDockerPush: push a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPush python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPush sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPush {
  ViashNotice "Pushing image to '$1'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker push $1
    out=$?
  else
    docker push $1 2> /dev/null > /dev/null
    out=$?
  fi
  [[ $save =~ e ]] && set -e
  if [ $out -eq 0 ]; then
    ViashNotice "Container '$VSHD_ID' push succeeded."
  else
    ViashError "Container '$VSHD_ID' push errored. You might not be logged in or have the necessary permissions."
  fi
  return $out
}

# ViashDockerPullElseBuild: pull a Docker image, else build it
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerPullElseBuild mynewcomponent
function ViashDockerPullElseBuild {
  save=$-; set +e
  ViashDockerPull $1
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashDockerBuild $@
  fi
}

# ViashDockerSetup: create a Docker image, according to specified docker setup strategy
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $2                  : docker setup strategy, see DockerSetupStrategy.scala
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerSetup mynewcomponent alwaysbuild
function ViashDockerSetup {
  VSHD_ID="$1"
  VSHD_STRAT="$2"
  if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
    ViashDockerBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
    ViashDockerPull $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
    ViashDockerBuild $VSHD_ID
  elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
    save=$-; set +e
    ViashDockerLocalTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashInfo "Image $VSHD_ID already exists"
    elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
      ViashDockerBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
      ViashDockerBuild $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
      ViashDockerPull $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID
    else
      ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
      exit 1
    fi
  elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
    ViashDockerPush "$VSHD_ID"
  elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
    save=$-; set +e
    ViashDockerRemoteTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashNotice "Container '$VSHD_ID' exists, doing nothing."
    else
      ViashNotice "Container '$VSHD_ID' does not yet exist."
      ViashDockerPush "$VSHD_ID"
    fi
  elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
    ViashNotice "Skipping setup."
  else
    ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
    exit 1
  fi
}

# ViashDockerCheckCommands: Check whether a docker container has the required commands
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $@                  : commands to verify being present
# examples:
#   ViashDockerCheckCommands bash:4.0 bash ps foo
function ViashDockerCheckCommands {
  tag=$1
  shift 1
  commands="$@"
  save=$-; set +e
  missing=$(docker run --rm --entrypoint=sh $tag -c "for command in $commands; do command -v \$command >/dev/null 2>&1; if [ \$? -ne 0 ]; then echo \$command; exit 1; fi; done")
  outCheck=$?
  [[ $save =~ e ]] && set -e
  if [ $outCheck -ne 0 ]; then
  	ViashError "Docker container '$tag' does not contain command '$missing'."
  	exit 1
  fi
}


######## End of helper functions for setting up Docker images for viash ########

# ViashDockerFile: print the dockerfile to stdout
# return : dockerfile required to run this component
# examples:
#   ViashDockerFile
function ViashDockerfile {
  cat << 'VIASHDOCKER'
FROM python:3.9

ENTRYPOINT []

 
RUN pip install --upgrade pip && \
  pip install --upgrade --no-cache-dir "mudata~=0.2.3" "anndata~=0.9.1" "cellxgene-census~=1.2.0" "obonet~=1.0.0"

LABEL org.opencontainers.image.authors="Matthias Beyens"
LABEL org.opencontainers.image.description="Companion container for running component query cellxgene_census"
LABEL org.opencontainers.image.created="2023-08-07T13:42:03Z"
LABEL org.opencontainers.image.source="https://github.com/openpipelines-bio/openpipeline"
LABEL org.opencontainers.image.revision="eccdc24477aec7ed3bfcba743075f64610d1eb01"
LABEL org.opencontainers.image.version="main_build"

VIASHDOCKER
}

# ViashDockerBuild: build a docker container
# $1              : image identifier with format `[registry/]image[:tag]`
# exit code $?    : whether or not the image was built
function ViashDockerBuild {
  # create temporary directory to store dockerfile & optional resources in
  tmpdir=$(mktemp -d "$VIASH_META_TEMP_DIR/dockerbuild-cellxgene_census-XXXXXX")
  dockerfile="$tmpdir/Dockerfile"
  function clean_up {
    rm -rf "$tmpdir"
  }
  trap clean_up EXIT

  # store dockerfile and resources
  ViashDockerfile > $dockerfile

  # Build the container
  ViashNotice "Building container '$1' with Dockerfile"
  ViashInfo "Running 'docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile
  else
    docker build -t $@ $VIASH_META_RESOURCES_DIR -f $dockerfile &> $tmpdir/docker_build.log
  fi
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashError "Error occurred while building container '$1'"
    if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
      ViashError "Transcript: --------------------------------"
      cat "$tmpdir/docker_build.log"
      ViashError "End of transcript --------------------------"
    fi
    exit 1
  fi
  ViashDockerCheckCommands "$1" 'ps' 'bash'
}

# ViashAbsolutePath: generate absolute path from relative path
# borrowed from https://stackoverflow.com/a/21951256
# $1     : relative filename
# return : absolute path
# examples:
#   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
#   ViashAbsolutePath /foo/bar/..     # returns /foo
function ViashAbsolutePath {
  local thePath
  if [[ ! "$1" =~ ^/ ]]; then
    thePath="$PWD/$1"
  else
    thePath="$1"
  fi
  echo "$thePath" | (
    IFS=/
    read -a parr
    declare -a outp
    for i in "${parr[@]}"; do
      case "$i" in
      ''|.) continue ;;
      ..)
        len=${#outp[@]}
        if ((len==0)); then
          continue
        else
          unset outp[$((len-1))]
        fi
        ;;
      *)
        len=${#outp[@]}
        outp[$len]="$i"
      ;;
      esac
    done
    echo /"${outp[*]}"
  )
}
# ViashAutodetectMount: auto configuring docker mounts from parameters
# $1                  : The parameter value
# returns             : New parameter
# $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
# examples:
#   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
#   ViashAutodetectMountArg /path/to/bar   # returns '--volume="/path/to:/viash_automount/path/to"'
function ViashAutodetectMount {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  echo "$mount_target/$base_name"
}
function ViashAutodetectMountArg {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  echo "--volume=\"$mount_source:$mount_target\""
}
function ViashStripAutomount {
  abs_path=$(ViashAbsolutePath "$1")
  echo "${abs_path#/viash_automount}"
}
# ViashExtractFlags: Retain leading flag
# $1     : string with a possible leading flag
# return : leading flag
# examples:
#   ViashExtractFlags --foo=bar  # returns --foo
function ViashExtractFlags {
  echo $1 | sed 's/=.*//'
}
# initialise variables
VIASH_EXTRA_MOUNTS=()

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "cellxgene_census main_build"
            exit
            ;;
        --input_database)
            [ -n "$VIASH_PAR_INPUT_DATABASE" ] && ViashError Bad arguments for option \'--input_database\': \'$VIASH_PAR_INPUT_DATABASE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_DATABASE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --input_database. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --input_database=*)
            [ -n "$VIASH_PAR_INPUT_DATABASE" ] && ViashError Bad arguments for option \'--input_database=*\': \'$VIASH_PAR_INPUT_DATABASE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INPUT_DATABASE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --modality)
            [ -n "$VIASH_PAR_MODALITY" ] && ViashError Bad arguments for option \'--modality\': \'$VIASH_PAR_MODALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODALITY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --modality. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --modality=*)
            [ -n "$VIASH_PAR_MODALITY" ] && ViashError Bad arguments for option \'--modality=*\': \'$VIASH_PAR_MODALITY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODALITY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --cellxgene_release)
            [ -n "$VIASH_PAR_CELLXGENE_RELEASE" ] && ViashError Bad arguments for option \'--cellxgene_release\': \'$VIASH_PAR_CELLXGENE_RELEASE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_CELLXGENE_RELEASE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --cellxgene_release. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --cellxgene_release=*)
            [ -n "$VIASH_PAR_CELLXGENE_RELEASE" ] && ViashError Bad arguments for option \'--cellxgene_release=*\': \'$VIASH_PAR_CELLXGENE_RELEASE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_CELLXGENE_RELEASE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --species)
            [ -n "$VIASH_PAR_SPECIES" ] && ViashError Bad arguments for option \'--species\': \'$VIASH_PAR_SPECIES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SPECIES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --species. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --species=*)
            [ -n "$VIASH_PAR_SPECIES" ] && ViashError Bad arguments for option \'--species=*\': \'$VIASH_PAR_SPECIES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SPECIES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --cell_type)
            if [ -z "$VIASH_PAR_CELL_TYPE" ]; then
              VIASH_PAR_CELL_TYPE="$2"
            else
              VIASH_PAR_CELL_TYPE="$VIASH_PAR_CELL_TYPE:""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --cell_type. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --cell_type=*)
            if [ -z "$VIASH_PAR_CELL_TYPE" ]; then
              VIASH_PAR_CELL_TYPE=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_CELL_TYPE="$VIASH_PAR_CELL_TYPE:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --tissue)
            if [ -z "$VIASH_PAR_TISSUE" ]; then
              VIASH_PAR_TISSUE="$2"
            else
              VIASH_PAR_TISSUE="$VIASH_PAR_TISSUE:""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --tissue. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --tissue=*)
            if [ -z "$VIASH_PAR_TISSUE" ]; then
              VIASH_PAR_TISSUE=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_TISSUE="$VIASH_PAR_TISSUE:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --technology)
            if [ -z "$VIASH_PAR_TECHNOLOGY" ]; then
              VIASH_PAR_TECHNOLOGY="$2"
            else
              VIASH_PAR_TECHNOLOGY="$VIASH_PAR_TECHNOLOGY:""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --technology. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --technology=*)
            if [ -z "$VIASH_PAR_TECHNOLOGY" ]; then
              VIASH_PAR_TECHNOLOGY=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_TECHNOLOGY="$VIASH_PAR_TECHNOLOGY:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --suspension)
            if [ -z "$VIASH_PAR_SUSPENSION" ]; then
              VIASH_PAR_SUSPENSION="$2"
            else
              VIASH_PAR_SUSPENSION="$VIASH_PAR_SUSPENSION:""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --suspension. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --suspension=*)
            if [ -z "$VIASH_PAR_SUSPENSION" ]; then
              VIASH_PAR_SUSPENSION=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_SUSPENSION="$VIASH_PAR_SUSPENSION:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --is_primary_data)
            [ -n "$VIASH_PAR_IS_PRIMARY_DATA" ] && ViashError Bad arguments for option \'--is_primary_data\': \'$VIASH_PAR_IS_PRIMARY_DATA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_IS_PRIMARY_DATA="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --is_primary_data. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --is_primary_data=*)
            [ -n "$VIASH_PAR_IS_PRIMARY_DATA" ] && ViashError Bad arguments for option \'--is_primary_data=*\': \'$VIASH_PAR_IS_PRIMARY_DATA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_IS_PRIMARY_DATA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --obs_column_names)
            if [ -z "$VIASH_PAR_OBS_COLUMN_NAMES" ]; then
              VIASH_PAR_OBS_COLUMN_NAMES="$2"
            else
              VIASH_PAR_OBS_COLUMN_NAMES="$VIASH_PAR_OBS_COLUMN_NAMES:""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_column_names. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --obs_column_names=*)
            if [ -z "$VIASH_PAR_OBS_COLUMN_NAMES" ]; then
              VIASH_PAR_OBS_COLUMN_NAMES=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_OBS_COLUMN_NAMES="$VIASH_PAR_OBS_COLUMN_NAMES:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --metadata_only)
            [ -n "$VIASH_PAR_METADATA_ONLY" ] && ViashError Bad arguments for option \'--metadata_only\': \'$VIASH_PAR_METADATA_ONLY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_METADATA_ONLY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --metadata_only. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --metadata_only=*)
            [ -n "$VIASH_PAR_METADATA_ONLY" ] && ViashError Bad arguments for option \'--metadata_only=*\': \'$VIASH_PAR_METADATA_ONLY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_METADATA_ONLY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output=*)
            [ -n "$VIASH_PAR_OUTPUT" ] && ViashError Bad arguments for option \'--output=*\': \'$VIASH_PAR_OUTPUT\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_compression)
            [ -n "$VIASH_PAR_OUTPUT_COMPRESSION" ] && ViashError Bad arguments for option \'--output_compression\': \'$VIASH_PAR_OUTPUT_COMPRESSION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_COMPRESSION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --output_compression. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --output_compression=*)
            [ -n "$VIASH_PAR_OUTPUT_COMPRESSION" ] && ViashError Bad arguments for option \'--output_compression=*\': \'$VIASH_PAR_OUTPUT_COMPRESSION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_OUTPUT_COMPRESSION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---setup)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$2"
            shift 1
            ;;
        ---setup=*)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
            shift 2
            ;;
        ---dockerfile)
            ViashDockerfile
            exit 0
            ;;
        ---v|---volume)
            VIASH_EXTRA_MOUNTS+=("--volume='$2'")
            shift 2
            ;;
        ---volume=*)
            VIASH_EXTRA_MOUNTS+=("--volume='$(ViashRemoveFlags "$2")'")
            shift 1
            ;;
        ---debug)
            VIASH_MODE='docker_debug'
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


ViashDockerInstallationCheck

if [ $VIASH_MODE == "docker_setup" ]; then
  ViashDockerSetup 'ghcr.io/openpipelines-bio/query_cellxgene_census:main_build' "$VIASH_DOCKER_SETUP_STRATEGY"
  exit 0
fi
ViashDockerSetup 'ghcr.io/openpipelines-bio/query_cellxgene_census:main_build' ifneedbepullelsecachedbuild

if [ $VIASH_MODE == "docker_debug" ]; then
  ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/query_cellxgene_census:main_build'"
  docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/query_cellxgene_census:main_build'
  exit 0
fi

# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_PAR_OUTPUT+x} ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_INPUT_DATABASE+x} ]; then
  VIASH_PAR_INPUT_DATABASE="CellxGene"
fi
if [ -z ${VIASH_PAR_MODALITY+x} ]; then
  VIASH_PAR_MODALITY="rna"
fi
if [ -z ${VIASH_PAR_CELLXGENE_RELEASE+x} ]; then
  VIASH_PAR_CELLXGENE_RELEASE="2023-05-15"
fi
if [ -z ${VIASH_PAR_SPECIES+x} ]; then
  VIASH_PAR_SPECIES="homo_sapiens"
fi
if [ -z ${VIASH_PAR_IS_PRIMARY_DATA+x} ]; then
  VIASH_PAR_IS_PRIMARY_DATA="true"
fi
if [ -z ${VIASH_PAR_METADATA_ONLY+x} ]; then
  VIASH_PAR_METADATA_ONLY="true"
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_IS_PRIMARY_DATA" ]]; then
  if ! [[ "$VIASH_PAR_IS_PRIMARY_DATA" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--is_primary_data' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_METADATA_ONLY" ]]; then
  if ! [[ "$VIASH_PAR_METADATA_ONLY" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--metadata_only' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# check whether value is belongs to a set of choices
if [ ! -z "$VIASH_PAR_SPECIES" ]; then
  VIASH_PAR_SPECIES_CHOICES=("homo_sapiens:mus_musculus")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_SPECIES_CHOICES[*]}:" =~ ":$VIASH_PAR_SPECIES:" ]]; then
    ViashError '--species' specified value of \'$VIASH_PAR_SPECIES\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_TECHNOLOGY" ]; then
  VIASH_PAR_TECHNOLOGY_CHOICES=("10x 3' v1:10x 3' v2:10x 3' v3:10x 5' v1:10x 5' v2")
  IFS=':'
  set -f
  for val in $VIASH_PAR_TECHNOLOGY; do
    if ! [[ ":${VIASH_PAR_TECHNOLOGY_CHOICES[*]}:" =~ ":${val}:" ]]; then
      ViashError '--technology' specified value of \'${val}\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
      exit 1
    fi
  done
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_SUSPENSION" ]; then
  VIASH_PAR_SUSPENSION_CHOICES=("cell:nucleus")
  IFS=':'
  set -f
  for val in $VIASH_PAR_SUSPENSION; do
    if ! [[ ":${VIASH_PAR_SUSPENSION_CHOICES[*]}:" =~ ":${val}:" ]]; then
      ViashError '--suspension' specified value of \'${val}\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
      exit 1
    fi
  done
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_OUTPUT_COMPRESSION" ]; then
  VIASH_PAR_OUTPUT_COMPRESSION_CHOICES=("gzip:lzf")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_OUTPUT_COMPRESSION_CHOICES[*]}:" =~ ":$VIASH_PAR_OUTPUT_COMPRESSION:" ]]; then
    ViashError '--output_compression' specified value of \'$VIASH_PAR_OUTPUT_COMPRESSION\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -d "$(dirname "$VIASH_PAR_OUTPUT")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_OUTPUT")"
fi

# detect volumes from file arguments
VIASH_CHOWN_VARS=()
if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_EXTRA_MOUNTS+=( $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT") )
  VIASH_PAR_OUTPUT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT")
  VIASH_CHOWN_VARS+=( "$VIASH_PAR_OUTPUT" )
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_EXTRA_MOUNTS+=( $(ViashAutodetectMountArg "$VIASH_META_RESOURCES_DIR") )
  VIASH_META_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_EXTRA_MOUNTS+=( $(ViashAutodetectMountArg "$VIASH_META_EXECUTABLE") )
  VIASH_META_EXECUTABLE=$(ViashAutodetectMount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_CONFIG" ]; then
  VIASH_EXTRA_MOUNTS+=( $(ViashAutodetectMountArg "$VIASH_META_CONFIG") )
  VIASH_META_CONFIG=$(ViashAutodetectMount "$VIASH_META_CONFIG")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_EXTRA_MOUNTS+=( $(ViashAutodetectMountArg "$VIASH_META_TEMP_DIR") )
  VIASH_META_TEMP_DIR=$(ViashAutodetectMount "$VIASH_META_TEMP_DIR")
fi

# get unique mounts
VIASH_UNIQUE_MOUNTS=($(for val in "${VIASH_EXTRA_MOUNTS[@]}"; do echo "$val"; done | sort -u))

# change file ownership
function ViashPerformChown {
  if (( ${#VIASH_CHOWN_VARS[@]} )); then
    set +e
    eval docker run --entrypoint=chown -i --rm ${VIASH_UNIQUE_MOUNTS[@]} ghcr.io/openpipelines-bio/query_cellxgene_census:main_build "$(id -u):$(id -g)" --silent --recursive ${VIASH_CHOWN_VARS[@]}
    set -e
  fi
}
trap ViashPerformChown EXIT

# helper function for filling in extra docker args
VIASH_EXTRA_DOCKER_ARGS=""
if [ ! -z "$VIASH_META_MEMORY_MB" ]; then
  VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --memory=${VIASH_META_MEMORY_MB}m"
fi
if [ ! -z "$VIASH_META_CPUS" ]; then
  VIASH_EXTRA_DOCKER_ARGS="$VIASH_EXTRA_DOCKER_ARGS --cpus=${VIASH_META_CPUS}"
fi

ViashDebug "Running command: $(echo docker run --entrypoint=bash -i --rm ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_EXTRA_DOCKER_ARGS ghcr.io/openpipelines-bio/query_cellxgene_census:main_build)"
cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_EXTRA_DOCKER_ARGS ghcr.io/openpipelines-bio/query_cellxgene_census:main_build
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-cellxgene_census-XXXXXX").py
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
import sys
import os
import logging
import cellxgene_census
import mudata as mu
import anndata as ad
from scipy.sparse import csr_matrix
import obonet

# set up logger
logger = logging.getLogger()
logger.setLevel(logging.INFO)
console_handler = logging.StreamHandler(sys.stdout)
logFormatter = logging.Formatter("%(asctime)s %(levelname)-8s %(message)s")
console_handler.setFormatter(logFormatter)
logger.addHandler(console_handler)

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input_database': $( if [ ! -z ${VIASH_PAR_INPUT_DATABASE+x} ]; then echo "r'${VIASH_PAR_INPUT_DATABASE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'modality': $( if [ ! -z ${VIASH_PAR_MODALITY+x} ]; then echo "r'${VIASH_PAR_MODALITY//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'cellxgene_release': $( if [ ! -z ${VIASH_PAR_CELLXGENE_RELEASE+x} ]; then echo "r'${VIASH_PAR_CELLXGENE_RELEASE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'species': $( if [ ! -z ${VIASH_PAR_SPECIES+x} ]; then echo "r'${VIASH_PAR_SPECIES//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'cell_type': $( if [ ! -z ${VIASH_PAR_CELL_TYPE+x} ]; then echo "r'${VIASH_PAR_CELL_TYPE//\'/\'\"\'\"r\'}'.split(':')"; else echo None; fi ),
  'tissue': $( if [ ! -z ${VIASH_PAR_TISSUE+x} ]; then echo "r'${VIASH_PAR_TISSUE//\'/\'\"\'\"r\'}'.split(':')"; else echo None; fi ),
  'technology': $( if [ ! -z ${VIASH_PAR_TECHNOLOGY+x} ]; then echo "r'${VIASH_PAR_TECHNOLOGY//\'/\'\"\'\"r\'}'.split(':')"; else echo None; fi ),
  'suspension': $( if [ ! -z ${VIASH_PAR_SUSPENSION+x} ]; then echo "r'${VIASH_PAR_SUSPENSION//\'/\'\"\'\"r\'}'.split(':')"; else echo None; fi ),
  'is_primary_data': $( if [ ! -z ${VIASH_PAR_IS_PRIMARY_DATA+x} ]; then echo "r'${VIASH_PAR_IS_PRIMARY_DATA//\'/\'\"\'\"r\'}'.lower() == 'true'"; else echo None; fi ),
  'obs_column_names': $( if [ ! -z ${VIASH_PAR_OBS_COLUMN_NAMES+x} ]; then echo "r'${VIASH_PAR_OBS_COLUMN_NAMES//\'/\'\"\'\"r\'}'.split(':')"; else echo None; fi ),
  'metadata_only': $( if [ ! -z ${VIASH_PAR_METADATA_ONLY+x} ]; then echo "r'${VIASH_PAR_METADATA_ONLY//\'/\'\"\'\"r\'}'.lower() == 'true'"; else echo None; fi ),
  'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "r'${VIASH_PAR_OUTPUT//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'output_compression': $( if [ ! -z ${VIASH_PAR_OUTPUT_COMPRESSION+x} ]; then echo "r'${VIASH_PAR_OUTPUT_COMPRESSION//\'/\'\"\'\"r\'}'"; else echo None; fi )
}
meta = {
  'functionality_name': $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "r'${VIASH_META_FUNCTIONALITY_NAME//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'resources_dir': $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "r'${VIASH_META_RESOURCES_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'executable': $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "r'${VIASH_META_EXECUTABLE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'config': $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo "r'${VIASH_META_CONFIG//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'temp_dir': $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo "r'${VIASH_META_TEMP_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'cpus': $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo "int(r'${VIASH_META_CPUS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_b': $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "int(r'${VIASH_META_MEMORY_B//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_kb': $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "int(r'${VIASH_META_MEMORY_KB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_mb': $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "int(r'${VIASH_META_MEMORY_MB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_gb': $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "int(r'${VIASH_META_MEMORY_GB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_tb': $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "int(r'${VIASH_META_MEMORY_TB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_pb': $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "int(r'${VIASH_META_MEMORY_PB//\'/\'\"\'\"r\'}')"; else echo None; fi )
}

### VIASH END


def connect_census(input_database, release):
    """
    Connect to CellxGene Census or user-provided TileDBSoma object
    """
    if input_database != "CellxGene":
        raise NotImplementedError(
            "Custom census database is not implemented yet!"
            )

    logger.info(
        "Initializing %s release %s",
        input_database, release
        )
    return cellxgene_census.open_soma(
        census_version = release
        )


def read_cell_ontology(obo_file):
    """Reads Cell Type OBO Foundry file

    Returns:
        graph: cell type obo ontology
    """
    return obonet.read_obo(
        obo_file,
        encoding="utf-8"
    )


def get_cell_type_terms(cell_types, obo_file):
    if not cell_types:
        return
    logger.info("Reading Cell Ontology OBO")

    co = read_cell_ontology(obo_file)
    id_to_name = {
        id_: data.get("name")
        for id_, data in co.nodes(data=True)
        }
    id_to_name = {
        term_id: term_name
        for term_id, term_name in id_to_name.items()
        if term_name is not None
        }
    name_to_id = {
        term_name: term_id
        for term_id, term_name in id_to_name.items()
        }

    # TODO: can be more pythonic
    lower_hierarchy_cell_of_interest_map = {}
    cell_of_interest_terms = []
    for cell_type in cell_types:
        logger.info("Locating all child cell types of %s", cell_type)
        node = name_to_id[cell_type]
        lower_hierarchy_cell_of_interest_map.update(
            {
                parent:id_to_name[parent]
                for parent, _, key in co.in_edges(node, keys=True)
                if key == 'is_a'
                }
            )
        lower_hierarchy_cell_of_interest_map.update({node: cell_type})
        cell_of_interest_terms.extend(
            list(lower_hierarchy_cell_of_interest_map.keys())
            )

    logger.info(lower_hierarchy_cell_of_interest_map)

    return cell_of_interest_terms


# TODO: function to explore cell types available in query data
# def view_available_cell_types(lower_hierarchy_cell_of_interest_map, cell_of_interest_terms):
#     cells_of_interest_query_terms = list(adata.obs.cell_type_ontology_term_id.unique())
#     avail_cells_overview = []
#     for term in cell_of_interest_terms:
#         if term in cells_of_interest_query_terms:
#             avail_cells_overview.append("Available: {}-{}".format(term, lower_hierarchy_cell_of_interest_map[term]))
#         else:
#             avail_cells_overview.append("Unavailable: {}-{}".format(term, lower_hierarchy_cell_of_interest_map[term]))
#     avail_cells_overview.sort()
#     logging.info(avail_cells_overview)


def build_census_query(par, obo_file):
    _query = f'is_primary_data == {par["is_primary_data"]}'
    query_builder = {
        'cell_type': f' and cell_type_ontology_term_id in {get_cell_type_terms(par["cell_type"], obo_file)}',
        'tissue': f' and tissue in {par["tissue"]}',
        'technology': f' and assay in {par["technology"]}',
        'suspension': f' and suspension_type in {par["suspension"]}',
    }
    for parameter_name, query_part in query_builder.items():
        if par[parameter_name]:
            _query += query_part

    return _query


def extract_metadata(census_connection, query, species, obs_column_names):
    logger.info("Extracting only metadata")

    query_data = census_connection["census_data"][species].obs.read(
        value_filter=query,
        column_names=obs_column_names).concat().to_pandas()

    return ad.AnnData(obs=query_data)


def extract_metadata_expression(
    census_connection, query,species, obs_column_names):
    logger.info("Extracting metadata and gene expression matrix")

    query_data = cellxgene_census.get_anndata(
        census_connection,
        organism = species,
        obs_value_filter = query,
        column_names = {"obs": obs_column_names}
        )

    query_data.X = csr_matrix(query_data.X)
    query_data.var_names_make_unique()

    return query_data


def write_mudata(mdata, output_location, compression):
    logger.info("Writing %s", output_location)
    mdata.write_h5mu(
        output_location,
        compression = compression
        )


def main():

    census_connection = connect_census(
        par["input_database"],
        par["cellxgene_release"]
        )
    query = build_census_query(par, f"{meta['resources_dir']}/cl-base.obo")

    if par["metadata_only"]:
        query_data = extract_metadata(
            census_connection, query, par["species"], par["obs_column_names"]
            )

    else:
        query_data = extract_metadata_expression(
            census_connection, query, par["species"], par["obs_column_names"]
            )

    census_connection.close()
    del census_connection

    mdata = mu.MuData(
        {par["modality"]: query_data}
        )

    write_mudata(mdata, par["output"], par["output_compression"])

if __name__ == "__main__":
    main()
VIASHMAIN
python "\$tempscript" &
wait "\$!"

VIASHEOF


# strip viash automount from file paths
if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
  VIASH_PAR_OUTPUT=$(ViashStripAutomount "$VIASH_PAR_OUTPUT")
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_META_RESOURCES_DIR=$(ViashStripAutomount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_META_EXECUTABLE=$(ViashStripAutomount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_CONFIG" ]; then
  VIASH_META_CONFIG=$(ViashStripAutomount "$VIASH_META_CONFIG")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_META_TEMP_DIR=$(ViashStripAutomount "$VIASH_META_TEMP_DIR")
fi


# check whether required files exist
if [ ! -z "$VIASH_PAR_OUTPUT" ] && [ ! -e "$VIASH_PAR_OUTPUT" ]; then
  ViashError "Output file '$VIASH_PAR_OUTPUT' does not exist."
  exit 1
fi


exit 0
