functionality:
  name: "convert_bdrhap_to_h5ad"
  namespace: "convert"
  version: "main_build"
  authors:
  - name: "Robrecht Cannoodt"
    email: "rcannood@gmail.com"
    roles:
    - "maintainer"
    props:
      github: "rcannood"
      orcid: "0000-0003-3641-729X"
  arguments:
  - type: "file"
    name: "--input"
    alternatives:
    - "-i"
    description: "One or more folders containing the output of the BD Rhapsody workflow.\
      \ If multiple are given, they are all combined into one h5ad file."
    example: "input_dir/"
    must_exist: false
    required: true
    direction: "Input"
    multiple: true
    multiple_sep: ":"
  - type: "string"
    name: "--id"
    alternatives: []
    description: "A vector of ids with same length as --input."
    example: "my_id"
    required: false
    direction: "Input"
    multiple: true
    multiple_sep: ":"
  - type: "file"
    name: "--output"
    alternatives:
    - "-o"
    description: "Output h5ad file."
    example: "output.h5ad"
    must_exist: false
    required: true
    direction: "Output"
    multiple: false
    multiple_sep: ":"
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      ###########################################
      #    convert_bdrhap_to_h5ad main_build    #
      ###########################################
      
      # This wrapper script is auto-generated by viash 0.5.0 and is thus a derivative
      # work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
      # Intuitive.  The component may contain files which fall under a different
      # license. The authors of this component should specify the license in the
      # header of such files, or include a separate license file detailing the
      # licenses of all included files.
      #
      # Component authors:
      # * Robrecht Cannoodt <rcannood@gmail.com> (maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=/tmp
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      VIASH_VERBOSITY=5
      
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '. 
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '. 
      function ViashEmergency {
        ViashLog 0 emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '. 
      function ViashAlert {
        ViashLog 1 alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '. 
      function ViashCritical {
        ViashLog 2 critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '. 
      function ViashError {
        ViashLog 3 error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '. 
      function ViashWarning {
        ViashLog 4 warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '. 
      function ViashNotice {
        ViashLog 5 notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '. 
      function ViashInfo {
        ViashLog 6 info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '. 
      function ViashDebug {
        ViashLog 7 debug $@
      }
      
      # find source folder of this component
      VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "convert_bdrhap_to_h5ad main_build"
        echo "Create a h5ad file from BD Rhapsody output."
        echo
        echo "Options:"
      
        echo "   -i, --input"
        echo "        type: file, required parameter, multiple values allowed"
        echo "        example: input_dir/"
        echo "        One or more folders containing the output of the BD Rhapsody workflow. If multiple are given, they are all combined into one h5ad file."
        echo ""
      
      
        echo "   --id"
        echo "        type: string, multiple values allowed"
        echo "        example: my_id"
        echo "        A vector of ids with same length as --input."
        echo ""
      
      
        echo "   -o, --output"
        echo "        type: file, required parameter, output"
        echo "        example: output.h5ad"
        echo "        Output h5ad file."
        echo ""
      
      }
      ######## Helper functions for setting up Docker images for viash ########
      
      
      # ViashDockerRemoteTagCheck: check whether a Docker image is available 
      # on a remote. Assumes `docker login` has been performed, if relevant.
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerRemoteTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerRemoteTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerRemoteTagCheck {
        docker manifest inspect $1 > /dev/null 2> /dev/null
      }
      
      # ViashDockerLocalTagCheck: check whether a Docker image is available locally
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   docker pull python:latest
      #   ViashDockerLocalTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerLocalTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerLocalTagCheck {
        [ -n "$(docker images -q $1)" ]
      }
      
      # ViashDockerPull: pull a Docker image
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerPull python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerPull sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerPull {
        ViashNotice "Running 'docker pull $1'"
        docker pull $1 && return 0 || return 1
      }
      
      # ViashDockerPullElseBuild: pull a Docker image, else build it
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerPullElseBuild mynewcomponent
      function ViashDockerPullElseBuild {
        set +e
        ViashDockerPull $1
        out=$?
        set -e
        if [ $out -ne 0 ]; then
          ViashDockerBuild $@
        fi
      }
      
      # ViashDockerSetup: create a Docker image, according to specified docker setup strategy
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # $2                  : docker setup strategy, see DockerSetupStrategy.scala
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerSetup mynewcomponent alwaysbuild
      function ViashDockerSetup {
        VSHD_ID="$1"
        VSHD_STRAT="$2"
        if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
          ViashDockerBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
          ViashDockerPull $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
          ViashDockerBuild $VSHD_ID
        elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
          set +e
          ViashDockerLocalTagCheck $VSHD_ID
          outCheck=$?
          set -e
          if [ $outCheck -eq 0 ]; then
            ViashInfo "Image $VSHD_ID already exists"
          elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
            ViashDockerBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
            ViashDockerBuild $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
            ViashDockerPull $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID
          else
            ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
            exit 1
          fi
        elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
          set +e
          docker push $VSHD_ID
          outPush=$?
          set -e
          if [ $outPush -eq 0 ]; then
            ViashNotice "Container '$VSHD_ID' push succeeded."
          else
            ViashError "Container '$VSHD_ID' push errored."
            exit 1
          fi
        elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
          set +e
          ViashDockerRemoteTagCheck $VSHD_ID
          outCheck=$?
          set -e
          if [ $outCheck -eq 0 ]; then
            ViashNotice "Container '$VSHD_ID' exists, doing nothing."
          else
            ViashNotice "Container '$VSHD_ID' does not yet exist."
            set +e
            docker push $1 > /dev/null 2> /dev/null
            outPush=$?
            set -e
            if [ $outPush -eq 0 ]; then
              ViashNotice "Container '$VSHD_ID' push succeeded."
            else
            ViashError "Container '$VSHD_ID' push errored."
              exit 1
            fi
          fi
        elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
          ViashNotice "Skipping setup."
        else
          ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
          exit 1
        fi
      }
      
      
      ######## End of helper functions for setting up Docker images for viash ########
      
      # ViashDockerFile: print the dockerfile to stdout
      # return : dockerfile required to run this component
      # examples:
      #   ViashDockerFile
      function ViashDockerfile {
        cat << 'VIASHDOCKER'
      FROM dataintuitive/randpy:r4.0_py3.8_bioc3.12
      
      RUN :
      VIASHDOCKER
      }
      
      # ViashDockerBuild: build a docker container
      # $1              : image identifier with format `[registry/]image[:tag]`
      # exit code $?    : whether or not the image was built
      function ViashDockerBuild {
      
        # create temporary directory to store dockerfile & optional resources in
        tmpdir=$(mktemp -d "$VIASH_TEMP/viashsetupdocker-convert_bdrhap_to_h5ad-XXXXXX")
        function clean_up {
          rm -rf "$tmpdir"
        }
        trap clean_up EXIT
      
        # store dockerfile and resources
        ViashDockerfile > $tmpdir/Dockerfile
        cp -r $VIASH_RESOURCES_DIR/* $tmpdir
      
        # Build the container
        ViashNotice "Running 'docker build -t $@ $tmpdir'"
        set +e
        if [ $VIASH_VERBOSITY -ge 6 ]; then
          docker build -t $@ $tmpdir
        else
          docker build -t $@ $tmpdir &> $tmpdir/docker_build.log
        fi
        out=$?
        set -e
        if [ ! $out -eq 0 ]; then
          ViashError "Error occurred while building the container $@."
          if [ ! $VIASH_VERBOSITY -ge 6 ]; then
            ViashError "Transcript: --------------------------------"
            cat "$tmpdir/docker_build.log"
            ViashError "End of transcript --------------------------"
          fi
          exit 1
        fi
      }
      # ViashAbsolutePath: generate absolute path from relative path
      # borrowed from https://stackoverflow.com/a/21951256
      # $1     : relative filename
      # return : absolute path
      # examples:
      #   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
      #   ViashAbsolutePath /foo/bar/..     # returns /foo
      function ViashAbsolutePath {
        local thePath
        if [[ ! "$1" =~ ^/ ]]; then
          thePath="$PWD/$1"
        else
          thePath="$1"
        fi
        echo "$thePath" | (
          IFS=/
          read -a parr
          declare -a outp
          for i in "${parr[@]}"; do
            case "$i" in
            ''|.) continue ;;
            ..)
              len=${#outp[@]}
              if ((len==0)); then
                continue
              else
                unset outp[$((len-1))]
              fi
              ;;
            *)
              len=${#outp[@]}
              outp[$len]="$i"
            ;;
            esac
          done
          echo /"${outp[*]}"
        )
      }
      # ViashAutodetectMount: auto configuring docker mounts from parameters
      # $1                  : The parameter value
      # returns             : New parameter
      # $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
      # examples:
      #   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
      #   ViashAutodetectMountArg /path/to/bar   # returns '-v /path/to:/viash_automount/path/to'
      function ViashAutodetectMount {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "$mount_target/$base_name"
      }
      function ViashAutodetectMountArg {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "-v \"$mount_source:$mount_target\""
      }
      # ViashExtractFlags: Retain leading flag
      # $1     : string with a possible leading flag
      # return : leading flag
      # examples:
      #   ViashExtractFlags --foo=bar  # returns --foo
      function ViashExtractFlags {
        echo $1 | sed 's/=.*//'
      }
      # initialise variables
      VIASH_EXTRA_MOUNTS=''
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              -v|--verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              -vv)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
                  shift 1
                  ;;
              --verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              --verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "convert_bdrhap_to_h5ad main_build"
                  exit
                  ;;
              --input)
                  if [ -z "$VIASH_PAR_INPUT" ]; then
                    VIASH_PAR_INPUT="$2"
                  else
                    VIASH_PAR_INPUT="$VIASH_PAR_INPUT:""$2"
                  fi
                  shift 2
                  ;;
              --input=*)
                  if [ -z "$VIASH_PAR_INPUT" ]; then
                    VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
                  else
                    VIASH_PAR_INPUT="$VIASH_PAR_INPUT:"$(ViashRemoveFlags "$1")
                  fi
                  shift 1
                  ;;
              -i)
                  if [ -z "$VIASH_PAR_INPUT" ]; then
                    VIASH_PAR_INPUT="$2"
                  else
                    VIASH_PAR_INPUT="$VIASH_PAR_INPUT:""$2"
                  fi
                  shift 2
                  ;;
              --id)
                  if [ -z "$VIASH_PAR_ID" ]; then
                    VIASH_PAR_ID="$2"
                  else
                    VIASH_PAR_ID="$VIASH_PAR_ID:""$2"
                  fi
                  shift 2
                  ;;
              --id=*)
                  if [ -z "$VIASH_PAR_ID" ]; then
                    VIASH_PAR_ID=$(ViashRemoveFlags "$1")
                  else
                    VIASH_PAR_ID="$VIASH_PAR_ID:"$(ViashRemoveFlags "$1")
                  fi
                  shift 1
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -o)
                  VIASH_PAR_OUTPUT="$2"
                  shift 2
                  ;;
              ---setup)
                  ViashDockerSetup 'openpipeline/convert_convert_bdrhap_to_h5ad:main_build' "$2"
                  exit 0
                  ;;
              ---setup=*)
                  ViashDockerSetup 'openpipeline/convert_convert_bdrhap_to_h5ad:main_build' "$(ViashRemoveFlags "$1")"
                  exit 0
                  ;;
              ---dockerfile)
                  ViashDockerfile
                  exit 0
                  ;;
              ---v|---volume)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v "$2""
                  shift 2
                  ;;
              ---volume=*)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v $(ViashRemoveFlags "$2")"
                  shift 1
                  ;;
              ---debug)
                  ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t openpipeline/convert_convert_bdrhap_to_h5ad:main_build"
                  docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t openpipeline/convert_convert_bdrhap_to_h5ad:main_build
                  exit 0
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_INPUT" ]; then
        ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT" ]; then
        ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      
      
      ViashDockerSetup 'openpipeline/convert_convert_bdrhap_to_h5ad:main_build' ifneedbepullelsecachedbuild
      
      # detect volumes from file arguments
      if [ ! -z "$VIASH_PAR_INPUT" ]; then
        IFS=":"
        for var in $VIASH_PAR_INPUT; do
          unset IFS
          VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$var")"
          if [ -z "$VIASH_TEST_INPUT" ]; then
            VIASH_TEST_INPUT="$(ViashAutodetectMount "$var")"
          else
            VIASH_TEST_INPUT="$VIASH_TEST_INPUT:""$(ViashAutodetectMount "$var")"
          fi
        done
        VIASH_PAR_INPUT="$VIASH_TEST_INPUT"
      fi
      if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT")"
        VIASH_PAR_OUTPUT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT")
      fi
      
      # Always mount the resource directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_RESOURCES_DIR")"
      VIASH_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_RESOURCES_DIR")
      
      # Always mount the VIASH_TEMP directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_TEMP")"
      VIASH_TEMP=$(ViashAutodetectMount "$VIASH_TEMP")
      
      # change file ownership
      function viash_perform_chown {
        
        if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS openpipeline/convert_convert_bdrhap_to_h5ad:main_build "$(id -u):$(id -g)" -R "$VIASH_PAR_OUTPUT"
        fi
      }
      trap viash_perform_chown EXIT
      
      
      cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm $VIASH_EXTRA_MOUNTS openpipeline/convert_convert_bdrhap_to_h5ad:main_build
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-convert_bdrhap_to_h5ad-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      trap clean_up EXIT
      cat > "\$tempscript" << 'VIASHMAIN'
      # The following code has been auto-generated by Viash.
      par <- list(
        "input" = $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "strsplit('$VIASH_PAR_INPUT', split = ':')[[1]]"; else echo NULL; fi ),
        "id" = $( if [ ! -z ${VIASH_PAR_ID+x} ]; then echo "strsplit('$VIASH_PAR_ID', split = ':')[[1]]"; else echo NULL; fi ),
        "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo NULL; fi )
      )
      
      resources_dir = "$VIASH_RESOURCES_DIR"
      
      ## VIASH START
      ## VIASH END
      
      cat("Loading libraries\\n")
      options(tidyverse.quiet = TRUE)
      library(tidyverse)
      requireNamespace("anndata", quietly = TRUE)
      
      read_metric <- function(file) {
        lines <- readr::read_lines(file)
        ix <- grep("^#[^#]", lines)
        header <- lines[ix+1] %>% strsplit(",") %>% unlist
        values <- lines[ix+2] %>% strsplit(",") %>% unlist
        ix2 <- !duplicated(header)
        new_csv <- paste0(
          header[ix2] %>% paste(collapse = ","), "\\n",
          values[ix2] %>% paste(collapse = ","), "\\n"
        )
        readr::read_csv(new_csv)
      }
      
      ids <- map_chr(seq_along(par\$input), function(i) {
        if (!is.null(par\$id) && length(par\$input) == length(par\$id)) {
          par\$id[[i]]
        } else {
          paste0("sample", i)
        }
      })
      
      cat("Reading in metric summaries\\n")
      mets <- map_df(par\$input, function(dir) {
        list.files(dir, pattern = "Metrics_Summary.csv\$", full.names = TRUE) %>% read_metric()
      })
      mets\$id <- ids
      
      cat("Reading in count data\\n")
      counts <- lapply(par\$input, function(dir) {
        list.files(dir, pattern = "_RSEC_MolsPerCell.csv\$", full.names = TRUE) %>%
          readr::read_csv(
            col_types = cols(.default = col_integer()),
            comment = "#"
          ) %>%
          tibble::column_to_rownames("Cell_Index") %>%
          as.matrix %>%
          Matrix::Matrix(sparse = TRUE)
      })
      
      obs <- map_df(seq_along(counts), function(i) {
        cell_index = rownames(counts[[i]])
        data.frame(
          row.names = paste0("sample", i, "_", cell_index),
          id = rep(ids[[i]], length(cell_index))
        )
      })
      
      cat("Constructing var\\n")
      targets <- map(counts, colnames)
      unique_targets <- sort(unique(unlist(targets)))
      var <- data.frame(
        row.names = unique_targets,
        feature_types = rep("Gene Expression", length(unique_targets))
      )
      
      cat("Constructing counts\\n")
      new_counts <- map(seq_along(counts), function(i) {
        mat <- counts[[i]]
        if (is(mat, "RsparseMatrix")) {
          j <- mat@j+1
          jmap <- match(colnames(mat), unique_targets)
          newj <- jmap[j]
          Matrix::sparseMatrix(
            p = mat@p,
            j = newj,
            x = mat@x,
            repr = "R",
            dims = c(nrow(mat), length(unique_targets)),
            dimnames = list(rownames(mat), unique_targets)
          )
        } else if (is(mat, "CsparseMatrix")) {
          pmap <- cumsum(c(TRUE, unique_targets %in% colnames(mat)))
          newp <- mat@p[pmap]
          Matrix::sparseMatrix(
            p = newp,
            i = mat@i+1,
            x = mat@x,
            repr = "C",
            dims = c(nrow(mat), length(unique_targets)),
            dimnames = list(rownames(mat), unique_targets)
          )
        }
      }) %>% do.call(rbind, .)
      
      cat("Constructing metrics summary\\n")
      new_met <- tibble(
        Total_Reads_in_FASTQ = sum(mets\$Total_Reads_in_FASTQ),
        Pct_Reads_Too_Short = sum(mets\$Total_Reads_in_FASTQ * mets\$Pct_Reads_Too_Short) / Total_Reads_in_FASTQ,
        Pct_Reads_Low_Base_Quality = sum(mets\$Total_Reads_in_FASTQ * mets\$Pct_Reads_Low_Base_Quality) / Total_Reads_in_FASTQ,
        Pct_Reads_High_SNF = sum(mets\$Total_Reads_in_FASTQ * mets\$Pct_Reads_High_SNF) / Total_Reads_in_FASTQ,
        Pct_Reads_Filtered_Out = sum(mets\$Total_Reads_in_FASTQ * mets\$Pct_Reads_Filtered_Out) / Total_Reads_in_FASTQ,
        Total_Reads_After_Quality_Filtering = sum(mets\$Total_Reads_After_Quality_Filtering),
        Library = unique(mets\$Library),
        Total_Filtered_Reads = sum(mets\$Total_Filtered_Reads),
        Pct_Contaminating_PhiX_Reads_in_Filtered_R2 = sum(mets\$Total_Filtered_Reads * mets\$Pct_Contaminating_PhiX_Reads_in_Filtered_R2) / Total_Filtered_Reads,
        Pct_Q30_Bases_in_Filtered_R2 = sum(mets\$Total_Filtered_Reads * mets\$Pct_Q30_Bases_in_Filtered_R2) / Total_Filtered_Reads,
        Pct_Assigned_to_Cell_Labels = sum(mets\$Total_Filtered_Reads * mets\$Pct_Assigned_to_Cell_Labels) / Total_Filtered_Reads,
        Pct_Cellular_Reads_Aligned_Uniquely_to_Annotated_Transcriptome = sum(mets\$Total_Filtered_Reads * mets\$Pct_Cellular_Reads_Aligned_Uniquely_to_Annotated_Transcriptome) / Total_Filtered_Reads,
        Pct_Cellular_Reads_Aligned_Uniquely_to_Other_Genomic_Regions = sum(mets\$Total_Filtered_Reads * mets\$Pct_Cellular_Reads_Aligned_Uniquely_to_Other_Genomic_Regions) / Total_Filtered_Reads,
        Pct_Cellular_Reads_Aligned_Not_Unique = sum(mets\$Total_Filtered_Reads * mets\$Pct_Cellular_Reads_Aligned_Not_Unique) / Total_Filtered_Reads,
        Pct_Cellular_Reads_Unaligned = sum(mets\$Total_Filtered_Reads * mets\$Pct_Cellular_Reads_Unaligned) / Total_Filtered_Reads,
        Aligned_Reads_By_Type = sum(mets\$Aligned_Reads_By_Type),
        Total_Raw_Molecules = sum(mets\$Total_Raw_Molecules),
        Total_RSEC_Molecules = sum(mets\$Total_RSEC_Molecules),
        Mean_Raw_Sequencing_Depth = sum(mets\$Total_Raw_Molecules * mets\$Mean_Raw_Sequencing_Depth) / Total_Raw_Molecules,
        Mean_RSEC_Sequencing_Depth = sum(mets\$Total_RSEC_Molecules * mets\$Mean_RSEC_Sequencing_Depth) / Total_RSEC_Molecules,
        Sequencing_Saturation = NA_real_,
        Target_Type = unique(mets\$Target_Type),
        Putative_Cell_Count = sum(mets\$Putative_Cell_Count),
        Pct_Reads_from_Putative_Cells = sum(mets\$Putative_Cell_Count * mets\$Mean_Reads_per_Cell * mets\$Pct_Reads_from_Putative_Cells) / sum(mets\$Putative_Cell_Count * mets\$Mean_Reads_per_Cell),
        Mean_Reads_per_Cell = sum(mets\$Putative_Cell_Count * mets\$Mean_Reads_per_Cell) / Putative_Cell_Count,
        Mean_Molecules_per_Cell = sum(mets\$Putative_Cell_Count * mets\$Mean_Molecules_per_Cell) / Putative_Cell_Count,
        Median_Molecules_per_Cell = median(Matrix::rowSums(new_counts)),
        Mean_Targets_per_Cell = sum(mets\$Putative_Cell_Count * mets\$Mean_Targets_per_Cell) / Putative_Cell_Count,
        Median_Targets_per_Cell = median(Matrix::rowSums(new_counts > 0)),
        Total_Targets_Detected = length(unique_targets)
      )
      
      cat("Constructing anndata object\\n")
      new_h5ad <- anndata::AnnData(
        X = new_counts,
        obs = obs,
        var = var,
        uns = list(
          metrics_summary = new_met,
          metrics_per_file = mets %>% select(id, everything())
        )
      )
      
      cat("Storing raw\\n")
      new_h5ad\$raw <- new_h5ad
      
      cat("Writing to h5ad file\\n")
      new_h5ad\$write_h5ad(par\$output, compression = "gzip")
      VIASHMAIN
      PATH="$VIASH_RESOURCES_DIR:\$PATH"
      
      Rscript "\$tempscript"
      
      VIASHEOF
      

    dest: "convert_bdrhap_to_h5ad"
    is_executable: true
  description: "Create a h5ad file from BD Rhapsody output.\n"
  tests: []
  info: {}
platform:
  type: "docker"
  id: "docker"
  image: "dataintuitive/randpy:r4.0_py3.8_bioc3.12"
  target_registry: "openpipeline"
  namespace_separator: "_"
  resolve_volume: "Automatic"
  chown: true
  setup_strategy: "ifneedbepullelsecachedbuild"
  privileged: false
  setup: []
platforms: []
info:
  config: "src/convert/convert_bdrhap_to_h5ad/config.vsh.yaml"
  platform: "docker"
  output: "target/docker/convert/convert_bdrhap_to_h5ad"
  executable: "target/docker/convert/convert_bdrhap_to_h5ad/convert_bdrhap_to_h5ad"
  viash_version: "0.5.0"
  git_commit: "86aa50d1607116bd28004f1061bf33f23f580ea2"
  git_remote: "https://github.com/openpipeline-bio/openpipeline"
