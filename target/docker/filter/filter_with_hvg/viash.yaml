functionality:
  name: "filter_with_hvg"
  namespace: "filter"
  version: "main_build"
  authors:
  - name: "Dries De Maeyer"
    email: "DDeMaey1@its.jnj.com"
    roles:
    - "contributor"
    props:
      account: "ddemaey1"
  - name: "Robrecht Cannoodt"
    email: "rcannood@gmail.com"
    roles:
    - "maintainer"
    - "contributor"
    props:
      github: "rcannood"
      orcid: "0000-0003-3641-729X"
  inputs: []
  outputs: []
  arguments:
  - type: "file"
    name: "--input"
    alternatives: []
    description: "Input h5mu file"
    example:
    - "input.h5mu"
    default: []
    must_exist: false
    required: true
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--modality"
    alternatives: []
    example: []
    default:
    - "rna"
    required: false
    choices: []
    direction: "input"
    multiple: true
    multiple_sep: ":"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "Output h5mu file."
    example:
    - "output.h5mu"
    default: []
    must_exist: false
    required: false
    direction: "output"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--var_name_filter"
    alternatives: []
    description: "In which .var slot to store a boolean array corresponding to which\
      \ observations should be filtered out."
    example: []
    default:
    - "filter_with_hvg"
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--varm_name"
    alternatives: []
    description: "In which .varm slot to store additional metadata."
    example: []
    default:
    - "hvg"
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "boolean_true"
    name: "--do_subset"
    alternatives: []
    description: "Whether to subset before storing the output."
    direction: "input"
  - type: "string"
    name: "--flavor"
    alternatives: []
    description: "Choose the flavor for identifying highly variable genes. For the\
      \ dispersion based methods in their default workflows, Seurat passes the cutoffs\
      \ whereas Cell Ranger passes n_top_genes."
    example: []
    default:
    - "seurat"
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--n_top_genes"
    alternatives: []
    description: "Number of highly-variable genes to keep. Mandatory if flavor='seurat_v3'."
    example: []
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "double"
    name: "--min_mean"
    alternatives: []
    description: "If n_top_genes is defined, this and all other cutoffs for the means\
      \ and the normalized dispersions are ignored. Ignored if flavor='seurat_v3'."
    example: []
    default:
    - 0.0125
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "double"
    name: "--max_mean"
    alternatives: []
    description: "If n_top_genes is defined, this and all other cutoffs for the means\
      \ and the normalized dispersions are ignored. Ignored if flavor='seurat_v3'."
    example: []
    default:
    - 3.0
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "double"
    name: "--min_disp"
    alternatives: []
    description: "If n_top_genes is defined, this and all other cutoffs for the means\
      \ and the normalized dispersions are ignored. Ignored if flavor='seurat_v3'."
    example: []
    default:
    - 0.5
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "double"
    name: "--max_disp"
    alternatives: []
    description: "If n_top_genes is defined, this and all other cutoffs for the means\
      \ and the normalized dispersions are ignored. Ignored if flavor='seurat_v3'.\
      \ Default is +inf."
    example: []
    default: []
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "double"
    name: "--span"
    alternatives: []
    description: "The fraction of the data (cells) used when estimating the variance\
      \ in the loess model fit if flavor='seurat_v3'."
    example: []
    default:
    - 0.3
    required: false
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "integer"
    name: "--n_bins"
    alternatives: []
    description: "Number of bins for binning the mean gene expression. Normalization\
      \ is done with respect to each bin. If just a single gene falls into a bin,\
      \ the normalized dispersion is artificially set to 1."
    example: []
    default:
    - 20
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  - type: "string"
    name: "--obs_batch_key"
    alternatives: []
    description: "If specified, highly-variable genes are selected within each batch\
      \ separately and merged. This simple \nprocess avoids the selection of batch-specific\
      \ genes and acts as a lightweight batch correction method. \nFor all flavors,\
      \ genes are first sorted by how many batches they are a HVG. For dispersion-based\
      \ flavors \nties are broken by normalized dispersion. If flavor = 'seurat_v3',\
      \ ties are broken by the median (across\nbatches) rank based on within-batch\
      \ normalized variance.\n"
    example: []
    default: []
    required: false
    choices: []
    direction: "input"
    multiple: false
    multiple_sep: ":"
  argument_groups: []
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      # filter_with_hvg main_build
      # 
      # This wrapper script is auto-generated by viash 0.5.15 and is thus a derivative
      # work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
      # Intuitive.
      # 
      # The component may contain files which fall under a different license. The
      # authors of this component should specify the license in the header of such
      # files, or include a separate license file detailing the licenses of all included
      # files.
      # 
      # Component authors:
      #  * Dries De Maeyer <DDeMaey1@its.jnj.com> (contributor) {account: ddemaey1}
      #  * Robrecht Cannoodt <rcannood@gmail.com> (maintainer, contributor) {github:
      # rcannood, orcid: 0000-0003-3641-729X}
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TMP}
        VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
        VIASH_TEMP=${VIASH_TEMP:-$TEMP}
        VIASH_TEMP=${VIASH_TEMP:-/tmp}
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      VIASH_LOGCODE_EMERGENCY=0
      VIASH_LOGCODE_ALERT=1
      VIASH_LOGCODE_CRITICAL=2
      VIASH_LOGCODE_ERROR=3
      VIASH_LOGCODE_WARNING=4
      VIASH_LOGCODE_NOTICE=5
      VIASH_LOGCODE_INFO=6
      VIASH_LOGCODE_DEBUG=7
      VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '.
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '.
      function ViashEmergency {
        ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '.
      function ViashAlert {
        ViashLog $VIASH_LOGCODE_ALERT alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '.
      function ViashCritical {
        ViashLog $VIASH_LOGCODE_CRITICAL critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '.
      function ViashError {
        ViashLog $VIASH_LOGCODE_ERROR error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '.
      function ViashWarning {
        ViashLog $VIASH_LOGCODE_WARNING warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '.
      function ViashNotice {
        ViashLog $VIASH_LOGCODE_NOTICE notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '.
      function ViashInfo {
        ViashLog $VIASH_LOGCODE_INFO info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '.
      function ViashDebug {
        ViashLog $VIASH_LOGCODE_DEBUG debug $@
      }
      
      # find source folder of this component
      VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      # backwards compatibility
      VIASH_RESOURCES_DIR="$VIASH_META_RESOURCES_DIR"
      
      # define meta fields
      VIASH_META_FUNCTIONALITY_NAME="filter_with_hvg"
      VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "filter_with_hvg main_build"
        echo ""
        echo "Annotate highly variable genes [Satija15] [Zheng17] [Stuart19]."
        echo ""
        echo "Expects logarithmized data, except when flavor='seurat_v3' in which count data"
        echo "is expected."
        echo ""
        echo "Depending on flavor, this reproduces the R-implementations of Seurat [Satija15],"
        echo "Cell Ranger [Zheng17], and Seurat v3 [Stuart19]."
        echo ""
        echo "For the dispersion-based methods ([Satija15] and [Zheng17]), the normalized"
        echo "dispersion is obtained by scaling with the mean and standard deviation of the"
        echo "dispersions for genes falling into a given bin for mean expression of genes."
        echo "This means that for each bin of mean expression, highly variable genes are"
        echo "selected."
        echo ""
        echo "For [Stuart19], a normalized variance for each gene is computed. First, the data"
        echo "are standardized (i.e., z-score normalization per feature) with a regularized"
        echo "standard deviation. Next, the normalized variance is computed as the variance of"
        echo "each gene after the transformation. Genes are ranked by the normalized variance."
        echo ""
        echo "Arguments:"
        echo "    --input"
        echo "        type: file, required parameter"
        echo "        example: input.h5mu"
        echo "        Input h5mu file"
        echo ""
        echo "    --modality"
        echo "        type: string, multiple values allowed"
        echo "        default: rna"
        echo ""
        echo "    --output"
        echo "        type: file, output"
        echo "        example: output.h5mu"
        echo "        Output h5mu file."
        echo ""
        echo "    --var_name_filter"
        echo "        type: string"
        echo "        default: filter_with_hvg"
        echo "        In which .var slot to store a boolean array corresponding to which"
        echo "        observations should be filtered out."
        echo ""
        echo "    --varm_name"
        echo "        type: string"
        echo "        default: hvg"
        echo "        In which .varm slot to store additional metadata."
        echo ""
        echo "    --do_subset"
        echo "        type: boolean_true"
        echo "        Whether to subset before storing the output."
        echo ""
        echo "    --flavor"
        echo "        type: string"
        echo "        default: seurat"
        echo "        Choose the flavor for identifying highly variable genes. For the"
        echo "        dispersion based methods in their default workflows, Seurat passes the"
        echo "        cutoffs whereas Cell Ranger passes n_top_genes."
        echo ""
        echo "    --n_top_genes"
        echo "        type: integer"
        echo "        Number of highly-variable genes to keep. Mandatory if"
        echo "        flavor='seurat_v3'."
        echo ""
        echo "    --min_mean"
        echo "        type: double"
        echo "        default: 0.0125"
        echo "        If n_top_genes is defined, this and all other cutoffs for the means and"
        echo "        the normalized dispersions are ignored. Ignored if flavor='seurat_v3'."
        echo ""
        echo "    --max_mean"
        echo "        type: double"
        echo "        default: 3.0"
        echo "        If n_top_genes is defined, this and all other cutoffs for the means and"
        echo "        the normalized dispersions are ignored. Ignored if flavor='seurat_v3'."
        echo ""
        echo "    --min_disp"
        echo "        type: double"
        echo "        default: 0.5"
        echo "        If n_top_genes is defined, this and all other cutoffs for the means and"
        echo "        the normalized dispersions are ignored. Ignored if flavor='seurat_v3'."
        echo ""
        echo "    --max_disp"
        echo "        type: double"
        echo "        If n_top_genes is defined, this and all other cutoffs for the means and"
        echo "        the normalized dispersions are ignored. Ignored if flavor='seurat_v3'."
        echo "        Default is +inf."
        echo ""
        echo "    --span"
        echo "        type: double"
        echo "        default: 0.3"
        echo "        The fraction of the data (cells) used when estimating the variance in"
        echo "        the loess model fit if flavor='seurat_v3'."
        echo ""
        echo "    --n_bins"
        echo "        type: integer"
        echo "        default: 20"
        echo "        Number of bins for binning the mean gene expression. Normalization is"
        echo "        done with respect to each bin. If just a single gene falls into a bin,"
        echo "        the normalized dispersion is artificially set to 1."
        echo ""
        echo "    --obs_batch_key"
        echo "        type: string"
        echo "        If specified, highly-variable genes are selected within each batch"
        echo "        separately and merged. This simple"
        echo "        process avoids the selection of batch-specific genes and acts as a"
        echo "        lightweight batch correction method."
        echo "        For all flavors, genes are first sorted by how many batches they are a"
        echo "        HVG. For dispersion-based flavors"
        echo "        ties are broken by normalized dispersion. If flavor = 'seurat_v3', ties"
        echo "        are broken by the median (across"
        echo "        batches) rank based on within-batch normalized variance."
      }
      ######## Helper functions for setting up Docker images for viash ########
      # expects: ViashDockerBuild
      
      # ViashDockerInstallationCheck: check whether Docker is installed correctly
      #
      # examples:
      #   ViashDockerInstallationCheck
      function ViashDockerInstallationCheck {
        ViashDebug "Checking whether Docker is installed"
        if [ ! command -v docker &> /dev/null ]; then
          ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
          exit 1
        fi
      
        ViashDebug "Checking whether the Docker daemon is running"
        save=$-; set +e
        docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
        out=$?
        [[ $save =~ e ]] && set -e
        if [ $out -ne 0 ]; then
          ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
          ViashCritical "- Try running 'dockerd' in the command line"
          ViashCritical "- See https://docs.docker.com/config/daemon/"
          exit 1
        fi
      }
      
      # ViashDockerRemoteTagCheck: check whether a Docker image is available 
      # on a remote. Assumes `docker login` has been performed, if relevant.
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerRemoteTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerRemoteTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerRemoteTagCheck {
        docker manifest inspect $1 > /dev/null 2> /dev/null
      }
      
      # ViashDockerLocalTagCheck: check whether a Docker image is available locally
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   docker pull python:latest
      #   ViashDockerLocalTagCheck python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerLocalTagCheck sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerLocalTagCheck {
        [ -n "$(docker images -q $1)" ]
      }
      
      # ViashDockerPull: pull a Docker image
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerPull python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerPull sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerPull {
        ViashNotice "Checking if Docker image is available at '$1'"
        if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
          docker pull $1 && return 0 || return 1
        else
          save=$-; set +e
          docker pull $1 2> /dev/null > /dev/null
          out=$?
          [[ $save =~ e ]] && set -e
          if [ $out -ne 0 ]; then
            ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
          fi
          return $out
        fi
      }
      
      # ViashDockerPush: push a Docker image
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # exit code $?        : whether or not the image was found
      # examples:
      #   ViashDockerPush python:latest
      #   echo $?                                     # returns '0'
      #   ViashDockerPush sdaizudceahifu
      #   echo $?                                     # returns '1'
      function ViashDockerPush {
        ViashNotice "Pushing image to '$1'"
        save=$-; set +e
        if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
          docker push $1
          out=$?
        else
          docker push $1 2> /dev/null > /dev/null
          out=$?
        fi
        [[ $save =~ e ]] && set -e
        if [ $out -eq 0 ]; then
          ViashNotice "Container '$VSHD_ID' push succeeded."
        else
          ViashError "Container '$VSHD_ID' push errored. You might not be logged in or have the necessary permissions."
        fi
        return $out
      }
      
      # ViashDockerPullElseBuild: pull a Docker image, else build it
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerPullElseBuild mynewcomponent
      function ViashDockerPullElseBuild {
        save=$-; set +e
        ViashDockerPull $1
        out=$?
        [[ $save =~ e ]] && set -e
        if [ $out -ne 0 ]; then
          ViashDockerBuild $@
        fi
      }
      
      # ViashDockerSetup: create a Docker image, according to specified docker setup strategy
      #
      # $1                  : image identifier with format `[registry/]image[:tag]`
      # $2                  : docker setup strategy, see DockerSetupStrategy.scala
      # ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
      # examples:
      #   ViashDockerSetup mynewcomponent alwaysbuild
      function ViashDockerSetup {
        VSHD_ID="$1"
        VSHD_STRAT="$2"
        if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
          ViashDockerBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
          ViashDockerPull $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID --no-cache
        elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
          ViashDockerPullElseBuild $VSHD_ID
        elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
          ViashDockerBuild $VSHD_ID
        elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
          save=$-; set +e
          ViashDockerLocalTagCheck $VSHD_ID
          outCheck=$?
          [[ $save =~ e ]] && set -e
          if [ $outCheck -eq 0 ]; then
            ViashInfo "Image $VSHD_ID already exists"
          elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
            ViashDockerBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
            ViashDockerBuild $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
            ViashDockerPull $VSHD_ID
          elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID --no-cache
          elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
            ViashDockerPullElseBuild $VSHD_ID
          else
            ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
            exit 1
          fi
        elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
          ViashDockerPush "$VSHD_ID"
        elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
          save=$-; set +e
          ViashDockerRemoteTagCheck $VSHD_ID
          outCheck=$?
          [[ $save =~ e ]] && set -e
          if [ $outCheck -eq 0 ]; then
            ViashNotice "Container '$VSHD_ID' exists, doing nothing."
          else
            ViashNotice "Container '$VSHD_ID' does not yet exist."
            ViashDockerPush "$VSHD_ID"
          fi
        elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
          ViashNotice "Skipping setup."
        else
          ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
          exit 1
        fi
      }
      
      
      ######## End of helper functions for setting up Docker images for viash ########
      
      # ViashDockerFile: print the dockerfile to stdout
      # return : dockerfile required to run this component
      # examples:
      #   ViashDockerFile
      function ViashDockerfile {
        cat << 'VIASHDOCKER'
      FROM python:3.8
      
      RUN pip install --upgrade pip && \
        pip install --upgrade --no-cache-dir "scanpy~=1.9.1" "muon" "mudata~=0.2.0" "anndata~=0.8.0"
      
      LABEL org.opencontainers.image.authors="Dries De Maeyer <DDeMaey1@its.jnj.com> (contributor) {account: ddemaey1}, Robrecht Cannoodt <rcannood@gmail.com> (maintainer, contributor) {github: rcannood, orcid: 0000-0003-3641-729X}"
      LABEL org.opencontainers.image.description="Companion container for running component filter filter_with_hvg"
      LABEL org.opencontainers.image.created="2022-08-25T10:49:15Z"
      LABEL org.opencontainers.image.source="https://github.com/openpipelines-bio/openpipeline"
      LABEL org.opencontainers.image.revision="ef7b9935dbe32d4ff5eed9a2b34c768b061329d1"
      LABEL org.opencontainers.image.version="main_build"
      VIASHDOCKER
      }
      
      # ViashDockerBuild: build a docker container
      # $1              : image identifier with format `[registry/]image[:tag]`
      # exit code $?    : whether or not the image was built
      function ViashDockerBuild {
        # create temporary directory to store dockerfile & optional resources in
        tmpdir=$(mktemp -d "$VIASH_TEMP/viashsetupdocker-filter_with_hvg-XXXXXX")
        function clean_up {
          rm -rf "$tmpdir"
        }
        trap clean_up EXIT
      
        # store dockerfile and resources
        ViashDockerfile > $tmpdir/Dockerfile
        cp -r $VIASH_META_RESOURCES_DIR/* $tmpdir
      
        # Build the container
        ViashNotice "Building container '$1' with Dockerfile"
        ViashInfo "Running 'docker build -t $@ $tmpdir'"
        save=$-; set +e
        if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
          docker build -t $@ $tmpdir
        else
          docker build -t $@ $tmpdir &> $tmpdir/docker_build.log
        fi
        out=$?
        [[ $save =~ e ]] && set -e
        if [ $out -ne 0 ]; then
          ViashError "Error occurred while building container '$1'"
          if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
            ViashError "Transcript: --------------------------------"
            cat "$tmpdir/docker_build.log"
            ViashError "End of transcript --------------------------"
          fi
          exit 1
        fi
      }
      # ViashAbsolutePath: generate absolute path from relative path
      # borrowed from https://stackoverflow.com/a/21951256
      # $1     : relative filename
      # return : absolute path
      # examples:
      #   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
      #   ViashAbsolutePath /foo/bar/..     # returns /foo
      function ViashAbsolutePath {
        local thePath
        if [[ ! "$1" =~ ^/ ]]; then
          thePath="$PWD/$1"
        else
          thePath="$1"
        fi
        echo "$thePath" | (
          IFS=/
          read -a parr
          declare -a outp
          for i in "${parr[@]}"; do
            case "$i" in
            ''|.) continue ;;
            ..)
              len=${#outp[@]}
              if ((len==0)); then
                continue
              else
                unset outp[$((len-1))]
              fi
              ;;
            *)
              len=${#outp[@]}
              outp[$len]="$i"
            ;;
            esac
          done
          echo /"${outp[*]}"
        )
      }
      # ViashAutodetectMount: auto configuring docker mounts from parameters
      # $1                  : The parameter value
      # returns             : New parameter
      # $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
      # examples:
      #   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
      #   ViashAutodetectMountArg /path/to/bar   # returns '-v /path/to:/viash_automount/path/to'
      function ViashAutodetectMount {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "$mount_target/$base_name"
      }
      function ViashAutodetectMountArg {
        abs_path=$(ViashAbsolutePath "$1")
        if [ -d "$abs_path" ]; then
          mount_source="$abs_path"
          base_name=""
        else
          mount_source=`dirname "$abs_path"`
          base_name=`basename "$abs_path"`
        fi
        mount_target="/viash_automount$mount_source"
        echo "-v \"$mount_source:$mount_target\""
      }
      # ViashExtractFlags: Retain leading flag
      # $1     : string with a possible leading flag
      # return : leading flag
      # examples:
      #   ViashExtractFlags --foo=bar  # returns --foo
      function ViashExtractFlags {
        echo $1 | sed 's/=.*//'
      }
      # initialise variables
      VIASH_EXTRA_MOUNTS=''
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      VIASH_MODE='run'
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              ---v|---verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              ---verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              ---verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "filter_with_hvg main_build"
                  exit
                  ;;
              --input)
                  VIASH_PAR_INPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --input. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --input=*)
                  VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --modality)
                  if [ -z "$VIASH_PAR_MODALITY" ]; then
                    VIASH_PAR_MODALITY="$2"
                  else
                    VIASH_PAR_MODALITY="$VIASH_PAR_MODALITY:""$2"
                  fi
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --modality. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --modality=*)
                  if [ -z "$VIASH_PAR_MODALITY" ]; then
                    VIASH_PAR_MODALITY=$(ViashRemoveFlags "$1")
                  else
                    VIASH_PAR_MODALITY="$VIASH_PAR_MODALITY:"$(ViashRemoveFlags "$1")
                  fi
                  shift 1
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --output. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --var_name_filter)
                  VIASH_PAR_VAR_NAME_FILTER="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --var_name_filter. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --var_name_filter=*)
                  VIASH_PAR_VAR_NAME_FILTER=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --varm_name)
                  VIASH_PAR_VARM_NAME="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --varm_name. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --varm_name=*)
                  VIASH_PAR_VARM_NAME=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --do_subset)
                  VIASH_PAR_DO_SUBSET=true
                  shift 1
                  ;;
              --flavor)
                  VIASH_PAR_FLAVOR="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --flavor. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --flavor=*)
                  VIASH_PAR_FLAVOR=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --n_top_genes)
                  VIASH_PAR_N_TOP_GENES="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --n_top_genes. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --n_top_genes=*)
                  VIASH_PAR_N_TOP_GENES=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --min_mean)
                  VIASH_PAR_MIN_MEAN="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --min_mean. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --min_mean=*)
                  VIASH_PAR_MIN_MEAN=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --max_mean)
                  VIASH_PAR_MAX_MEAN="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --max_mean. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --max_mean=*)
                  VIASH_PAR_MAX_MEAN=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --min_disp)
                  VIASH_PAR_MIN_DISP="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --min_disp. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --min_disp=*)
                  VIASH_PAR_MIN_DISP=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --max_disp)
                  VIASH_PAR_MAX_DISP="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --max_disp. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --max_disp=*)
                  VIASH_PAR_MAX_DISP=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --span)
                  VIASH_PAR_SPAN="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --span. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --span=*)
                  VIASH_PAR_SPAN=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --n_bins)
                  VIASH_PAR_N_BINS="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --n_bins. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --n_bins=*)
                  VIASH_PAR_N_BINS=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --obs_batch_key)
                  VIASH_PAR_OBS_BATCH_KEY="$2"
                  [ $# -lt 2 ] && ViashError Not enough arguments passed to --obs_batch_key. Use "--help" to get more information on the parameters. && exit 1
                  shift 2
                  ;;
              --obs_batch_key=*)
                  VIASH_PAR_OBS_BATCH_KEY=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              ---setup)
                  VIASH_MODE='docker_setup'
                  VIASH_DOCKER_SETUP_STRATEGY="$2"
                  shift 1
                  ;;
              ---setup=*)
                  VIASH_MODE='docker_setup'
                  VIASH_DOCKER_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
                  shift 2
                  ;;
              ---dockerfile)
                  ViashDockerfile
                  exit 0
                  ;;
              ---v|---volume)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v "$2""
                  shift 2
                  ;;
              ---volume=*)
                  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v $(ViashRemoveFlags "$2")"
                  shift 1
                  ;;
              ---debug)
                  VIASH_MODE='docker_debug'
                  shift 1
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      ViashDockerInstallationCheck
      if [ $VIASH_MODE == "docker_setup" ]; then
        ViashDockerSetup 'ghcr.io/openpipelines-bio/filter_filter_with_hvg:main_build' "$VIASH_DOCKER_SETUP_STRATEGY"
        exit 0
      fi
      ViashDockerSetup 'ghcr.io/openpipelines-bio/filter_filter_with_hvg:main_build' ifneedbepullelsecachedbuild
      if [ $VIASH_MODE == "docker_debug" ]; then
        ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/filter_filter_with_hvg:main_build'"
        docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'ghcr.io/openpipelines-bio/filter_filter_with_hvg:main_build'
        exit 0
      fi
      
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_INPUT" ]; then
        ViashError '--input' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_MODALITY" ]; then
        VIASH_PAR_MODALITY="rna"
      fi
      if [ -z "$VIASH_PAR_VAR_NAME_FILTER" ]; then
        VIASH_PAR_VAR_NAME_FILTER="filter_with_hvg"
      fi
      if [ -z "$VIASH_PAR_VARM_NAME" ]; then
        VIASH_PAR_VARM_NAME="hvg"
      fi
      if [ -z "$VIASH_PAR_DO_SUBSET" ]; then
        VIASH_PAR_DO_SUBSET="false"
      fi
      if [ -z "$VIASH_PAR_FLAVOR" ]; then
        VIASH_PAR_FLAVOR="seurat"
      fi
      if [ -z "$VIASH_PAR_MIN_MEAN" ]; then
        VIASH_PAR_MIN_MEAN="0.0125"
      fi
      if [ -z "$VIASH_PAR_MAX_MEAN" ]; then
        VIASH_PAR_MAX_MEAN="3.0"
      fi
      if [ -z "$VIASH_PAR_MIN_DISP" ]; then
        VIASH_PAR_MIN_DISP="0.5"
      fi
      if [ -z "$VIASH_PAR_SPAN" ]; then
        VIASH_PAR_SPAN="0.3"
      fi
      if [ -z "$VIASH_PAR_N_BINS" ]; then
        VIASH_PAR_N_BINS="20"
      fi
      
      
      # check whether parameters values are of the right type
      
      
      
      
      
      if [[ -n "$VIASH_PAR_DO_SUBSET" ]]; then
        if ! [[ "$VIASH_PAR_DO_SUBSET" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
          ViashError '--do_subset' has to be a boolean_true. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      
      if [[ -n "$VIASH_PAR_N_TOP_GENES" ]]; then
        if ! [[ "$VIASH_PAR_N_TOP_GENES" =~ ^[-+]?[0-9]+$ ]]; then
          ViashError '--n_top_genes' has to be an integer. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      if [[ -n "$VIASH_PAR_MIN_MEAN" ]]; then
        if ! [[ "$VIASH_PAR_MIN_MEAN" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
          ViashError '--min_mean' has to be a double. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      if [[ -n "$VIASH_PAR_MAX_MEAN" ]]; then
        if ! [[ "$VIASH_PAR_MAX_MEAN" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
          ViashError '--max_mean' has to be a double. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      if [[ -n "$VIASH_PAR_MIN_DISP" ]]; then
        if ! [[ "$VIASH_PAR_MIN_DISP" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
          ViashError '--min_disp' has to be a double. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      if [[ -n "$VIASH_PAR_MAX_DISP" ]]; then
        if ! [[ "$VIASH_PAR_MAX_DISP" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
          ViashError '--max_disp' has to be a double. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      if [[ -n "$VIASH_PAR_SPAN" ]]; then
        if ! [[ "$VIASH_PAR_SPAN" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
          ViashError '--span' has to be a double. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      if [[ -n "$VIASH_PAR_N_BINS" ]]; then
        if ! [[ "$VIASH_PAR_N_BINS" =~ ^[-+]?[0-9]+$ ]]; then
          ViashError '--n_bins' has to be an integer. Use "--help" to get more information on the parameters.
          exit 1
        fi
      fi
      
      
      
      # check whether parameters values are of the right type
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # detect volumes from file arguments
      if [ ! -z "$VIASH_PAR_INPUT" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_INPUT")"
        VIASH_PAR_INPUT=$(ViashAutodetectMount "$VIASH_PAR_INPUT")
      fi
      if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
        VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT")"
        VIASH_PAR_OUTPUT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT")
      fi
      
      # Always mount the resource directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_META_RESOURCES_DIR")"
      VIASH_META_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_META_RESOURCES_DIR")
      VIASH_META_EXECUTABLE=$(ViashAutodetectMount "$VIASH_META_EXECUTABLE")
      
      # Always mount the VIASH_TEMP directory
      VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_TEMP")"
      VIASH_TEMP=$(ViashAutodetectMount "$VIASH_TEMP")
      # change file ownership
      function ViashPerformChown {
        
        if [ ! -z "$VIASH_PAR_OUTPUT" ]; then
          eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/openpipelines-bio/filter_filter_with_hvg:main_build "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT"
        fi
      }
      trap ViashPerformChown EXIT
      
      
      cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm $VIASH_EXTRA_MOUNTS ghcr.io/openpipelines-bio/filter_filter_with_hvg:main_build
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-filter_with_hvg-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      function interrupt {
        echo -e "\nCTRL-C Pressed..."
        exit 1
      }
      trap clean_up EXIT
      trap interrupt INT SIGINT
      cat > "\$tempscript" << 'VIASHMAIN'
      
      import scanpy as sc
      import muon as mu
      import numpy as np
      import logging
      from sys import stdout
      
      ## VIASH START
      # The following code has been auto-generated by Viash.
      par = {
        'input': $( if [ ! -z ${VIASH_PAR_INPUT+x} ]; then echo "'${VIASH_PAR_INPUT//\'/\\\'}'"; else echo None; fi ),
        'modality': $( if [ ! -z ${VIASH_PAR_MODALITY+x} ]; then echo "'${VIASH_PAR_MODALITY//\'/\\\'}'.split(':')"; else echo None; fi ),
        'output': $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'${VIASH_PAR_OUTPUT//\'/\\\'}'"; else echo None; fi ),
        'var_name_filter': $( if [ ! -z ${VIASH_PAR_VAR_NAME_FILTER+x} ]; then echo "'${VIASH_PAR_VAR_NAME_FILTER//\'/\\\'}'"; else echo None; fi ),
        'varm_name': $( if [ ! -z ${VIASH_PAR_VARM_NAME+x} ]; then echo "'${VIASH_PAR_VARM_NAME//\'/\\\'}'"; else echo None; fi ),
        'do_subset': $( if [ ! -z ${VIASH_PAR_DO_SUBSET+x} ]; then echo "'${VIASH_PAR_DO_SUBSET//\'/\\\'}'.lower() == 'true'"; else echo None; fi ),
        'flavor': $( if [ ! -z ${VIASH_PAR_FLAVOR+x} ]; then echo "'${VIASH_PAR_FLAVOR//\'/\\\'}'"; else echo None; fi ),
        'n_top_genes': $( if [ ! -z ${VIASH_PAR_N_TOP_GENES+x} ]; then echo "int('${VIASH_PAR_N_TOP_GENES//\'/\\\'}')"; else echo None; fi ),
        'min_mean': $( if [ ! -z ${VIASH_PAR_MIN_MEAN+x} ]; then echo "float('${VIASH_PAR_MIN_MEAN//\'/\\\'}')"; else echo None; fi ),
        'max_mean': $( if [ ! -z ${VIASH_PAR_MAX_MEAN+x} ]; then echo "float('${VIASH_PAR_MAX_MEAN//\'/\\\'}')"; else echo None; fi ),
        'min_disp': $( if [ ! -z ${VIASH_PAR_MIN_DISP+x} ]; then echo "float('${VIASH_PAR_MIN_DISP//\'/\\\'}')"; else echo None; fi ),
        'max_disp': $( if [ ! -z ${VIASH_PAR_MAX_DISP+x} ]; then echo "float('${VIASH_PAR_MAX_DISP//\'/\\\'}')"; else echo None; fi ),
        'span': $( if [ ! -z ${VIASH_PAR_SPAN+x} ]; then echo "float('${VIASH_PAR_SPAN//\'/\\\'}')"; else echo None; fi ),
        'n_bins': $( if [ ! -z ${VIASH_PAR_N_BINS+x} ]; then echo "int('${VIASH_PAR_N_BINS//\'/\\\'}')"; else echo None; fi ),
        'obs_batch_key': $( if [ ! -z ${VIASH_PAR_OBS_BATCH_KEY+x} ]; then echo "'${VIASH_PAR_OBS_BATCH_KEY//\'/\\\'}'"; else echo None; fi )
      }
      meta = {
        'functionality_name': '$VIASH_META_FUNCTIONALITY_NAME',
        'resources_dir': '$VIASH_META_RESOURCES_DIR',
        'executable': '$VIASH_META_EXECUTABLE',
        'temp_dir': '$VIASH_TEMP'
      }
      
      resources_dir = '$VIASH_META_RESOURCES_DIR'
      
      ## VIASH END
      
      logger = logging.getLogger()
      logger.setLevel(logging.INFO)
      console_handler = logging.StreamHandler(stdout)
      logFormatter = logging.Formatter("%(asctime)s %(levelname)-8s %(message)s")
      console_handler.setFormatter(logFormatter)
      logger.addHandler(console_handler)
      
      mdata = mu.read_h5mu(par["input"])
      mdata.var_names_make_unique()
      
      for mod in par['modality']:
          logger.info(f"Processing modality '%s'", mod)
          data = mdata.mod[mod]
      
          # Workaround for issue 
          # https://github.com/scverse/scanpy/issues/2239
          # https://github.com/scverse/scanpy/issues/2181
          if 'log1p' in data.uns and 'base' not in data.uns['log1p']:
              data.uns['log1p']['base'] = None
          #sc.pp.log1p(data)
      
          logger.info("\\tUnfiltered data: %s", data)
      
          logger.info("\\tComputing hvg")
          # construct arguments
          hvg_args = {
              'adata': data,
              'n_top_genes': par["n_top_genes"],
              'min_mean': par["min_mean"],
              'max_mean': par["max_mean"],
              'min_disp': par["min_disp"],
              'span': par["span"],
              'n_bins': par["n_bins"],
              'flavor': par["flavor"],
              'subset': False,
              'inplace': False
          }
      
          # only add parameter if it's passed
          if par.get("max_disp", None) is not None:
              hvg_args["max_disp"] = par["max_disp"]
          if par.get("obs_batch_key", None) is not None:
              hvg_args["batch_key"] = par["obs_batch_key"]
          
          # call function
          try:
              out = sc.pp.highly_variable_genes(**hvg_args)
              out.index = data.var.index
          except ValueError as err:
              if str(err) == "cannot specify integer \`bins\` when input data contains infinity":
                  err.args = ("Cannot specify integer \`bins\` when input data contains infinity. Perhaps input data has not been log normalized?",)
              raise err
      
          logger.info("\\tStoring output into .var")
          if par.get("var_name_filter", None) is not None:
              data.var[par["var_name_filter"]] = out["highly_variable"]
      
          if par.get("varm_name", None) is not None:
              # drop mean_bin as muon/anndata doesn't support tuples
              data.varm[par["varm_name"]] = out.drop("mean_bin", axis=1)
      
          if par["do_subset"]:
              keep_feats = np.ravel(data.var[par["var_name_filter"]])
              mdata.mod[mod] = data[:,keep_feats]
      
      logger.info("Writing h5mu to file")
      mdata.write_h5mu(par["output"])
      
      VIASHMAIN
      python "\$tempscript" &
      wait "\$!"
      
      VIASHEOF
      

    dest: "filter_with_hvg"
    is_executable: true
  description: "Annotate highly variable genes [Satija15] [Zheng17] [Stuart19].\n\n\
    Expects logarithmized data, except when flavor='seurat_v3' in which count data\
    \ is expected.\n\nDepending on flavor, this reproduces the R-implementations of\
    \ Seurat [Satija15], Cell Ranger [Zheng17], and Seurat v3 [Stuart19].\n\nFor the\
    \ dispersion-based methods ([Satija15] and [Zheng17]), the normalized dispersion\
    \ is obtained by scaling with the mean and standard deviation of the dispersions\
    \ for genes falling into a given bin for mean expression of genes. This means\
    \ that for each bin of mean expression, highly variable genes are selected.\n\n\
    For [Stuart19], a normalized variance for each gene is computed. First, the data\
    \ are standardized (i.e., z-score normalization per feature) with a regularized\
    \ standard deviation. Next, the normalized variance is computed as the variance\
    \ of each gene after the transformation. Genes are ranked by the normalized variance.\n"
  test_resources:
  - type: "python_script"
    path: "run_test.py"
    is_executable: true
  - type: "file"
    path: "../../../resources_test/pbmc_1k_protein_v3"
  info: {}
  dummy_arguments: []
  set_wd_to_resources_dir: false
  enabled: true
platform:
  type: "docker"
  id: "docker"
  image: "python:3.8"
  target_organization: "openpipelines-bio"
  target_registry: "ghcr.io"
  namespace_separator: "_"
  resolve_volume: "Automatic"
  chown: true
  port: []
  setup_strategy: "ifneedbepullelsecachedbuild"
  privileged: false
  run_args: []
  target_image_source: "https://github.com/openpipelines-bio/openpipeline"
  setup: []
  python:
    user: false
    packages:
    - "scanpy~=1.9.1"
    - "muon"
    - "mudata~=0.2.0"
    - "anndata~=0.8.0"
    pip: []
    pypi: []
    git: []
    github: []
    gitlab: []
    mercurial: []
    svn: []
    bazaar: []
    url: []
    script: []
    upgrade: true
    type: "python"
  test_setup: []
platforms: []
info:
  config: "src/filter/filter_with_hvg/config.vsh.yaml"
  platform: "docker"
  output: "target/docker/filter/filter_with_hvg"
  executable: "target/docker/filter/filter_with_hvg/filter_with_hvg"
  viash_version: "0.5.15"
  git_commit: "ef7b9935dbe32d4ff5eed9a2b34c768b061329d1"
  git_remote: "https://github.com/openpipelines-bio/openpipeline"
